
C:\Users\Spence\AppData\Local\Temp\arduino_build_459707/16bitxorshift_speed.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	3c c0       	rjmp	.+120    	; 0x7a <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	63 c0       	rjmp	.+198    	; 0xcc <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	61 c0       	rjmp	.+194    	; 0xcc <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	5f c0       	rjmp	.+190    	; 0xcc <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	5d c0       	rjmp	.+186    	; 0xcc <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	5b c0       	rjmp	.+182    	; 0xcc <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	59 c0       	rjmp	.+178    	; 0xcc <__bad_interrupt>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	57 c0       	rjmp	.+174    	; 0xcc <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	55 c0       	rjmp	.+170    	; 0xcc <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	53 c0       	rjmp	.+166    	; 0xcc <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	51 c0       	rjmp	.+162    	; 0xcc <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	4f c0       	rjmp	.+158    	; 0xcc <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	4d c0       	rjmp	.+154    	; 0xcc <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	4b c0       	rjmp	.+150    	; 0xcc <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	49 c0       	rjmp	.+146    	; 0xcc <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	47 c0       	rjmp	.+142    	; 0xcc <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	45 c0       	rjmp	.+138    	; 0xcc <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__vector_17>
../../../../crt1/gcrt1.S:84
      48:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__vector_18>
../../../../crt1/gcrt1.S:85
      4c:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__vector_19>
../../../../crt1/gcrt1.S:86
      50:	3d c0       	rjmp	.+122    	; 0xcc <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	3b c0       	rjmp	.+118    	; 0xcc <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	39 c0       	rjmp	.+114    	; 0xcc <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	37 c0       	rjmp	.+110    	; 0xcc <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	35 c0       	rjmp	.+106    	; 0xcc <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__vector_25>
../../../../crt1/gcrt1.S:92
      68:	31 c0       	rjmp	.+98     	; 0xcc <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	2f c0       	rjmp	.+94     	; 0xcc <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	2d c0       	rjmp	.+90     	; 0xcc <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	2b c0       	rjmp	.+86     	; 0xcc <__bad_interrupt>
	...

00000078 <__ctors_start>:
__trampolines_start():
      78:	58 0d       	add	r21, r8

0000007a <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      7a:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      7c:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      7e:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      80:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      82:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      84:	de bf       	out	0x3e, r29	; 62

00000086 <_initThreeStuff()>:
init_reset_flags():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/main.cpp:98

  /* Minimum: Reset if we wound up here through malfunction - this relies on user clearing the  *
   * register on startup, which is rarely done in Arduino land.                                 */
  void __attribute__((weak)) init_reset_flags() ;
  void __attribute__((weak)) init_reset_flags() {
    uint8_t flags = RSTCTRL.RSTFR;
      86:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <rng_ptr+0x7f6410>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/main.cpp:99
    RSTCTRL.RSTFR = flags;
      8a:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <rng_ptr+0x7f6410>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/main.cpp:100
    if (flags == 0) {
      8e:	81 11       	cpse	r24, r1
      90:	05 c0       	rjmp	.+10     	; 0x9c <_initThreeStuff()+0x16>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/main.cpp:101
      _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
      92:	98 ed       	ldi	r25, 0xD8	; 216
      94:	21 e0       	ldi	r18, 0x01	; 1
      96:	94 bf       	out	0x34, r25	; 52
      98:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <rng_ptr+0x7f6411>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/main.cpp:103
    }
    GPIOR0 = flags;
      9c:	8c bb       	out	0x1c, r24	; 28

0000009e <__do_clear_bss>:
__do_clear_bss():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      9e:	25 e3       	ldi	r18, 0x35	; 53
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      a0:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      a2:	b4 e3       	ldi	r27, 0x34	; 52
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      a8:	a8 31       	cpi	r26, 0x18	; 24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      aa:	b2 07       	cpc	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>

000000ae <__do_global_ctors>:
__do_global_ctors():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      ae:	10 e0       	ldi	r17, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      b0:	cd e3       	ldi	r28, 0x3D	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      b2:	d0 e0       	ldi	r29, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      b4:	04 c0       	rjmp	.+8      	; 0xbe <__do_global_ctors+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      b6:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      b8:	fe 01       	movw	r30, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      ba:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__tablejump2__>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      be:	cc 33       	cpi	r28, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      c0:	d1 07       	cpc	r29, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      c2:	c9 f7       	brne	.-14     	; 0xb6 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
      c4:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <main>
../../../../crt1/gcrt1.S:315
      c8:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <_exit>

000000cc <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
      cc:	99 cf       	rjmp	.-206    	; 0x0 <__vectors>

000000ce <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:29
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size) {
      ce:	af 92       	push	r10
      d0:	bf 92       	push	r11
      d2:	cf 92       	push	r12
      d4:	df 92       	push	r13
      d6:	ef 92       	push	r14
      d8:	ff 92       	push	r15
      da:	0f 93       	push	r16
      dc:	1f 93       	push	r17
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	6c 01       	movw	r12, r24
      e4:	7b 01       	movw	r14, r22
      e6:	8b 01       	movw	r16, r22
      e8:	04 0f       	add	r16, r20
      ea:	15 1f       	adc	r17, r21
      ec:	eb 01       	movw	r28, r22
      ee:	5e 01       	movw	r10, r28
      f0:	ae 18       	sub	r10, r14
      f2:	bf 08       	sbc	r11, r15
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:31
  size_t n = 0;
  while (size--) {
      f4:	c0 17       	cp	r28, r16
      f6:	d1 07       	cpc	r29, r17
      f8:	59 f0       	breq	.+22     	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:32
    if (write(*buffer++)) {
      fa:	69 91       	ld	r22, Y+
      fc:	d6 01       	movw	r26, r12
      fe:	ed 91       	ld	r30, X+
     100:	fc 91       	ld	r31, X
     102:	01 90       	ld	r0, Z+
     104:	f0 81       	ld	r31, Z
     106:	e0 2d       	mov	r30, r0
     108:	c6 01       	movw	r24, r12
     10a:	09 95       	icall
     10c:	89 2b       	or	r24, r25
     10e:	79 f7       	brne	.-34     	; 0xee <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:39
    } else {
      break;
    }
  }
  return n;
}
     110:	c5 01       	movw	r24, r10
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	1f 91       	pop	r17
     118:	0f 91       	pop	r16
     11a:	ff 90       	pop	r15
     11c:	ef 90       	pop	r14
     11e:	df 90       	pop	r13
     120:	cf 90       	pop	r12
     122:	bf 90       	pop	r11
     124:	af 90       	pop	r10
     126:	08 95       	ret

00000128 <UartClass::availableForWrite()>:
availableForWrite():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:641
      int UartClass::availableForWrite(void) {
        tx_buffer_index_t head;
        tx_buffer_index_t tail;

        TX_BUFFER_ATOMIC {
          head = _tx_buffer_head;
     128:	fc 01       	movw	r30, r24
     12a:	57 85       	ldd	r21, Z+15	; 0x0f
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:642
          tail = _tx_buffer_tail;
     12c:	40 89       	ldd	r20, Z+16	; 0x10
     12e:	25 2f       	mov	r18, r21
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	84 2f       	mov	r24, r20
     134:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:645
        }
        if (head >= tail) {
          return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     136:	82 1b       	sub	r24, r18
     138:	93 0b       	sbc	r25, r19
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:644

        TX_BUFFER_ATOMIC {
          head = _tx_buffer_head;
          tail = _tx_buffer_tail;
        }
        if (head >= tail) {
     13a:	54 17       	cp	r21, r20
     13c:	10 f0       	brcs	.+4      	; 0x142 <UartClass::availableForWrite()+0x1a>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:645
          return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     13e:	cf 96       	adiw	r24, 0x3f	; 63
     140:	08 95       	ret
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:647
        }
        return tail - head - 1;
     142:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:648
      }
     144:	08 95       	ret

00000146 <UartClass::read()>:
read():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:625
      } else {
        return _rx_buffer[_rx_buffer_tail];
      }
    }

    int UartClass::read(void) {
     146:	fc 01       	movw	r30, r24
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:627
      // if the head isn't ahead of the tail, we don't have any characters
      if (_rx_buffer_head == _rx_buffer_tail) {
     148:	95 85       	ldd	r25, Z+13	; 0x0d
     14a:	86 85       	ldd	r24, Z+14	; 0x0e
     14c:	98 17       	cp	r25, r24
     14e:	61 f0       	breq	.+24     	; 0x168 <UartClass::read()+0x22>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:630
        return -1;
      } else {
        unsigned char c = _rx_buffer[_rx_buffer_tail];
     150:	a6 85       	ldd	r26, Z+14	; 0x0e
     152:	ae 0f       	add	r26, r30
     154:	bf 2f       	mov	r27, r31
     156:	b1 1d       	adc	r27, r1
     158:	51 96       	adiw	r26, 0x11	; 17
     15a:	8c 91       	ld	r24, X
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:631
        _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1);   // % SERIAL_RX_BUFFER_SIZE;
     15c:	96 85       	ldd	r25, Z+14	; 0x0e
     15e:	9f 5f       	subi	r25, 0xFF	; 255
     160:	9f 73       	andi	r25, 0x3F	; 63
     162:	96 87       	std	Z+14, r25	; 0x0e
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:632
        return c;
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	08 95       	ret
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:628
    }

    int UartClass::read(void) {
      // if the head isn't ahead of the tail, we don't have any characters
      if (_rx_buffer_head == _rx_buffer_tail) {
        return -1;
     168:	8f ef       	ldi	r24, 0xFF	; 255
     16a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:634
      } else {
        unsigned char c = _rx_buffer[_rx_buffer_tail];
        _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1);   // % SERIAL_RX_BUFFER_SIZE;
        return c;
      }
    }
     16c:	08 95       	ret

0000016e <UartClass::peek()>:
peek():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:617

    int UartClass::available(void) {
      return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1);   //% SERIAL_RX_BUFFER_SIZE;
    }

    int UartClass::peek(void) {
     16e:	fc 01       	movw	r30, r24
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:618
      if (_rx_buffer_head == _rx_buffer_tail) {
     170:	95 85       	ldd	r25, Z+13	; 0x0d
     172:	86 85       	ldd	r24, Z+14	; 0x0e
     174:	98 17       	cp	r25, r24
     176:	31 f0       	breq	.+12     	; 0x184 <UartClass::peek()+0x16>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:621
        return -1;
      } else {
        return _rx_buffer[_rx_buffer_tail];
     178:	86 85       	ldd	r24, Z+14	; 0x0e
     17a:	e8 0f       	add	r30, r24
     17c:	f1 1d       	adc	r31, r1
     17e:	81 89       	ldd	r24, Z+17	; 0x11
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	08 95       	ret
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:619
      return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1);   //% SERIAL_RX_BUFFER_SIZE;
    }

    int UartClass::peek(void) {
      if (_rx_buffer_head == _rx_buffer_tail) {
        return -1;
     184:	8f ef       	ldi	r24, 0xFF	; 255
     186:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:623
      } else {
        return _rx_buffer[_rx_buffer_tail];
      }
    }
     188:	08 95       	ret

0000018a <UartClass::available()>:
available():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:613
      // Note: Does not change output pins
      // though the datasheetsays turning the TX module sets it to input.
      _state = 0;
    }

    int UartClass::available(void) {
     18a:	fc 01       	movw	r30, r24
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:614
      return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1);   //% SERIAL_RX_BUFFER_SIZE;
     18c:	95 85       	ldd	r25, Z+13	; 0x0d
     18e:	26 85       	ldd	r18, Z+14	; 0x0e
     190:	89 2f       	mov	r24, r25
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	80 5c       	subi	r24, 0xC0	; 192
     196:	9f 4f       	sbci	r25, 0xFF	; 255
     198:	82 1b       	sub	r24, r18
     19a:	91 09       	sbc	r25, r1
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:615
    }
     19c:	8f 73       	andi	r24, 0x3F	; 63
     19e:	99 27       	eor	r25, r25
     1a0:	08 95       	ret

000001a2 <UartClass::_poll_tx_data_empty()>:
_poll_tx_data_empty():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:348
        uartClass._tx_buffer_tail = txTail;
      }
    #endif

    // To invoke data empty "interrupt" via a call, use this method
    void UartClass::_poll_tx_data_empty(void) {
     1a2:	fc 01       	movw	r30, r24
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:349
      if ((!(SREG & CPU_I_bm)) ||  CPUINT.STATUS) {
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	07 fe       	sbrs	r0, 7
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <UartClass::_poll_tx_data_empty()+0x10>
     1aa:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <rng_ptr+0x7f64e1>
     1ae:	88 23       	and	r24, r24
     1b0:	a9 f0       	breq	.+42     	; 0x1dc <_poll_dre_done>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:366
        // so we'll have to poll the "data register empty" flag ourselves.
        // If it is set, pretend an interrupt has happened and call the handler
        // to free up space for us.
        // -Spence 10/23/20
        // Invoke interrupt handler only if conditions data register is empty
        if ((*_hwserial_module).STATUS & USART_DREIF_bm) {
     1b2:	a0 85       	ldd	r26, Z+8	; 0x08
     1b4:	b1 85       	ldd	r27, Z+9	; 0x09
     1b6:	14 96       	adiw	r26, 0x04	; 4
     1b8:	8c 91       	ld	r24, X
     1ba:	14 97       	sbiw	r26, 0x04	; 4
     1bc:	85 ff       	sbrs	r24, 5
     1be:	0e c0       	rjmp	.+28     	; 0x1dc <_poll_dre_done>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:367
          if (_tx_buffer_head != _tx_buffer_tail) {
     1c0:	97 85       	ldd	r25, Z+15	; 0x0f
     1c2:	80 89       	ldd	r24, Z+16	; 0x10
     1c4:	98 17       	cp	r25, r24
     1c6:	39 f0       	breq	.+14     	; 0x1d6 <UartClass::_poll_tx_data_empty()+0x34>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:369
            // Buffer empty, so disable "data register empty" interrupt
            (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     1c8:	15 96       	adiw	r26, 0x05	; 5
     1ca:	8c 91       	ld	r24, X
     1cc:	15 97       	sbiw	r26, 0x05	; 5
     1ce:	8f 7d       	andi	r24, 0xDF	; 223
     1d0:	15 96       	adiw	r26, 0x05	; 5
     1d2:	8c 93       	st	X, r24
     1d4:	08 95       	ret
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:393
    #ifdef USART1
                    ::"z"((uint16_t)thisSerial)
    #else
                    ::"z"(&Serial)
    #endif
                    : "r18","r19","r24","r25","r26","r27");
     1d6:	e8 94       	clt
     1d8:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <_poll_dre>

000001dc <_poll_dre_done>:
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:400
        }
      }
      // In case interrupts are enabled, the interrupt routine will be invoked by itself
      // Note that this currently does not handle cases where the DRE interruopt becomes
      // disabled, yet you are actually attempting to send. I don't think it can happen.
    }
     1dc:	08 95       	ret

000001de <UartClass::write(unsigned char)>:
write():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:681
        // When we get here, nothing is queued anymore (DREIE is disabled) and
        // the hardware finished transmission (TXCIF is set).
      }


      size_t UartClass::write(uint8_t c) {
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	ec 01       	movw	r28, r24
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:682
        _state |= 1; // Record that we have written to serial since it was begun.
     1e8:	8c 85       	ldd	r24, Y+12	; 0x0c
     1ea:	98 2f       	mov	r25, r24
     1ec:	91 60       	ori	r25, 0x01	; 1
     1ee:	9c 87       	std	Y+12, r25	; 0x0c
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:687
        // If the buffer and the data register is empty, just write the byte
        // to the data register and be done. This shortcut helps
        // significantly improve the effective data rate at high (>
        // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
        if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
     1f0:	2f 85       	ldd	r18, Y+15	; 0x0f
     1f2:	98 89       	ldd	r25, Y+16	; 0x10
     1f4:	29 13       	cpse	r18, r25
     1f6:	0a c0       	rjmp	.+20     	; 0x20c <UartClass::write(unsigned char)+0x2e>
     1f8:	e8 85       	ldd	r30, Y+8	; 0x08
     1fa:	f9 85       	ldd	r31, Y+9	; 0x09
     1fc:	94 81       	ldd	r25, Z+4	; 0x04
     1fe:	95 ff       	sbrs	r25, 5
     200:	05 c0       	rjmp	.+10     	; 0x20c <UartClass::write(unsigned char)+0x2e>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:688
          if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     202:	81 fd       	sbrc	r24, 1
     204:	0d c0       	rjmp	.+26     	; 0x220 <UartClass::write(unsigned char)+0x42>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:695
            ctrla &= ~USART_RXCIE_bm;
            ctrla |=  USART_TXCIE_bm;
            (*_hwserial_module).STATUS = USART_TXCIF_bm;
            (*_hwserial_module).CTRLA = ctrla;
          } else {
            (*_hwserial_module).STATUS = USART_TXCIF_bm;
     206:	80 e4       	ldi	r24, 0x40	; 64
     208:	84 83       	std	Z+4, r24	; 0x04
     20a:	12 c0       	rjmp	.+36     	; 0x230 <UartClass::write(unsigned char)+0x52>
     20c:	06 2f       	mov	r16, r22
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:713
           * // that the interrupt handler is called in this situation
           * (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
           */
          return 1;
        }
        tx_buffer_index_t i = (_tx_buffer_head + 1) & (SERIAL_TX_BUFFER_SIZE - 1);  // % SERIAL_TX_BUFFER_SIZE;
     20e:	1f 85       	ldd	r17, Y+15	; 0x0f
     210:	1f 5f       	subi	r17, 0xFF	; 255
     212:	1f 73       	andi	r17, 0x3F	; 63
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:717

        // If the output buffer is full, there's nothing we can do other than to
        // wait for the interrupt handler to empty it a bit (or emulate interrupts)
        while (i == _tx_buffer_tail) {
     214:	88 89       	ldd	r24, Y+16	; 0x10
     216:	81 13       	cpse	r24, r17
     218:	15 c0       	rjmp	.+42     	; 0x244 <UartClass::write(unsigned char)+0x66>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:718
          _poll_tx_data_empty();
     21a:	ce 01       	movw	r24, r28
     21c:	c2 df       	rcall	.-124    	; 0x1a2 <UartClass::_poll_tx_data_empty()>
     21e:	fa cf       	rjmp	.-12     	; 0x214 <UartClass::write(unsigned char)+0x36>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:689
        // to the data register and be done. This shortcut helps
        // significantly improve the effective data rate at high (>
        // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
        if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
          if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
            uint8_t ctrla = (*_hwserial_module).CTRLA;
     220:	85 81       	ldd	r24, Z+5	; 0x05
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:690
            ctrla &= ~USART_RXCIE_bm;
     222:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:691
            ctrla |=  USART_TXCIE_bm;
     224:	80 64       	ori	r24, 0x40	; 64
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:692
            (*_hwserial_module).STATUS = USART_TXCIF_bm;
     226:	90 e4       	ldi	r25, 0x40	; 64
     228:	94 83       	std	Z+4, r25	; 0x04
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:693
            (*_hwserial_module).CTRLA = ctrla;
     22a:	e8 85       	ldd	r30, Y+8	; 0x08
     22c:	f9 85       	ldd	r31, Y+9	; 0x09
     22e:	85 83       	std	Z+5, r24	; 0x05
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:698
          } else {
            (*_hwserial_module).STATUS = USART_TXCIF_bm;
          }
          // MUST clear TXCIF **before** writing new char, otherwise ill-timed interrupt can cause it to erase the flag after the new charchter has been sent!
          (*_hwserial_module).TXDATAL = c;
     230:	e8 85       	ldd	r30, Y+8	; 0x08
     232:	f9 85       	ldd	r31, Y+9	; 0x09
     234:	62 83       	std	Z+2, r22	; 0x02
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:733
        } else {
          // Enable "data register empty interrupt"
          (*_hwserial_module).CTRLA |= USART_DREIE_bm;
        }
        return 1;
      }
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	08 95       	ret
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:720
        // If the output buffer is full, there's nothing we can do other than to
        // wait for the interrupt handler to empty it a bit (or emulate interrupts)
        while (i == _tx_buffer_tail) {
          _poll_tx_data_empty();
        }
        _tx_buffer[_tx_buffer_head] = c;
     244:	ef 85       	ldd	r30, Y+15	; 0x0f
     246:	ec 0f       	add	r30, r28
     248:	fd 2f       	mov	r31, r29
     24a:	f1 1d       	adc	r31, r1
     24c:	ef 5a       	subi	r30, 0xAF	; 175
     24e:	ff 4f       	sbci	r31, 0xFF	; 255
     250:	00 83       	st	Z, r16
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:721
        _tx_buffer_head = i;
     252:	1f 87       	std	Y+15, r17	; 0x0f
     254:	e8 85       	ldd	r30, Y+8	; 0x08
     256:	f9 85       	ldd	r31, Y+9	; 0x09
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:722
        if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     258:	8c 85       	ldd	r24, Y+12	; 0x0c
     25a:	81 ff       	sbrs	r24, 1
     25c:	09 c0       	rjmp	.+18     	; 0x270 <UartClass::write(unsigned char)+0x92>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:723
          uint8_t ctrla = (*_hwserial_module).CTRLA;
     25e:	85 81       	ldd	r24, Z+5	; 0x05
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:724
          ctrla &= ~USART_RXCIE_bm;
     260:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:725
          ctrla |= USART_TXCIE_bm | USART_DREIE_bm;
     262:	80 66       	ori	r24, 0x60	; 96
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:726
          (*_hwserial_module).STATUS = USART_TXCIF_bm;
     264:	90 e4       	ldi	r25, 0x40	; 64
     266:	94 83       	std	Z+4, r25	; 0x04
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:727
          (*_hwserial_module).CTRLA = ctrla;
     268:	e8 85       	ldd	r30, Y+8	; 0x08
     26a:	f9 85       	ldd	r31, Y+9	; 0x09
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:730
        } else {
          // Enable "data register empty interrupt"
          (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     26c:	85 83       	std	Z+5, r24	; 0x05
     26e:	e3 cf       	rjmp	.-58     	; 0x236 <UartClass::write(unsigned char)+0x58>
     270:	85 81       	ldd	r24, Z+5	; 0x05
     272:	80 62       	ori	r24, 0x20	; 32
     274:	fb cf       	rjmp	.-10     	; 0x26c <UartClass::write(unsigned char)+0x8e>

00000276 <UartClass::flush()>:
flush():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:650
          return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
        }
        return tail - head - 1;
      }

      void UartClass::flush() {
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	ec 01       	movw	r28, r24
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:654
        // If we have never written a byte, no need to flush. This special
        // case is needed since there is no way to force the TXCIF (transmit
        // complete) bit to 1 during initialization
        if (!_state & 1) {
     27c:	8c 85       	ldd	r24, Y+12	; 0x0c
     27e:	88 23       	and	r24, r24
     280:	59 f0       	breq	.+22     	; 0x298 <UartClass::flush()+0x22>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:669
        // it's appropriate to use for applications where it has only very small benefits, and significant risk of surprising the user and causing
        // breakage of code that would otherwise work. Finally, the previous implementation didn't check if it was called from the current lvl1 ISR
        // and in that case flush(), and write() with full buffer would just straight up hang...

        // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
        while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm))) {
     282:	e8 85       	ldd	r30, Y+8	; 0x08
     284:	f9 85       	ldd	r31, Y+9	; 0x09
     286:	85 81       	ldd	r24, Z+5	; 0x05
     288:	85 fd       	sbrc	r24, 5
     28a:	03 c0       	rjmp	.+6      	; 0x292 <UartClass::flush()+0x1c>
     28c:	84 81       	ldd	r24, Z+4	; 0x04
     28e:	86 fd       	sbrc	r24, 6
     290:	03 c0       	rjmp	.+6      	; 0x298 <UartClass::flush()+0x22>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:674

          // If interrupts are globally disabled or the and DR empty interrupt is disabled,
          // poll the "data register empty" interrupt flag to prevent deadlock

          _poll_tx_data_empty();
     292:	ce 01       	movw	r24, r28
     294:	86 df       	rcall	.-244    	; 0x1a2 <UartClass::_poll_tx_data_empty()>
     296:	f5 cf       	rjmp	.-22     	; 0x282 <UartClass::flush()+0xc>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:678
        }
        // When we get here, nothing is queued anymore (DREIE is disabled) and
        // the hardware finished transmission (TXCIF is set).
      }
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <micros>:
micros():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:321
    #else
      uint8_t ticks;
    #endif
    uint8_t flags;
    /* Save current state and disable interrupts */
    uint8_t oldSREG = SREG;
     29e:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:322
    cli(); /* INTERRUPTS OFF */
     2a0:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:332
      TCD0.CTRLE = TCD_SCAPTUREA_bm;
      while (!(TCD0.STATUS & TCD_CMDRDY_bm)); // wait for sync - should be only one iteration of this loop
      flags = TCD0.INTFLAGS;
      ticks = TCD0.CAPTUREA;
    #else
      ticks = _timer->CNT;
     2a2:	e0 91 9a 0a 	lds	r30, 0x0A9A	; 0x800a9a <rng_ptr+0x7f6e6a>
     2a6:	f0 91 9b 0a 	lds	r31, 0x0A9B	; 0x800a9b <rng_ptr+0x7f6e6b>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:333
      flags = _timer->INTFLAGS;
     2aa:	80 91 96 0a 	lds	r24, 0x0A96	; 0x800a96 <rng_ptr+0x7f6e66>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:343
     * doesn't matter.
     * Get current number of overflows and timer count */
    #if !(defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1) || defined(MILLIS_USE_TIMERB2) || defined(MILLIS_USE_TIMERB3) || defined(MILLIS_USE_TIMERB4))
      overflows = timer_overflow_count;
    #else
      overflows = timer_millis;
     2ae:	20 91 78 34 	lds	r18, 0x3478	; 0x803478 <timer_millis>
     2b2:	30 91 79 34 	lds	r19, 0x3479	; 0x803479 <timer_millis+0x1>
     2b6:	40 91 7a 34 	lds	r20, 0x347A	; 0x80347a <timer_millis+0x2>
     2ba:	50 91 7b 34 	lds	r21, 0x347B	; 0x80347b <timer_millis+0x3>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:346
    #endif
    /* Turn interrupts back on, assuming they were on when micros was called. */
    SREG = oldSREG; /* INTERRUPTS ON */
     2be:	9f bf       	out	0x3f, r25	; 63
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:353
      if ((flags & TCD_OVF_bm) && (ticks < 0x07)) {
    #elif defined(MILLIS_USE_TIMERA0)
      ticks = (TIME_TRACKING_TIMER_PERIOD) - ticks;
      if ((flags & TCA_SPLIT_HUNF_bm) && (ticks < 0x4)) {
    #else // timerb
      if ((flags & TCB_CAPT_bm) && !(ticks & 0xFF00)) {
     2c0:	80 ff       	sbrs	r24, 0
     2c2:	08 c0       	rjmp	.+16     	; 0x2d4 <micros+0x36>
     2c4:	cf 01       	movw	r24, r30
     2c6:	88 27       	eor	r24, r24
     2c8:	89 2b       	or	r24, r25
     2ca:	21 f4       	brne	.+8      	; 0x2d4 <micros+0x36>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:358
    #endif
        #if (defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1) || defined(MILLIS_USE_TIMERB2) || defined(MILLIS_USE_TIMERB3) || defined(MILLIS_USE_TIMERB4)) && !(F_CPU > 2000000UL)
          overflows +=2;
        #else
          overflows++;
     2cc:	2f 5f       	subi	r18, 0xFF	; 255
     2ce:	3f 4f       	sbci	r19, 0xFF	; 255
     2d0:	4f 4f       	sbci	r20, 0xFF	; 255
     2d2:	5f 4f       	sbci	r21, 0xFF	; 255
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:580
       * 46 replaced with 25 save 21 clocks @ 10 = 2.5 us saved
       * 56 replaced with 27 save 29 clocks @ 20 = 1.5 us saved
       * 66 replaced with 29 save 37 clocks @ 40 = 1 us saved
       */
      #elif (F_CPU == 40000000UL || F_CPU == 20000000UL || F_CPU == 10000000UL || F_CPU == 5000000UL)
        __asm__ __volatile__(
     2d4:	0f 01       	movw	r0, r30
     2d6:	16 94       	lsr	r1
     2d8:	07 94       	ror	r0
     2da:	16 94       	lsr	r1
     2dc:	07 94       	ror	r0
     2de:	16 94       	lsr	r1
     2e0:	07 94       	ror	r0
     2e2:	f0 01       	movw	r30, r0
     2e4:	16 94       	lsr	r1
     2e6:	07 94       	ror	r0
     2e8:	16 94       	lsr	r1
     2ea:	07 94       	ror	r0
     2ec:	e0 19       	sub	r30, r0
     2ee:	f1 09       	sbc	r31, r1
     2f0:	16 94       	lsr	r1
     2f2:	07 94       	ror	r0
     2f4:	06 94       	lsr	r0
     2f6:	10 2c       	mov	r1, r0
     2f8:	16 94       	lsr	r1
     2fa:	16 94       	lsr	r1
     2fc:	01 18       	sub	r0, r1
     2fe:	16 94       	lsr	r1
     300:	16 94       	lsr	r1
     302:	01 0c       	add	r0, r1
     304:	11 24       	eor	r1, r1
     306:	e0 0d       	add	r30, r0
     308:	f1 1d       	adc	r31, r1
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:617
          "add r0,r1"     "\n\t"  // + ticks >> 8
          "eor r1,r1"     "\n\t"  // restore zero_reg
          "add %A0,r0"    "\n\t"  // add to the shifted ticks
          "adc %B0,r1"    "\n"    // carry
          : "+r" (ticks));        // Do the rest in C. ticks is a read/write operand.
        microseconds = overflows * 1000 + ticks;
     30a:	a8 ee       	ldi	r26, 0xE8	; 232
     30c:	b3 e0       	ldi	r27, 0x03	; 3
     30e:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__muluhisi3>
     312:	6e 0f       	add	r22, r30
     314:	7f 1f       	adc	r23, r31
     316:	81 1d       	adc	r24, r1
     318:	91 1d       	adc	r25, r1
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:707
        microseconds = ((overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                      + (ticks * (millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
      #endif
    #endif // end of timer-specific part of micros calculations
    return microseconds;
  }
     31a:	08 95       	ret

0000031c <rng59(unsigned int)>:
rng59():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:814
}

// a=2 b=7 c=15 
uint16_t rng59(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     31c:	00 97       	sbiw	r24, 0x00	; 0
     31e:	21 f0       	breq	.+8      	; 0x328 <rng59(unsigned int)+0xc>
     320:	80 93 76 34 	sts	0x3476, r24	; 0x803476 <rng59(unsigned int)::y>
     324:	90 93 77 34 	sts	0x3477, r25	; 0x803477 <rng59(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:815
  y ^= y << 2;
     328:	80 91 76 34 	lds	r24, 0x3476	; 0x803476 <rng59(unsigned int)::y>
     32c:	90 91 77 34 	lds	r25, 0x3477	; 0x803477 <rng59(unsigned int)::y+0x1>
     330:	9c 01       	movw	r18, r24
     332:	22 0f       	add	r18, r18
     334:	33 1f       	adc	r19, r19
     336:	22 0f       	add	r18, r18
     338:	33 1f       	adc	r19, r19
     33a:	28 27       	eor	r18, r24
     33c:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:816
  y ^= y >> 7;
     33e:	c9 01       	movw	r24, r18
     340:	88 0f       	add	r24, r24
     342:	89 2f       	mov	r24, r25
     344:	88 1f       	adc	r24, r24
     346:	99 0b       	sbc	r25, r25
     348:	91 95       	neg	r25
     34a:	28 27       	eor	r18, r24
     34c:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:817
  y ^= y << 15;
     34e:	c9 01       	movw	r24, r18
     350:	99 27       	eor	r25, r25
     352:	86 95       	lsr	r24
     354:	97 95       	ror	r25
     356:	88 27       	eor	r24, r24
     358:	82 27       	eor	r24, r18
     35a:	93 27       	eor	r25, r19
     35c:	80 93 76 34 	sts	0x3476, r24	; 0x803476 <rng59(unsigned int)::y>
     360:	90 93 77 34 	sts	0x3477, r25	; 0x803477 <rng59(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:819
  return (y);
}
     364:	08 95       	ret

00000366 <rng59()>:
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:821
uint16_t rng59() {
  return rng59(0);
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	d8 cf       	rjmp	.-80     	; 0x31c <rng59(unsigned int)>

0000036c <rng58(unsigned int)>:
rng58():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:801
}

// a=2 b=5 c=15 
uint16_t rng58(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     36c:	00 97       	sbiw	r24, 0x00	; 0
     36e:	21 f0       	breq	.+8      	; 0x378 <rng58(unsigned int)+0xc>
     370:	80 93 74 34 	sts	0x3474, r24	; 0x803474 <rng58(unsigned int)::y>
     374:	90 93 75 34 	sts	0x3475, r25	; 0x803475 <rng58(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:802
  y ^= y << 2;
     378:	80 91 74 34 	lds	r24, 0x3474	; 0x803474 <rng58(unsigned int)::y>
     37c:	90 91 75 34 	lds	r25, 0x3475	; 0x803475 <rng58(unsigned int)::y+0x1>
     380:	9c 01       	movw	r18, r24
     382:	22 0f       	add	r18, r18
     384:	33 1f       	adc	r19, r19
     386:	22 0f       	add	r18, r18
     388:	33 1f       	adc	r19, r19
     38a:	28 27       	eor	r18, r24
     38c:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:803
  y ^= y >> 5;
     38e:	c9 01       	movw	r24, r18
     390:	55 e0       	ldi	r21, 0x05	; 5
     392:	96 95       	lsr	r25
     394:	87 95       	ror	r24
     396:	5a 95       	dec	r21
     398:	e1 f7       	brne	.-8      	; 0x392 <rng58(unsigned int)+0x26>
     39a:	28 27       	eor	r18, r24
     39c:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:804
  y ^= y << 15;
     39e:	c9 01       	movw	r24, r18
     3a0:	99 27       	eor	r25, r25
     3a2:	86 95       	lsr	r24
     3a4:	97 95       	ror	r25
     3a6:	88 27       	eor	r24, r24
     3a8:	82 27       	eor	r24, r18
     3aa:	93 27       	eor	r25, r19
     3ac:	80 93 74 34 	sts	0x3474, r24	; 0x803474 <rng58(unsigned int)::y>
     3b0:	90 93 75 34 	sts	0x3475, r25	; 0x803475 <rng58(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:808
  return (y);
}
uint16_t rng58() {
  return rng58(0);
     3b4:	08 95       	ret

000003b6 <rng58()>:
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	d8 cf       	rjmp	.-80     	; 0x36c <rng58(unsigned int)>

000003bc <rng57(unsigned int)>:
rng57():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:788
}

// a=3 b=1 c=15 
uint16_t rng57(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     3bc:	00 97       	sbiw	r24, 0x00	; 0
     3be:	21 f0       	breq	.+8      	; 0x3c8 <rng57(unsigned int)+0xc>
     3c0:	80 93 72 34 	sts	0x3472, r24	; 0x803472 <rng57(unsigned int)::y>
     3c4:	90 93 73 34 	sts	0x3473, r25	; 0x803473 <rng57(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:789
  y ^= y << 3;
     3c8:	80 91 72 34 	lds	r24, 0x3472	; 0x803472 <rng57(unsigned int)::y>
     3cc:	90 91 73 34 	lds	r25, 0x3473	; 0x803473 <rng57(unsigned int)::y+0x1>
     3d0:	9c 01       	movw	r18, r24
     3d2:	43 e0       	ldi	r20, 0x03	; 3
     3d4:	22 0f       	add	r18, r18
     3d6:	33 1f       	adc	r19, r19
     3d8:	4a 95       	dec	r20
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <rng57(unsigned int)+0x18>
     3dc:	28 27       	eor	r18, r24
     3de:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:790
  y ^= y >> 1;
     3e0:	c9 01       	movw	r24, r18
     3e2:	96 95       	lsr	r25
     3e4:	87 95       	ror	r24
     3e6:	28 27       	eor	r18, r24
     3e8:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:791
  y ^= y << 15;
     3ea:	c9 01       	movw	r24, r18
     3ec:	99 27       	eor	r25, r25
     3ee:	86 95       	lsr	r24
     3f0:	97 95       	ror	r25
     3f2:	88 27       	eor	r24, r24
     3f4:	82 27       	eor	r24, r18
     3f6:	93 27       	eor	r25, r19
     3f8:	80 93 72 34 	sts	0x3472, r24	; 0x803472 <rng57(unsigned int)::y>
     3fc:	90 93 73 34 	sts	0x3473, r25	; 0x803473 <rng57(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:795
  return (y);
}
uint16_t rng57() {
  return rng57(0);
     400:	08 95       	ret

00000402 <rng57()>:
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	da cf       	rjmp	.-76     	; 0x3bc <rng57(unsigned int)>

00000408 <rng56(unsigned int)>:
rng56():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:775
}

// a=1 b=1 c=15 
uint16_t rng56(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     408:	00 97       	sbiw	r24, 0x00	; 0
     40a:	21 f0       	breq	.+8      	; 0x414 <rng56(unsigned int)+0xc>
     40c:	80 93 70 34 	sts	0x3470, r24	; 0x803470 <rng56(unsigned int)::y>
     410:	90 93 71 34 	sts	0x3471, r25	; 0x803471 <rng56(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:776
  y ^= y << 1;
     414:	80 91 70 34 	lds	r24, 0x3470	; 0x803470 <rng56(unsigned int)::y>
     418:	90 91 71 34 	lds	r25, 0x3471	; 0x803471 <rng56(unsigned int)::y+0x1>
     41c:	9c 01       	movw	r18, r24
     41e:	22 0f       	add	r18, r18
     420:	33 1f       	adc	r19, r19
     422:	28 27       	eor	r18, r24
     424:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:777
  y ^= y >> 1;
     426:	c9 01       	movw	r24, r18
     428:	96 95       	lsr	r25
     42a:	87 95       	ror	r24
     42c:	28 27       	eor	r18, r24
     42e:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:778
  y ^= y << 15;
     430:	c9 01       	movw	r24, r18
     432:	99 27       	eor	r25, r25
     434:	86 95       	lsr	r24
     436:	97 95       	ror	r25
     438:	88 27       	eor	r24, r24
     43a:	82 27       	eor	r24, r18
     43c:	93 27       	eor	r25, r19
     43e:	80 93 70 34 	sts	0x3470, r24	; 0x803470 <rng56(unsigned int)::y>
     442:	90 93 71 34 	sts	0x3471, r25	; 0x803471 <rng56(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:782
  return (y);
}
uint16_t rng56() {
  return rng56(0);
     446:	08 95       	ret

00000448 <rng56()>:
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	dd cf       	rjmp	.-70     	; 0x408 <rng56(unsigned int)>

0000044e <rng55(unsigned int)>:
rng55():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:762
}

// a=5 b=7 c=14 
uint16_t rng55(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     44e:	00 97       	sbiw	r24, 0x00	; 0
     450:	21 f0       	breq	.+8      	; 0x45a <rng55(unsigned int)+0xc>
     452:	80 93 6e 34 	sts	0x346E, r24	; 0x80346e <rng55(unsigned int)::y>
     456:	90 93 6f 34 	sts	0x346F, r25	; 0x80346f <rng55(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:763
  y ^= y << 5;
     45a:	80 91 6e 34 	lds	r24, 0x346E	; 0x80346e <rng55(unsigned int)::y>
     45e:	90 91 6f 34 	lds	r25, 0x346F	; 0x80346f <rng55(unsigned int)::y+0x1>
     462:	9c 01       	movw	r18, r24
     464:	45 e0       	ldi	r20, 0x05	; 5
     466:	22 0f       	add	r18, r18
     468:	33 1f       	adc	r19, r19
     46a:	4a 95       	dec	r20
     46c:	e1 f7       	brne	.-8      	; 0x466 <rng55(unsigned int)+0x18>
     46e:	28 27       	eor	r18, r24
     470:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:764
  y ^= y >> 7;
     472:	c9 01       	movw	r24, r18
     474:	88 0f       	add	r24, r24
     476:	89 2f       	mov	r24, r25
     478:	88 1f       	adc	r24, r24
     47a:	99 0b       	sbc	r25, r25
     47c:	91 95       	neg	r25
     47e:	28 27       	eor	r18, r24
     480:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:765
  y ^= y << 14;
     482:	c9 01       	movw	r24, r18
     484:	90 e4       	ldi	r25, 0x40	; 64
     486:	89 9f       	mul	r24, r25
     488:	90 2d       	mov	r25, r0
     48a:	88 27       	eor	r24, r24
     48c:	11 24       	eor	r1, r1
     48e:	82 27       	eor	r24, r18
     490:	93 27       	eor	r25, r19
     492:	80 93 6e 34 	sts	0x346E, r24	; 0x80346e <rng55(unsigned int)::y>
     496:	90 93 6f 34 	sts	0x346F, r25	; 0x80346f <rng55(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:769
  return (y);
}
uint16_t rng55() {
  return rng55(0);
     49a:	08 95       	ret

0000049c <rng55()>:
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	d6 cf       	rjmp	.-84     	; 0x44e <rng55(unsigned int)>

000004a2 <rng54(unsigned int)>:
rng54():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:749
}

// a=1 b=1 c=14 
uint16_t rng54(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	21 f0       	breq	.+8      	; 0x4ae <rng54(unsigned int)+0xc>
     4a6:	80 93 6c 34 	sts	0x346C, r24	; 0x80346c <rng54(unsigned int)::y>
     4aa:	90 93 6d 34 	sts	0x346D, r25	; 0x80346d <rng54(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:750
  y ^= y << 1;
     4ae:	80 91 6c 34 	lds	r24, 0x346C	; 0x80346c <rng54(unsigned int)::y>
     4b2:	90 91 6d 34 	lds	r25, 0x346D	; 0x80346d <rng54(unsigned int)::y+0x1>
     4b6:	9c 01       	movw	r18, r24
     4b8:	22 0f       	add	r18, r18
     4ba:	33 1f       	adc	r19, r19
     4bc:	28 27       	eor	r18, r24
     4be:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:751
  y ^= y >> 1;
     4c0:	c9 01       	movw	r24, r18
     4c2:	96 95       	lsr	r25
     4c4:	87 95       	ror	r24
     4c6:	28 27       	eor	r18, r24
     4c8:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:752
  y ^= y << 14;
     4ca:	c9 01       	movw	r24, r18
     4cc:	90 e4       	ldi	r25, 0x40	; 64
     4ce:	89 9f       	mul	r24, r25
     4d0:	90 2d       	mov	r25, r0
     4d2:	88 27       	eor	r24, r24
     4d4:	11 24       	eor	r1, r1
     4d6:	82 27       	eor	r24, r18
     4d8:	93 27       	eor	r25, r19
     4da:	80 93 6c 34 	sts	0x346C, r24	; 0x80346c <rng54(unsigned int)::y>
     4de:	90 93 6d 34 	sts	0x346D, r25	; 0x80346d <rng54(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:756
  return (y);
}
uint16_t rng54() {
  return rng54(0);
     4e2:	08 95       	ret

000004e4 <rng54()>:
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	dc cf       	rjmp	.-72     	; 0x4a2 <rng54(unsigned int)>

000004ea <rng53(unsigned int)>:
rng53():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:736
}

// a=7 b=9 c=13 
uint16_t rng53(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     4ea:	00 97       	sbiw	r24, 0x00	; 0
     4ec:	21 f0       	breq	.+8      	; 0x4f6 <rng53(unsigned int)+0xc>
     4ee:	80 93 6a 34 	sts	0x346A, r24	; 0x80346a <rng53(unsigned int)::y>
     4f2:	90 93 6b 34 	sts	0x346B, r25	; 0x80346b <rng53(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:737
  y ^= y << 7;
     4f6:	80 91 6a 34 	lds	r24, 0x346A	; 0x80346a <rng53(unsigned int)::y>
     4fa:	90 91 6b 34 	lds	r25, 0x346B	; 0x80346b <rng53(unsigned int)::y+0x1>
     4fe:	9c 01       	movw	r18, r24
     500:	36 95       	lsr	r19
     502:	32 2f       	mov	r19, r18
     504:	22 27       	eor	r18, r18
     506:	37 95       	ror	r19
     508:	27 95       	ror	r18
     50a:	28 27       	eor	r18, r24
     50c:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:738
  y ^= y >> 9;
     50e:	c9 01       	movw	r24, r18
     510:	89 2f       	mov	r24, r25
     512:	99 27       	eor	r25, r25
     514:	86 95       	lsr	r24
     516:	28 27       	eor	r18, r24
     518:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:739
  y ^= y << 13;
     51a:	c9 01       	movw	r24, r18
     51c:	98 2f       	mov	r25, r24
     51e:	88 27       	eor	r24, r24
     520:	92 95       	swap	r25
     522:	99 0f       	add	r25, r25
     524:	90 7e       	andi	r25, 0xE0	; 224
     526:	82 27       	eor	r24, r18
     528:	93 27       	eor	r25, r19
     52a:	80 93 6a 34 	sts	0x346A, r24	; 0x80346a <rng53(unsigned int)::y>
     52e:	90 93 6b 34 	sts	0x346B, r25	; 0x80346b <rng53(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:743
  return (y);
}
uint16_t rng53() {
  return rng53(0);
     532:	08 95       	ret

00000534 <rng53()>:
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	d8 cf       	rjmp	.-80     	; 0x4ea <rng53(unsigned int)>

0000053a <rng52(unsigned int)>:
rng52():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:723
}

// a=9 b=7 c=13 
uint16_t rng52(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     53a:	00 97       	sbiw	r24, 0x00	; 0
     53c:	21 f0       	breq	.+8      	; 0x546 <rng52(unsigned int)+0xc>
     53e:	80 93 68 34 	sts	0x3468, r24	; 0x803468 <rng52(unsigned int)::y>
     542:	90 93 69 34 	sts	0x3469, r25	; 0x803469 <rng52(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:724
  y ^= y << 9;
     546:	80 91 68 34 	lds	r24, 0x3468	; 0x803468 <rng52(unsigned int)::y>
     54a:	90 91 69 34 	lds	r25, 0x3469	; 0x803469 <rng52(unsigned int)::y+0x1>
     54e:	9c 01       	movw	r18, r24
     550:	32 2f       	mov	r19, r18
     552:	22 27       	eor	r18, r18
     554:	33 0f       	add	r19, r19
     556:	28 27       	eor	r18, r24
     558:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:725
  y ^= y >> 7;
     55a:	c9 01       	movw	r24, r18
     55c:	88 0f       	add	r24, r24
     55e:	89 2f       	mov	r24, r25
     560:	88 1f       	adc	r24, r24
     562:	99 0b       	sbc	r25, r25
     564:	91 95       	neg	r25
     566:	28 27       	eor	r18, r24
     568:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:726
  y ^= y << 13;
     56a:	c9 01       	movw	r24, r18
     56c:	98 2f       	mov	r25, r24
     56e:	88 27       	eor	r24, r24
     570:	92 95       	swap	r25
     572:	99 0f       	add	r25, r25
     574:	90 7e       	andi	r25, 0xE0	; 224
     576:	82 27       	eor	r24, r18
     578:	93 27       	eor	r25, r19
     57a:	80 93 68 34 	sts	0x3468, r24	; 0x803468 <rng52(unsigned int)::y>
     57e:	90 93 69 34 	sts	0x3469, r25	; 0x803469 <rng52(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:730
  return (y);
}
uint16_t rng52() {
  return rng52(0);
     582:	08 95       	ret

00000584 <rng52()>:
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	d8 cf       	rjmp	.-80     	; 0x53a <rng52(unsigned int)>

0000058a <rng51(unsigned int)>:
rng51():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:710
}

// a=6 b=7 c=13 
uint16_t rng51(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     58a:	00 97       	sbiw	r24, 0x00	; 0
     58c:	21 f0       	breq	.+8      	; 0x596 <rng51(unsigned int)+0xc>
     58e:	80 93 66 34 	sts	0x3466, r24	; 0x803466 <rng51(unsigned int)::y>
     592:	90 93 67 34 	sts	0x3467, r25	; 0x803467 <rng51(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:711
  y ^= y << 6;
     596:	80 91 66 34 	lds	r24, 0x3466	; 0x803466 <rng51(unsigned int)::y>
     59a:	90 91 67 34 	lds	r25, 0x3467	; 0x803467 <rng51(unsigned int)::y+0x1>
     59e:	9c 01       	movw	r18, r24
     5a0:	46 e0       	ldi	r20, 0x06	; 6
     5a2:	22 0f       	add	r18, r18
     5a4:	33 1f       	adc	r19, r19
     5a6:	4a 95       	dec	r20
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <rng51(unsigned int)+0x18>
     5aa:	28 27       	eor	r18, r24
     5ac:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:712
  y ^= y >> 7;
     5ae:	c9 01       	movw	r24, r18
     5b0:	88 0f       	add	r24, r24
     5b2:	89 2f       	mov	r24, r25
     5b4:	88 1f       	adc	r24, r24
     5b6:	99 0b       	sbc	r25, r25
     5b8:	91 95       	neg	r25
     5ba:	28 27       	eor	r18, r24
     5bc:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:713
  y ^= y << 13;
     5be:	c9 01       	movw	r24, r18
     5c0:	98 2f       	mov	r25, r24
     5c2:	88 27       	eor	r24, r24
     5c4:	92 95       	swap	r25
     5c6:	99 0f       	add	r25, r25
     5c8:	90 7e       	andi	r25, 0xE0	; 224
     5ca:	82 27       	eor	r24, r18
     5cc:	93 27       	eor	r25, r19
     5ce:	80 93 66 34 	sts	0x3466, r24	; 0x803466 <rng51(unsigned int)::y>
     5d2:	90 93 67 34 	sts	0x3467, r25	; 0x803467 <rng51(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:717
  return (y);
}
uint16_t rng51() {
  return rng51(0);
     5d6:	08 95       	ret

000005d8 <rng51()>:
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	d6 cf       	rjmp	.-84     	; 0x58a <rng51(unsigned int)>

000005de <rng50(unsigned int)>:
rng50():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:697
}

// a=2 b=7 c=13 
uint16_t rng50(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     5de:	00 97       	sbiw	r24, 0x00	; 0
     5e0:	21 f0       	breq	.+8      	; 0x5ea <rng50(unsigned int)+0xc>
     5e2:	80 93 64 34 	sts	0x3464, r24	; 0x803464 <rng50(unsigned int)::y>
     5e6:	90 93 65 34 	sts	0x3465, r25	; 0x803465 <rng50(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:698
  y ^= y << 2;
     5ea:	80 91 64 34 	lds	r24, 0x3464	; 0x803464 <rng50(unsigned int)::y>
     5ee:	90 91 65 34 	lds	r25, 0x3465	; 0x803465 <rng50(unsigned int)::y+0x1>
     5f2:	9c 01       	movw	r18, r24
     5f4:	22 0f       	add	r18, r18
     5f6:	33 1f       	adc	r19, r19
     5f8:	22 0f       	add	r18, r18
     5fa:	33 1f       	adc	r19, r19
     5fc:	28 27       	eor	r18, r24
     5fe:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:699
  y ^= y >> 7;
     600:	c9 01       	movw	r24, r18
     602:	88 0f       	add	r24, r24
     604:	89 2f       	mov	r24, r25
     606:	88 1f       	adc	r24, r24
     608:	99 0b       	sbc	r25, r25
     60a:	91 95       	neg	r25
     60c:	28 27       	eor	r18, r24
     60e:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:700
  y ^= y << 13;
     610:	c9 01       	movw	r24, r18
     612:	98 2f       	mov	r25, r24
     614:	88 27       	eor	r24, r24
     616:	92 95       	swap	r25
     618:	99 0f       	add	r25, r25
     61a:	90 7e       	andi	r25, 0xE0	; 224
     61c:	82 27       	eor	r24, r18
     61e:	93 27       	eor	r25, r19
     620:	80 93 64 34 	sts	0x3464, r24	; 0x803464 <rng50(unsigned int)::y>
     624:	90 93 65 34 	sts	0x3465, r25	; 0x803465 <rng50(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:704
  return (y);
}
uint16_t rng50() {
  return rng50(0);
     628:	08 95       	ret

0000062a <rng50()>:
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	d7 cf       	rjmp	.-82     	; 0x5de <rng50(unsigned int)>

00000630 <rng49(unsigned int)>:
rng49():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:684
}

// a=2 b=5 c=13 
uint16_t rng49(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     630:	00 97       	sbiw	r24, 0x00	; 0
     632:	21 f0       	breq	.+8      	; 0x63c <rng49(unsigned int)+0xc>
     634:	80 93 62 34 	sts	0x3462, r24	; 0x803462 <rng49(unsigned int)::y>
     638:	90 93 63 34 	sts	0x3463, r25	; 0x803463 <rng49(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:685
  y ^= y << 2;
     63c:	80 91 62 34 	lds	r24, 0x3462	; 0x803462 <rng49(unsigned int)::y>
     640:	90 91 63 34 	lds	r25, 0x3463	; 0x803463 <rng49(unsigned int)::y+0x1>
     644:	9c 01       	movw	r18, r24
     646:	22 0f       	add	r18, r18
     648:	33 1f       	adc	r19, r19
     64a:	22 0f       	add	r18, r18
     64c:	33 1f       	adc	r19, r19
     64e:	28 27       	eor	r18, r24
     650:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:686
  y ^= y >> 5;
     652:	c9 01       	movw	r24, r18
     654:	55 e0       	ldi	r21, 0x05	; 5
     656:	96 95       	lsr	r25
     658:	87 95       	ror	r24
     65a:	5a 95       	dec	r21
     65c:	e1 f7       	brne	.-8      	; 0x656 <rng49(unsigned int)+0x26>
     65e:	28 27       	eor	r18, r24
     660:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:687
  y ^= y << 13;
     662:	c9 01       	movw	r24, r18
     664:	98 2f       	mov	r25, r24
     666:	88 27       	eor	r24, r24
     668:	92 95       	swap	r25
     66a:	99 0f       	add	r25, r25
     66c:	90 7e       	andi	r25, 0xE0	; 224
     66e:	82 27       	eor	r24, r18
     670:	93 27       	eor	r25, r19
     672:	80 93 62 34 	sts	0x3462, r24	; 0x803462 <rng49(unsigned int)::y>
     676:	90 93 63 34 	sts	0x3463, r25	; 0x803463 <rng49(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:691
  return (y);
}
uint16_t rng49() {
  return rng49(0);
     67a:	08 95       	ret

0000067c <rng49()>:
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	d7 cf       	rjmp	.-82     	; 0x630 <rng49(unsigned int)>

00000682 <rng48(unsigned int)>:
rng48():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:671
}

// a=12 b=3 c=13 
uint16_t rng48(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     682:	00 97       	sbiw	r24, 0x00	; 0
     684:	21 f0       	breq	.+8      	; 0x68e <rng48(unsigned int)+0xc>
     686:	80 93 60 34 	sts	0x3460, r24	; 0x803460 <rng48(unsigned int)::y>
     68a:	90 93 61 34 	sts	0x3461, r25	; 0x803461 <rng48(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:672
  y ^= y << 12;
     68e:	80 91 60 34 	lds	r24, 0x3460	; 0x803460 <rng48(unsigned int)::y>
     692:	90 91 61 34 	lds	r25, 0x3461	; 0x803461 <rng48(unsigned int)::y+0x1>
     696:	9c 01       	movw	r18, r24
     698:	32 2f       	mov	r19, r18
     69a:	22 27       	eor	r18, r18
     69c:	32 95       	swap	r19
     69e:	30 7f       	andi	r19, 0xF0	; 240
     6a0:	28 27       	eor	r18, r24
     6a2:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:673
  y ^= y >> 3;
     6a4:	c9 01       	movw	r24, r18
     6a6:	53 e0       	ldi	r21, 0x03	; 3
     6a8:	96 95       	lsr	r25
     6aa:	87 95       	ror	r24
     6ac:	5a 95       	dec	r21
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <rng48(unsigned int)+0x26>
     6b0:	28 27       	eor	r18, r24
     6b2:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:674
  y ^= y << 13;
     6b4:	c9 01       	movw	r24, r18
     6b6:	98 2f       	mov	r25, r24
     6b8:	88 27       	eor	r24, r24
     6ba:	92 95       	swap	r25
     6bc:	99 0f       	add	r25, r25
     6be:	90 7e       	andi	r25, 0xE0	; 224
     6c0:	82 27       	eor	r24, r18
     6c2:	93 27       	eor	r25, r19
     6c4:	80 93 60 34 	sts	0x3460, r24	; 0x803460 <rng48(unsigned int)::y>
     6c8:	90 93 61 34 	sts	0x3461, r25	; 0x803461 <rng48(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:678
  return (y);
}
uint16_t rng48() {
  return rng48(0);
     6cc:	08 95       	ret

000006ce <rng48()>:
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	d7 cf       	rjmp	.-82     	; 0x682 <rng48(unsigned int)>

000006d4 <rng47(unsigned int)>:
rng47():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:658
}

// a=11 b=3 c=13 
uint16_t rng47(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     6d4:	00 97       	sbiw	r24, 0x00	; 0
     6d6:	21 f0       	breq	.+8      	; 0x6e0 <rng47(unsigned int)+0xc>
     6d8:	80 93 5e 34 	sts	0x345E, r24	; 0x80345e <rng47(unsigned int)::y>
     6dc:	90 93 5f 34 	sts	0x345F, r25	; 0x80345f <rng47(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:659
  y ^= y << 11;
     6e0:	80 91 5e 34 	lds	r24, 0x345E	; 0x80345e <rng47(unsigned int)::y>
     6e4:	90 91 5f 34 	lds	r25, 0x345F	; 0x80345f <rng47(unsigned int)::y+0x1>
     6e8:	9c 01       	movw	r18, r24
     6ea:	32 2f       	mov	r19, r18
     6ec:	22 27       	eor	r18, r18
     6ee:	33 0f       	add	r19, r19
     6f0:	33 0f       	add	r19, r19
     6f2:	33 0f       	add	r19, r19
     6f4:	28 27       	eor	r18, r24
     6f6:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:660
  y ^= y >> 3;
     6f8:	c9 01       	movw	r24, r18
     6fa:	53 e0       	ldi	r21, 0x03	; 3
     6fc:	96 95       	lsr	r25
     6fe:	87 95       	ror	r24
     700:	5a 95       	dec	r21
     702:	e1 f7       	brne	.-8      	; 0x6fc <rng47(unsigned int)+0x28>
     704:	28 27       	eor	r18, r24
     706:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:661
  y ^= y << 13;
     708:	c9 01       	movw	r24, r18
     70a:	98 2f       	mov	r25, r24
     70c:	88 27       	eor	r24, r24
     70e:	92 95       	swap	r25
     710:	99 0f       	add	r25, r25
     712:	90 7e       	andi	r25, 0xE0	; 224
     714:	82 27       	eor	r24, r18
     716:	93 27       	eor	r25, r19
     718:	80 93 5e 34 	sts	0x345E, r24	; 0x80345e <rng47(unsigned int)::y>
     71c:	90 93 5f 34 	sts	0x345F, r25	; 0x80345f <rng47(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:665
  return (y);
}
uint16_t rng47() {
  return rng47(0);
     720:	08 95       	ret

00000722 <rng47()>:
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	d6 cf       	rjmp	.-84     	; 0x6d4 <rng47(unsigned int)>

00000728 <rng46(unsigned int)>:
rng46():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:645
}

// a=13 b=3 c=12 
uint16_t rng46(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	21 f0       	breq	.+8      	; 0x734 <rng46(unsigned int)+0xc>
     72c:	80 93 5c 34 	sts	0x345C, r24	; 0x80345c <rng46(unsigned int)::y>
     730:	90 93 5d 34 	sts	0x345D, r25	; 0x80345d <rng46(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:646
  y ^= y << 13;
     734:	80 91 5c 34 	lds	r24, 0x345C	; 0x80345c <rng46(unsigned int)::y>
     738:	90 91 5d 34 	lds	r25, 0x345D	; 0x80345d <rng46(unsigned int)::y+0x1>
     73c:	9c 01       	movw	r18, r24
     73e:	32 2f       	mov	r19, r18
     740:	22 27       	eor	r18, r18
     742:	32 95       	swap	r19
     744:	33 0f       	add	r19, r19
     746:	30 7e       	andi	r19, 0xE0	; 224
     748:	28 27       	eor	r18, r24
     74a:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:647
  y ^= y >> 3;
     74c:	c9 01       	movw	r24, r18
     74e:	53 e0       	ldi	r21, 0x03	; 3
     750:	96 95       	lsr	r25
     752:	87 95       	ror	r24
     754:	5a 95       	dec	r21
     756:	e1 f7       	brne	.-8      	; 0x750 <rng46(unsigned int)+0x28>
     758:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:648
  y ^= y << 12;
     75a:	39 27       	eor	r19, r25
     75c:	c9 01       	movw	r24, r18
     75e:	98 2f       	mov	r25, r24
     760:	88 27       	eor	r24, r24
     762:	92 95       	swap	r25
     764:	90 7f       	andi	r25, 0xF0	; 240
     766:	82 27       	eor	r24, r18
     768:	93 27       	eor	r25, r19
     76a:	80 93 5c 34 	sts	0x345C, r24	; 0x80345c <rng46(unsigned int)::y>
     76e:	90 93 5d 34 	sts	0x345D, r25	; 0x80345d <rng46(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:652
  return (y);
}
uint16_t rng46() {
  return rng46(0);
     772:	08 95       	ret

00000774 <rng46()>:
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	d7 cf       	rjmp	.-82     	; 0x728 <rng46(unsigned int)>

0000077a <rng45(unsigned int)>:
rng45():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:632
}

// a=3 b=1 c=12 
uint16_t rng45(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     77a:	00 97       	sbiw	r24, 0x00	; 0
     77c:	21 f0       	breq	.+8      	; 0x786 <rng45(unsigned int)+0xc>
     77e:	80 93 5a 34 	sts	0x345A, r24	; 0x80345a <rng45(unsigned int)::y>
     782:	90 93 5b 34 	sts	0x345B, r25	; 0x80345b <rng45(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:633
  y ^= y << 3;
     786:	80 91 5a 34 	lds	r24, 0x345A	; 0x80345a <rng45(unsigned int)::y>
     78a:	90 91 5b 34 	lds	r25, 0x345B	; 0x80345b <rng45(unsigned int)::y+0x1>
     78e:	9c 01       	movw	r18, r24
     790:	43 e0       	ldi	r20, 0x03	; 3
     792:	22 0f       	add	r18, r18
     794:	33 1f       	adc	r19, r19
     796:	4a 95       	dec	r20
     798:	e1 f7       	brne	.-8      	; 0x792 <rng45(unsigned int)+0x18>
     79a:	28 27       	eor	r18, r24
     79c:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:634
  y ^= y >> 1;
     79e:	c9 01       	movw	r24, r18
     7a0:	96 95       	lsr	r25
     7a2:	87 95       	ror	r24
     7a4:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:635
  y ^= y << 12;
     7a6:	39 27       	eor	r19, r25
     7a8:	c9 01       	movw	r24, r18
     7aa:	98 2f       	mov	r25, r24
     7ac:	88 27       	eor	r24, r24
     7ae:	92 95       	swap	r25
     7b0:	90 7f       	andi	r25, 0xF0	; 240
     7b2:	82 27       	eor	r24, r18
     7b4:	93 27       	eor	r25, r19
     7b6:	80 93 5a 34 	sts	0x345A, r24	; 0x80345a <rng45(unsigned int)::y>
     7ba:	90 93 5b 34 	sts	0x345B, r25	; 0x80345b <rng45(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:639
  return (y);
}
uint16_t rng45() {
  return rng45(0);
     7be:	08 95       	ret

000007c0 <rng45()>:
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	da cf       	rjmp	.-76     	; 0x77a <rng45(unsigned int)>

000007c6 <rng44(unsigned int)>:
rng44():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:619
}

// a=5 b=11 c=11 
uint16_t rng44(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     7c6:	00 97       	sbiw	r24, 0x00	; 0
     7c8:	21 f0       	breq	.+8      	; 0x7d2 <rng44(unsigned int)+0xc>
     7ca:	80 93 58 34 	sts	0x3458, r24	; 0x803458 <rng44(unsigned int)::y>
     7ce:	90 93 59 34 	sts	0x3459, r25	; 0x803459 <rng44(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:620
  y ^= y << 5;
     7d2:	80 91 58 34 	lds	r24, 0x3458	; 0x803458 <rng44(unsigned int)::y>
     7d6:	90 91 59 34 	lds	r25, 0x3459	; 0x803459 <rng44(unsigned int)::y+0x1>
     7da:	9c 01       	movw	r18, r24
     7dc:	45 e0       	ldi	r20, 0x05	; 5
     7de:	22 0f       	add	r18, r18
     7e0:	33 1f       	adc	r19, r19
     7e2:	4a 95       	dec	r20
     7e4:	e1 f7       	brne	.-8      	; 0x7de <rng44(unsigned int)+0x18>
     7e6:	28 27       	eor	r18, r24
     7e8:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:621
  y ^= y >> 11;
     7ea:	c9 01       	movw	r24, r18
     7ec:	89 2f       	mov	r24, r25
     7ee:	99 27       	eor	r25, r25
     7f0:	86 95       	lsr	r24
     7f2:	86 95       	lsr	r24
     7f4:	86 95       	lsr	r24
     7f6:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:622
  y ^= y << 11;
     7f8:	39 27       	eor	r19, r25
     7fa:	c9 01       	movw	r24, r18
     7fc:	98 2f       	mov	r25, r24
     7fe:	88 27       	eor	r24, r24
     800:	99 0f       	add	r25, r25
     802:	99 0f       	add	r25, r25
     804:	99 0f       	add	r25, r25
     806:	82 27       	eor	r24, r18
     808:	93 27       	eor	r25, r19
     80a:	80 93 58 34 	sts	0x3458, r24	; 0x803458 <rng44(unsigned int)::y>
     80e:	90 93 59 34 	sts	0x3459, r25	; 0x803459 <rng44(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:626
  return (y);
}
uint16_t rng44() {
  return rng44(0);
     812:	08 95       	ret

00000814 <rng44()>:
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	d6 cf       	rjmp	.-84     	; 0x7c6 <rng44(unsigned int)>

0000081a <rng43(unsigned int)>:
rng43():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:606
}

// a=4 b=11 c=11 
uint16_t rng43(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     81a:	00 97       	sbiw	r24, 0x00	; 0
     81c:	21 f0       	breq	.+8      	; 0x826 <rng43(unsigned int)+0xc>
     81e:	80 93 56 34 	sts	0x3456, r24	; 0x803456 <rng43(unsigned int)::y>
     822:	90 93 57 34 	sts	0x3457, r25	; 0x803457 <rng43(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:607
  y ^= y << 4;
     826:	80 91 56 34 	lds	r24, 0x3456	; 0x803456 <rng43(unsigned int)::y>
     82a:	90 91 57 34 	lds	r25, 0x3457	; 0x803457 <rng43(unsigned int)::y+0x1>
     82e:	9c 01       	movw	r18, r24
     830:	44 e0       	ldi	r20, 0x04	; 4
     832:	22 0f       	add	r18, r18
     834:	33 1f       	adc	r19, r19
     836:	4a 95       	dec	r20
     838:	e1 f7       	brne	.-8      	; 0x832 <rng43(unsigned int)+0x18>
     83a:	28 27       	eor	r18, r24
     83c:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:608
  y ^= y >> 11;
     83e:	c9 01       	movw	r24, r18
     840:	89 2f       	mov	r24, r25
     842:	99 27       	eor	r25, r25
     844:	86 95       	lsr	r24
     846:	86 95       	lsr	r24
     848:	86 95       	lsr	r24
     84a:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:609
  y ^= y << 11;
     84c:	39 27       	eor	r19, r25
     84e:	c9 01       	movw	r24, r18
     850:	98 2f       	mov	r25, r24
     852:	88 27       	eor	r24, r24
     854:	99 0f       	add	r25, r25
     856:	99 0f       	add	r25, r25
     858:	99 0f       	add	r25, r25
     85a:	82 27       	eor	r24, r18
     85c:	93 27       	eor	r25, r19
     85e:	80 93 56 34 	sts	0x3456, r24	; 0x803456 <rng43(unsigned int)::y>
     862:	90 93 57 34 	sts	0x3457, r25	; 0x803457 <rng43(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:613
  return (y);
}
uint16_t rng43() {
  return rng43(0);
     866:	08 95       	ret

00000868 <rng43()>:
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	d6 cf       	rjmp	.-84     	; 0x81a <rng43(unsigned int)>

0000086e <rng42(unsigned int)>:
rng42():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:593
}

// a=3 b=11 c=11 
uint16_t rng42(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     86e:	00 97       	sbiw	r24, 0x00	; 0
     870:	21 f0       	breq	.+8      	; 0x87a <rng42(unsigned int)+0xc>
     872:	80 93 54 34 	sts	0x3454, r24	; 0x803454 <rng42(unsigned int)::y>
     876:	90 93 55 34 	sts	0x3455, r25	; 0x803455 <rng42(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:594
  y ^= y << 3;
     87a:	80 91 54 34 	lds	r24, 0x3454	; 0x803454 <rng42(unsigned int)::y>
     87e:	90 91 55 34 	lds	r25, 0x3455	; 0x803455 <rng42(unsigned int)::y+0x1>
     882:	9c 01       	movw	r18, r24
     884:	43 e0       	ldi	r20, 0x03	; 3
     886:	22 0f       	add	r18, r18
     888:	33 1f       	adc	r19, r19
     88a:	4a 95       	dec	r20
     88c:	e1 f7       	brne	.-8      	; 0x886 <rng42(unsigned int)+0x18>
     88e:	28 27       	eor	r18, r24
     890:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:595
  y ^= y >> 11;
     892:	c9 01       	movw	r24, r18
     894:	89 2f       	mov	r24, r25
     896:	99 27       	eor	r25, r25
     898:	86 95       	lsr	r24
     89a:	86 95       	lsr	r24
     89c:	86 95       	lsr	r24
     89e:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:596
  y ^= y << 11;
     8a0:	39 27       	eor	r19, r25
     8a2:	c9 01       	movw	r24, r18
     8a4:	98 2f       	mov	r25, r24
     8a6:	88 27       	eor	r24, r24
     8a8:	99 0f       	add	r25, r25
     8aa:	99 0f       	add	r25, r25
     8ac:	99 0f       	add	r25, r25
     8ae:	82 27       	eor	r24, r18
     8b0:	93 27       	eor	r25, r19
     8b2:	80 93 54 34 	sts	0x3454, r24	; 0x803454 <rng42(unsigned int)::y>
     8b6:	90 93 55 34 	sts	0x3455, r25	; 0x803455 <rng42(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:600
  return (y);
}
uint16_t rng42() {
  return rng42(0);
     8ba:	08 95       	ret

000008bc <rng42()>:
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	d6 cf       	rjmp	.-84     	; 0x86e <rng42(unsigned int)>

000008c2 <rng41(unsigned int)>:
rng41():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:580
}

// a=1 b=7 c=11 
uint16_t rng41(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     8c2:	00 97       	sbiw	r24, 0x00	; 0
     8c4:	21 f0       	breq	.+8      	; 0x8ce <rng41(unsigned int)+0xc>
     8c6:	80 93 52 34 	sts	0x3452, r24	; 0x803452 <rng41(unsigned int)::y>
     8ca:	90 93 53 34 	sts	0x3453, r25	; 0x803453 <rng41(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:581
  y ^= y << 1;
     8ce:	80 91 52 34 	lds	r24, 0x3452	; 0x803452 <rng41(unsigned int)::y>
     8d2:	90 91 53 34 	lds	r25, 0x3453	; 0x803453 <rng41(unsigned int)::y+0x1>
     8d6:	9c 01       	movw	r18, r24
     8d8:	22 0f       	add	r18, r18
     8da:	33 1f       	adc	r19, r19
     8dc:	28 27       	eor	r18, r24
     8de:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:582
  y ^= y >> 7;
     8e0:	c9 01       	movw	r24, r18
     8e2:	88 0f       	add	r24, r24
     8e4:	89 2f       	mov	r24, r25
     8e6:	88 1f       	adc	r24, r24
     8e8:	99 0b       	sbc	r25, r25
     8ea:	91 95       	neg	r25
     8ec:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:583
  y ^= y << 11;
     8ee:	39 27       	eor	r19, r25
     8f0:	c9 01       	movw	r24, r18
     8f2:	98 2f       	mov	r25, r24
     8f4:	88 27       	eor	r24, r24
     8f6:	99 0f       	add	r25, r25
     8f8:	99 0f       	add	r25, r25
     8fa:	99 0f       	add	r25, r25
     8fc:	82 27       	eor	r24, r18
     8fe:	93 27       	eor	r25, r19
     900:	80 93 52 34 	sts	0x3452, r24	; 0x803452 <rng41(unsigned int)::y>
     904:	90 93 53 34 	sts	0x3453, r25	; 0x803453 <rng41(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:587
  return (y);
}
uint16_t rng41() {
  return rng41(0);
     908:	08 95       	ret

0000090a <rng41()>:
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	d9 cf       	rjmp	.-78     	; 0x8c2 <rng41(unsigned int)>

00000910 <rng40(unsigned int)>:
rng40():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:567
}

// a=3 b=5 c=11 
uint16_t rng40(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	21 f0       	breq	.+8      	; 0x91c <rng40(unsigned int)+0xc>
     914:	80 93 50 34 	sts	0x3450, r24	; 0x803450 <rng40(unsigned int)::y>
     918:	90 93 51 34 	sts	0x3451, r25	; 0x803451 <rng40(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:568
  y ^= y << 3;
     91c:	80 91 50 34 	lds	r24, 0x3450	; 0x803450 <rng40(unsigned int)::y>
     920:	90 91 51 34 	lds	r25, 0x3451	; 0x803451 <rng40(unsigned int)::y+0x1>
     924:	9c 01       	movw	r18, r24
     926:	43 e0       	ldi	r20, 0x03	; 3
     928:	22 0f       	add	r18, r18
     92a:	33 1f       	adc	r19, r19
     92c:	4a 95       	dec	r20
     92e:	e1 f7       	brne	.-8      	; 0x928 <rng40(unsigned int)+0x18>
     930:	28 27       	eor	r18, r24
     932:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:569
  y ^= y >> 5;
     934:	c9 01       	movw	r24, r18
     936:	55 e0       	ldi	r21, 0x05	; 5
     938:	96 95       	lsr	r25
     93a:	87 95       	ror	r24
     93c:	5a 95       	dec	r21
     93e:	e1 f7       	brne	.-8      	; 0x938 <rng40(unsigned int)+0x28>
     940:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:570
  y ^= y << 11;
     942:	39 27       	eor	r19, r25
     944:	c9 01       	movw	r24, r18
     946:	98 2f       	mov	r25, r24
     948:	88 27       	eor	r24, r24
     94a:	99 0f       	add	r25, r25
     94c:	99 0f       	add	r25, r25
     94e:	99 0f       	add	r25, r25
     950:	82 27       	eor	r24, r18
     952:	93 27       	eor	r25, r19
     954:	80 93 50 34 	sts	0x3450, r24	; 0x803450 <rng40(unsigned int)::y>
     958:	90 93 51 34 	sts	0x3451, r25	; 0x803451 <rng40(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:574
  return (y);
}
uint16_t rng40() {
  return rng40(0);
     95c:	08 95       	ret

0000095e <rng40()>:
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	d6 cf       	rjmp	.-84     	; 0x910 <rng40(unsigned int)>

00000964 <rng39(unsigned int)>:
rng39():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:554
}

// a=13 b=3 c=11 
uint16_t rng39(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     964:	00 97       	sbiw	r24, 0x00	; 0
     966:	21 f0       	breq	.+8      	; 0x970 <rng39(unsigned int)+0xc>
     968:	80 93 4e 34 	sts	0x344E, r24	; 0x80344e <rng39(unsigned int)::y>
     96c:	90 93 4f 34 	sts	0x344F, r25	; 0x80344f <rng39(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:555
  y ^= y << 13;
     970:	80 91 4e 34 	lds	r24, 0x344E	; 0x80344e <rng39(unsigned int)::y>
     974:	90 91 4f 34 	lds	r25, 0x344F	; 0x80344f <rng39(unsigned int)::y+0x1>
     978:	9c 01       	movw	r18, r24
     97a:	32 2f       	mov	r19, r18
     97c:	22 27       	eor	r18, r18
     97e:	32 95       	swap	r19
     980:	33 0f       	add	r19, r19
     982:	30 7e       	andi	r19, 0xE0	; 224
     984:	28 27       	eor	r18, r24
     986:	39 27       	eor	r19, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:556
  y ^= y >> 3;
     988:	c9 01       	movw	r24, r18
     98a:	53 e0       	ldi	r21, 0x03	; 3
     98c:	96 95       	lsr	r25
     98e:	87 95       	ror	r24
     990:	5a 95       	dec	r21
     992:	e1 f7       	brne	.-8      	; 0x98c <rng39(unsigned int)+0x28>
     994:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:557
  y ^= y << 11;
     996:	39 27       	eor	r19, r25
     998:	c9 01       	movw	r24, r18
     99a:	98 2f       	mov	r25, r24
     99c:	88 27       	eor	r24, r24
     99e:	99 0f       	add	r25, r25
     9a0:	99 0f       	add	r25, r25
     9a2:	99 0f       	add	r25, r25
     9a4:	82 27       	eor	r24, r18
     9a6:	93 27       	eor	r25, r19
     9a8:	80 93 4e 34 	sts	0x344E, r24	; 0x80344e <rng39(unsigned int)::y>
     9ac:	90 93 4f 34 	sts	0x344F, r25	; 0x80344f <rng39(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:561
  return (y);
}
uint16_t rng39() {
  return rng39(0);
     9b0:	08 95       	ret

000009b2 <rng39()>:
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	d6 cf       	rjmp	.-84     	; 0x964 <rng39(unsigned int)>

000009b8 <rng38(unsigned int)>:
rng38():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:541
}

// a=7 b=1 c=11 
uint16_t rng38(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     9b8:	00 97       	sbiw	r24, 0x00	; 0
     9ba:	21 f0       	breq	.+8      	; 0x9c4 <rng38(unsigned int)+0xc>
     9bc:	80 93 4c 34 	sts	0x344C, r24	; 0x80344c <rng38(unsigned int)::y>
     9c0:	90 93 4d 34 	sts	0x344D, r25	; 0x80344d <rng38(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:542
  y ^= y << 7;
     9c4:	80 91 4c 34 	lds	r24, 0x344C	; 0x80344c <rng38(unsigned int)::y>
     9c8:	90 91 4d 34 	lds	r25, 0x344D	; 0x80344d <rng38(unsigned int)::y+0x1>
     9cc:	9c 01       	movw	r18, r24
     9ce:	36 95       	lsr	r19
     9d0:	32 2f       	mov	r19, r18
     9d2:	22 27       	eor	r18, r18
     9d4:	37 95       	ror	r19
     9d6:	27 95       	ror	r18
     9d8:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:543
  y ^= y >> 1;
     9da:	39 27       	eor	r19, r25
     9dc:	c9 01       	movw	r24, r18
     9de:	96 95       	lsr	r25
     9e0:	87 95       	ror	r24
     9e2:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:544
  y ^= y << 11;
     9e4:	39 27       	eor	r19, r25
     9e6:	c9 01       	movw	r24, r18
     9e8:	98 2f       	mov	r25, r24
     9ea:	88 27       	eor	r24, r24
     9ec:	99 0f       	add	r25, r25
     9ee:	99 0f       	add	r25, r25
     9f0:	99 0f       	add	r25, r25
     9f2:	82 27       	eor	r24, r18
     9f4:	93 27       	eor	r25, r19
     9f6:	80 93 4c 34 	sts	0x344C, r24	; 0x80344c <rng38(unsigned int)::y>
     9fa:	90 93 4d 34 	sts	0x344D, r25	; 0x80344d <rng38(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:548
  return (y);
}
uint16_t rng38() {
  return rng38(0);
     9fe:	08 95       	ret

00000a00 <rng38()>:
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	d9 cf       	rjmp	.-78     	; 0x9b8 <rng38(unsigned int)>

00000a06 <rng37(unsigned int)>:
rng37():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:528
}

// a=3 b=13 c=9 
uint16_t rng37(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     a06:	00 97       	sbiw	r24, 0x00	; 0
     a08:	21 f0       	breq	.+8      	; 0xa12 <rng37(unsigned int)+0xc>
     a0a:	80 93 4a 34 	sts	0x344A, r24	; 0x80344a <rng37(unsigned int)::y>
     a0e:	90 93 4b 34 	sts	0x344B, r25	; 0x80344b <rng37(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:529
  y ^= y << 3;
     a12:	80 91 4a 34 	lds	r24, 0x344A	; 0x80344a <rng37(unsigned int)::y>
     a16:	90 91 4b 34 	lds	r25, 0x344B	; 0x80344b <rng37(unsigned int)::y+0x1>
     a1a:	9c 01       	movw	r18, r24
     a1c:	43 e0       	ldi	r20, 0x03	; 3
     a1e:	22 0f       	add	r18, r18
     a20:	33 1f       	adc	r19, r19
     a22:	4a 95       	dec	r20
     a24:	e1 f7       	brne	.-8      	; 0xa1e <rng37(unsigned int)+0x18>
     a26:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:530
  y ^= y >> 13;
     a28:	39 27       	eor	r19, r25
     a2a:	c9 01       	movw	r24, r18
     a2c:	89 2f       	mov	r24, r25
     a2e:	99 27       	eor	r25, r25
     a30:	82 95       	swap	r24
     a32:	86 95       	lsr	r24
     a34:	87 70       	andi	r24, 0x07	; 7
     a36:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:531
  y ^= y << 9;
     a38:	39 27       	eor	r19, r25
     a3a:	c9 01       	movw	r24, r18
     a3c:	98 2f       	mov	r25, r24
     a3e:	88 27       	eor	r24, r24
     a40:	99 0f       	add	r25, r25
     a42:	82 27       	eor	r24, r18
     a44:	93 27       	eor	r25, r19
     a46:	80 93 4a 34 	sts	0x344A, r24	; 0x80344a <rng37(unsigned int)::y>
     a4a:	90 93 4b 34 	sts	0x344B, r25	; 0x80344b <rng37(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:535
  return (y);
}
uint16_t rng37() {
  return rng37(0);
     a4e:	08 95       	ret

00000a50 <rng37()>:
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	d8 cf       	rjmp	.-80     	; 0xa06 <rng37(unsigned int)>

00000a56 <rng36(unsigned int)>:
rng36():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:515
}

// a=13 b=7 c=9 
uint16_t rng36(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     a56:	00 97       	sbiw	r24, 0x00	; 0
     a58:	21 f0       	breq	.+8      	; 0xa62 <rng36(unsigned int)+0xc>
     a5a:	80 93 48 34 	sts	0x3448, r24	; 0x803448 <rng36(unsigned int)::y>
     a5e:	90 93 49 34 	sts	0x3449, r25	; 0x803449 <rng36(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:516
  y ^= y << 13;
     a62:	80 91 48 34 	lds	r24, 0x3448	; 0x803448 <rng36(unsigned int)::y>
     a66:	90 91 49 34 	lds	r25, 0x3449	; 0x803449 <rng36(unsigned int)::y+0x1>
     a6a:	9c 01       	movw	r18, r24
     a6c:	32 2f       	mov	r19, r18
     a6e:	22 27       	eor	r18, r18
     a70:	32 95       	swap	r19
     a72:	33 0f       	add	r19, r19
     a74:	30 7e       	andi	r19, 0xE0	; 224
     a76:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:517
  y ^= y >> 7;
     a78:	39 27       	eor	r19, r25
     a7a:	c9 01       	movw	r24, r18
     a7c:	88 0f       	add	r24, r24
     a7e:	89 2f       	mov	r24, r25
     a80:	88 1f       	adc	r24, r24
     a82:	99 0b       	sbc	r25, r25
     a84:	91 95       	neg	r25
     a86:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:518
  y ^= y << 9;
     a88:	39 27       	eor	r19, r25
     a8a:	c9 01       	movw	r24, r18
     a8c:	98 2f       	mov	r25, r24
     a8e:	88 27       	eor	r24, r24
     a90:	99 0f       	add	r25, r25
     a92:	82 27       	eor	r24, r18
     a94:	93 27       	eor	r25, r19
     a96:	80 93 48 34 	sts	0x3448, r24	; 0x803448 <rng36(unsigned int)::y>
     a9a:	90 93 49 34 	sts	0x3449, r25	; 0x803449 <rng36(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:522
  return (y);
}
uint16_t rng36() {
  return rng36(0);
     a9e:	08 95       	ret

00000aa0 <rng36()>:
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	d8 cf       	rjmp	.-80     	; 0xa56 <rng36(unsigned int)>

00000aa6 <rng35(unsigned int)>:
rng35():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:502
}

// a=7 b=9 c=8 
uint16_t rng35(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     aa6:	00 97       	sbiw	r24, 0x00	; 0
     aa8:	21 f0       	breq	.+8      	; 0xab2 <rng35(unsigned int)+0xc>
     aaa:	80 93 46 34 	sts	0x3446, r24	; 0x803446 <rng35(unsigned int)::y>
     aae:	90 93 47 34 	sts	0x3447, r25	; 0x803447 <rng35(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:503
  y ^= y << 7;
     ab2:	80 91 46 34 	lds	r24, 0x3446	; 0x803446 <rng35(unsigned int)::y>
     ab6:	90 91 47 34 	lds	r25, 0x3447	; 0x803447 <rng35(unsigned int)::y+0x1>
     aba:	9c 01       	movw	r18, r24
     abc:	36 95       	lsr	r19
     abe:	32 2f       	mov	r19, r18
     ac0:	22 27       	eor	r18, r18
     ac2:	37 95       	ror	r19
     ac4:	27 95       	ror	r18
     ac6:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:504
  y ^= y >> 9;
     ac8:	39 27       	eor	r19, r25
     aca:	c9 01       	movw	r24, r18
     acc:	89 2f       	mov	r24, r25
     ace:	99 27       	eor	r25, r25
     ad0:	86 95       	lsr	r24
     ad2:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:505
  y ^= y << 8;
     ad4:	39 27       	eor	r19, r25
     ad6:	92 2f       	mov	r25, r18
     ad8:	88 27       	eor	r24, r24
     ada:	82 27       	eor	r24, r18
     adc:	93 27       	eor	r25, r19
     ade:	80 93 46 34 	sts	0x3446, r24	; 0x803446 <rng35(unsigned int)::y>
     ae2:	90 93 47 34 	sts	0x3447, r25	; 0x803447 <rng35(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:509
  return (y);
}
uint16_t rng35() {
  return rng35(0);
     ae6:	08 95       	ret

00000ae8 <rng35()>:
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	dc cf       	rjmp	.-72     	; 0xaa6 <rng35(unsigned int)>

00000aee <rng34(unsigned int)>:
rng34():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:489
}

// a=5 b=9 c=8 
uint16_t rng34(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     aee:	00 97       	sbiw	r24, 0x00	; 0
     af0:	21 f0       	breq	.+8      	; 0xafa <rng34(unsigned int)+0xc>
     af2:	80 93 44 34 	sts	0x3444, r24	; 0x803444 <rng34(unsigned int)::y>
     af6:	90 93 45 34 	sts	0x3445, r25	; 0x803445 <rng34(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:490
  y ^= y << 5;
     afa:	80 91 44 34 	lds	r24, 0x3444	; 0x803444 <rng34(unsigned int)::y>
     afe:	90 91 45 34 	lds	r25, 0x3445	; 0x803445 <rng34(unsigned int)::y+0x1>
     b02:	9c 01       	movw	r18, r24
     b04:	45 e0       	ldi	r20, 0x05	; 5
     b06:	22 0f       	add	r18, r18
     b08:	33 1f       	adc	r19, r19
     b0a:	4a 95       	dec	r20
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <rng34(unsigned int)+0x18>
     b0e:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:491
  y ^= y >> 9;
     b10:	39 27       	eor	r19, r25
     b12:	c9 01       	movw	r24, r18
     b14:	89 2f       	mov	r24, r25
     b16:	99 27       	eor	r25, r25
     b18:	86 95       	lsr	r24
     b1a:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:492
  y ^= y << 8;
     b1c:	39 27       	eor	r19, r25
     b1e:	92 2f       	mov	r25, r18
     b20:	88 27       	eor	r24, r24
     b22:	82 27       	eor	r24, r18
     b24:	93 27       	eor	r25, r19
     b26:	80 93 44 34 	sts	0x3444, r24	; 0x803444 <rng34(unsigned int)::y>
     b2a:	90 93 45 34 	sts	0x3445, r25	; 0x803445 <rng34(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:496
  return (y);
}
uint16_t rng34() {
  return rng34(0);
     b2e:	08 95       	ret

00000b30 <rng34()>:
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	dc cf       	rjmp	.-72     	; 0xaee <rng34(unsigned int)>

00000b36 <rng33(unsigned int)>:
rng33():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:476
}

// a=1 b=15 c=7 
uint16_t rng33(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     b36:	00 97       	sbiw	r24, 0x00	; 0
     b38:	21 f0       	breq	.+8      	; 0xb42 <rng33(unsigned int)+0xc>
     b3a:	80 93 42 34 	sts	0x3442, r24	; 0x803442 <rng33(unsigned int)::y>
     b3e:	90 93 43 34 	sts	0x3443, r25	; 0x803443 <rng33(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:477
  y ^= y << 1;
     b42:	80 91 42 34 	lds	r24, 0x3442	; 0x803442 <rng33(unsigned int)::y>
     b46:	90 91 43 34 	lds	r25, 0x3443	; 0x803443 <rng33(unsigned int)::y+0x1>
     b4a:	9c 01       	movw	r18, r24
     b4c:	22 0f       	add	r18, r18
     b4e:	33 1f       	adc	r19, r19
     b50:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:478
  y ^= y >> 15;
     b52:	39 27       	eor	r19, r25
     b54:	c9 01       	movw	r24, r18
     b56:	88 27       	eor	r24, r24
     b58:	99 0f       	add	r25, r25
     b5a:	88 1f       	adc	r24, r24
     b5c:	99 27       	eor	r25, r25
     b5e:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:479
  y ^= y << 7;
     b60:	39 27       	eor	r19, r25
     b62:	c9 01       	movw	r24, r18
     b64:	96 95       	lsr	r25
     b66:	98 2f       	mov	r25, r24
     b68:	88 27       	eor	r24, r24
     b6a:	97 95       	ror	r25
     b6c:	87 95       	ror	r24
     b6e:	82 27       	eor	r24, r18
     b70:	93 27       	eor	r25, r19
     b72:	80 93 42 34 	sts	0x3442, r24	; 0x803442 <rng33(unsigned int)::y>
     b76:	90 93 43 34 	sts	0x3443, r25	; 0x803443 <rng33(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:483
  return (y);
}
uint16_t rng33() {
  return rng33(0);
     b7a:	08 95       	ret

00000b7c <rng33()>:
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	da cf       	rjmp	.-76     	; 0xb36 <rng33(unsigned int)>

00000b82 <rng32(unsigned int)>:
rng32():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:463
}

// a=13 b=9 c=7 
uint16_t rng32(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     b82:	00 97       	sbiw	r24, 0x00	; 0
     b84:	21 f0       	breq	.+8      	; 0xb8e <rng32(unsigned int)+0xc>
     b86:	80 93 40 34 	sts	0x3440, r24	; 0x803440 <rng32(unsigned int)::y>
     b8a:	90 93 41 34 	sts	0x3441, r25	; 0x803441 <rng32(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:464
  y ^= y << 13;
     b8e:	80 91 40 34 	lds	r24, 0x3440	; 0x803440 <rng32(unsigned int)::y>
     b92:	90 91 41 34 	lds	r25, 0x3441	; 0x803441 <rng32(unsigned int)::y+0x1>
     b96:	9c 01       	movw	r18, r24
     b98:	32 2f       	mov	r19, r18
     b9a:	22 27       	eor	r18, r18
     b9c:	32 95       	swap	r19
     b9e:	33 0f       	add	r19, r19
     ba0:	30 7e       	andi	r19, 0xE0	; 224
     ba2:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:465
  y ^= y >> 9;
     ba4:	39 27       	eor	r19, r25
     ba6:	c9 01       	movw	r24, r18
     ba8:	89 2f       	mov	r24, r25
     baa:	99 27       	eor	r25, r25
     bac:	86 95       	lsr	r24
     bae:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:466
  y ^= y << 7;
     bb0:	39 27       	eor	r19, r25
     bb2:	c9 01       	movw	r24, r18
     bb4:	96 95       	lsr	r25
     bb6:	98 2f       	mov	r25, r24
     bb8:	88 27       	eor	r24, r24
     bba:	97 95       	ror	r25
     bbc:	87 95       	ror	r24
     bbe:	82 27       	eor	r24, r18
     bc0:	93 27       	eor	r25, r19
     bc2:	80 93 40 34 	sts	0x3440, r24	; 0x803440 <rng32(unsigned int)::y>
     bc6:	90 93 41 34 	sts	0x3441, r25	; 0x803441 <rng32(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:470
  return (y);
}
uint16_t rng32() {
  return rng32(0);
     bca:	08 95       	ret

00000bcc <rng32()>:
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	d8 cf       	rjmp	.-80     	; 0xb82 <rng32(unsigned int)>

00000bd2 <rng31(unsigned int)>:
rng31():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:450
}

// a=8 b=9 c=7 
uint16_t rng31(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     bd2:	00 97       	sbiw	r24, 0x00	; 0
     bd4:	21 f0       	breq	.+8      	; 0xbde <rng31(unsigned int)+0xc>
     bd6:	80 93 3e 34 	sts	0x343E, r24	; 0x80343e <rng31(unsigned int)::y>
     bda:	90 93 3f 34 	sts	0x343F, r25	; 0x80343f <rng31(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:451
  y ^= y << 8;
     bde:	80 91 3e 34 	lds	r24, 0x343E	; 0x80343e <rng31(unsigned int)::y>
     be2:	90 91 3f 34 	lds	r25, 0x343F	; 0x80343f <rng31(unsigned int)::y+0x1>
     be6:	38 2f       	mov	r19, r24
     be8:	22 27       	eor	r18, r18
     bea:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:452
  y ^= y >> 9;
     bec:	39 27       	eor	r19, r25
     bee:	c9 01       	movw	r24, r18
     bf0:	89 2f       	mov	r24, r25
     bf2:	99 27       	eor	r25, r25
     bf4:	86 95       	lsr	r24
     bf6:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:453
  y ^= y << 7;
     bf8:	39 27       	eor	r19, r25
     bfa:	c9 01       	movw	r24, r18
     bfc:	96 95       	lsr	r25
     bfe:	98 2f       	mov	r25, r24
     c00:	88 27       	eor	r24, r24
     c02:	97 95       	ror	r25
     c04:	87 95       	ror	r24
     c06:	82 27       	eor	r24, r18
     c08:	93 27       	eor	r25, r19
     c0a:	80 93 3e 34 	sts	0x343E, r24	; 0x80343e <rng31(unsigned int)::y>
     c0e:	90 93 3f 34 	sts	0x343F, r25	; 0x80343f <rng31(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:457
  return (y);
}
uint16_t rng31() {
  return rng31(0);
     c12:	08 95       	ret

00000c14 <rng31()>:
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	dc cf       	rjmp	.-72     	; 0xbd2 <rng31(unsigned int)>

00000c1a <rng30(unsigned int)>:
rng30():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:437
}

// a=4 b=3 c=7 
uint16_t rng30(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	21 f0       	breq	.+8      	; 0xc26 <rng30(unsigned int)+0xc>
     c1e:	80 93 3c 34 	sts	0x343C, r24	; 0x80343c <rng30(unsigned int)::y>
     c22:	90 93 3d 34 	sts	0x343D, r25	; 0x80343d <rng30(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:438
  y ^= y << 4;
     c26:	80 91 3c 34 	lds	r24, 0x343C	; 0x80343c <rng30(unsigned int)::y>
     c2a:	90 91 3d 34 	lds	r25, 0x343D	; 0x80343d <rng30(unsigned int)::y+0x1>
     c2e:	9c 01       	movw	r18, r24
     c30:	44 e0       	ldi	r20, 0x04	; 4
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	4a 95       	dec	r20
     c38:	e1 f7       	brne	.-8      	; 0xc32 <rng30(unsigned int)+0x18>
     c3a:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:439
  y ^= y >> 3;
     c3c:	39 27       	eor	r19, r25
     c3e:	c9 01       	movw	r24, r18
     c40:	53 e0       	ldi	r21, 0x03	; 3
     c42:	96 95       	lsr	r25
     c44:	87 95       	ror	r24
     c46:	5a 95       	dec	r21
     c48:	e1 f7       	brne	.-8      	; 0xc42 <rng30(unsigned int)+0x28>
     c4a:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:440
  y ^= y << 7;
     c4c:	39 27       	eor	r19, r25
     c4e:	c9 01       	movw	r24, r18
     c50:	96 95       	lsr	r25
     c52:	98 2f       	mov	r25, r24
     c54:	88 27       	eor	r24, r24
     c56:	97 95       	ror	r25
     c58:	87 95       	ror	r24
     c5a:	82 27       	eor	r24, r18
     c5c:	93 27       	eor	r25, r19
     c5e:	80 93 3c 34 	sts	0x343C, r24	; 0x80343c <rng30(unsigned int)::y>
     c62:	90 93 3d 34 	sts	0x343D, r25	; 0x80343d <rng30(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:444
  return (y);
}
uint16_t rng30() {
  return rng30(0);
     c66:	08 95       	ret

00000c68 <rng30()>:
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	d6 cf       	rjmp	.-84     	; 0xc1a <rng30(unsigned int)>

00000c6e <rng29(unsigned int)>:
rng29():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:424
}

// a=11 b=1 c=7 
uint16_t rng29(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	21 f0       	breq	.+8      	; 0xc7a <rng29(unsigned int)+0xc>
     c72:	80 93 3a 34 	sts	0x343A, r24	; 0x80343a <rng29(unsigned int)::y>
     c76:	90 93 3b 34 	sts	0x343B, r25	; 0x80343b <rng29(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:425
  y ^= y << 11;
     c7a:	80 91 3a 34 	lds	r24, 0x343A	; 0x80343a <rng29(unsigned int)::y>
     c7e:	90 91 3b 34 	lds	r25, 0x343B	; 0x80343b <rng29(unsigned int)::y+0x1>
     c82:	9c 01       	movw	r18, r24
     c84:	32 2f       	mov	r19, r18
     c86:	22 27       	eor	r18, r18
     c88:	33 0f       	add	r19, r19
     c8a:	33 0f       	add	r19, r19
     c8c:	33 0f       	add	r19, r19
     c8e:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:426
  y ^= y >> 1;
     c90:	39 27       	eor	r19, r25
     c92:	c9 01       	movw	r24, r18
     c94:	96 95       	lsr	r25
     c96:	87 95       	ror	r24
     c98:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:427
  y ^= y << 7;
     c9a:	39 27       	eor	r19, r25
     c9c:	c9 01       	movw	r24, r18
     c9e:	96 95       	lsr	r25
     ca0:	98 2f       	mov	r25, r24
     ca2:	88 27       	eor	r24, r24
     ca4:	97 95       	ror	r25
     ca6:	87 95       	ror	r24
     ca8:	82 27       	eor	r24, r18
     caa:	93 27       	eor	r25, r19
     cac:	80 93 3a 34 	sts	0x343A, r24	; 0x80343a <rng29(unsigned int)::y>
     cb0:	90 93 3b 34 	sts	0x343B, r25	; 0x80343b <rng29(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:431
  return (y);
}
uint16_t rng29() {
  return rng29(0);
     cb4:	08 95       	ret

00000cb6 <rng29()>:
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	d9 cf       	rjmp	.-78     	; 0xc6e <rng29(unsigned int)>

00000cbc <rng28(unsigned int)>:
rng28():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:411
}

// a=1 b=15 c=6 
uint16_t rng28(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     cbc:	00 97       	sbiw	r24, 0x00	; 0
     cbe:	21 f0       	breq	.+8      	; 0xcc8 <rng28(unsigned int)+0xc>
     cc0:	80 93 38 34 	sts	0x3438, r24	; 0x803438 <rng28(unsigned int)::y>
     cc4:	90 93 39 34 	sts	0x3439, r25	; 0x803439 <rng28(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:412
  y ^= y << 1;
     cc8:	80 91 38 34 	lds	r24, 0x3438	; 0x803438 <rng28(unsigned int)::y>
     ccc:	90 91 39 34 	lds	r25, 0x3439	; 0x803439 <rng28(unsigned int)::y+0x1>
     cd0:	9c 01       	movw	r18, r24
     cd2:	22 0f       	add	r18, r18
     cd4:	33 1f       	adc	r19, r19
     cd6:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:413
  y ^= y >> 15;
     cd8:	39 27       	eor	r19, r25
     cda:	c9 01       	movw	r24, r18
     cdc:	88 27       	eor	r24, r24
     cde:	99 0f       	add	r25, r25
     ce0:	88 1f       	adc	r24, r24
     ce2:	99 27       	eor	r25, r25
     ce4:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:414
  y ^= y << 6;
     ce6:	39 27       	eor	r19, r25
     ce8:	c9 01       	movw	r24, r18
     cea:	66 e0       	ldi	r22, 0x06	; 6
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	6a 95       	dec	r22
     cf2:	e1 f7       	brne	.-8      	; 0xcec <rng28(unsigned int)+0x30>
     cf4:	82 27       	eor	r24, r18
     cf6:	93 27       	eor	r25, r19
     cf8:	80 93 38 34 	sts	0x3438, r24	; 0x803438 <rng28(unsigned int)::y>
     cfc:	90 93 39 34 	sts	0x3439, r25	; 0x803439 <rng28(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:418
  return (y);
}
uint16_t rng28() {
  return rng28(0);
     d00:	08 95       	ret

00000d02 <rng28()>:
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	da cf       	rjmp	.-76     	; 0xcbc <rng28(unsigned int)>

00000d08 <rng27(unsigned int)>:
rng27():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:398
}

// a=5 b=11 c=6 
uint16_t rng27(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	21 f0       	breq	.+8      	; 0xd14 <rng27(unsigned int)+0xc>
     d0c:	80 93 36 34 	sts	0x3436, r24	; 0x803436 <rng27(unsigned int)::y>
     d10:	90 93 37 34 	sts	0x3437, r25	; 0x803437 <rng27(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:399
  y ^= y << 5;
     d14:	80 91 36 34 	lds	r24, 0x3436	; 0x803436 <rng27(unsigned int)::y>
     d18:	90 91 37 34 	lds	r25, 0x3437	; 0x803437 <rng27(unsigned int)::y+0x1>
     d1c:	9c 01       	movw	r18, r24
     d1e:	45 e0       	ldi	r20, 0x05	; 5
     d20:	22 0f       	add	r18, r18
     d22:	33 1f       	adc	r19, r19
     d24:	4a 95       	dec	r20
     d26:	e1 f7       	brne	.-8      	; 0xd20 <rng27(unsigned int)+0x18>
     d28:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:400
  y ^= y >> 11;
     d2a:	39 27       	eor	r19, r25
     d2c:	c9 01       	movw	r24, r18
     d2e:	89 2f       	mov	r24, r25
     d30:	99 27       	eor	r25, r25
     d32:	86 95       	lsr	r24
     d34:	86 95       	lsr	r24
     d36:	86 95       	lsr	r24
     d38:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:401
  y ^= y << 6;
     d3a:	39 27       	eor	r19, r25
     d3c:	c9 01       	movw	r24, r18
     d3e:	66 e0       	ldi	r22, 0x06	; 6
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	6a 95       	dec	r22
     d46:	e1 f7       	brne	.-8      	; 0xd40 <rng27(unsigned int)+0x38>
     d48:	82 27       	eor	r24, r18
     d4a:	93 27       	eor	r25, r19
     d4c:	80 93 36 34 	sts	0x3436, r24	; 0x803436 <rng27(unsigned int)::y>
     d50:	90 93 37 34 	sts	0x3437, r25	; 0x803437 <rng27(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:405
  return (y);
}
uint16_t rng27() {
  return rng27(0);
     d54:	08 95       	ret

00000d56 <rng27()>:
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	d6 cf       	rjmp	.-84     	; 0xd08 <rng27(unsigned int)>

00000d5c <rng26(unsigned int)>:
rng26():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:385
}

// a=13 b=7 c=6 
uint16_t rng26(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	21 f0       	breq	.+8      	; 0xd68 <rng26(unsigned int)+0xc>
     d60:	80 93 34 34 	sts	0x3434, r24	; 0x803434 <rng26(unsigned int)::y>
     d64:	90 93 35 34 	sts	0x3435, r25	; 0x803435 <rng26(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:386
  y ^= y << 13;
     d68:	80 91 34 34 	lds	r24, 0x3434	; 0x803434 <rng26(unsigned int)::y>
     d6c:	90 91 35 34 	lds	r25, 0x3435	; 0x803435 <rng26(unsigned int)::y+0x1>
     d70:	9c 01       	movw	r18, r24
     d72:	32 2f       	mov	r19, r18
     d74:	22 27       	eor	r18, r18
     d76:	32 95       	swap	r19
     d78:	33 0f       	add	r19, r19
     d7a:	30 7e       	andi	r19, 0xE0	; 224
     d7c:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:387
  y ^= y >> 7;
     d7e:	39 27       	eor	r19, r25
     d80:	c9 01       	movw	r24, r18
     d82:	88 0f       	add	r24, r24
     d84:	89 2f       	mov	r24, r25
     d86:	88 1f       	adc	r24, r24
     d88:	99 0b       	sbc	r25, r25
     d8a:	91 95       	neg	r25
     d8c:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:388
  y ^= y << 6;
     d8e:	39 27       	eor	r19, r25
     d90:	c9 01       	movw	r24, r18
     d92:	66 e0       	ldi	r22, 0x06	; 6
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	6a 95       	dec	r22
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <rng26(unsigned int)+0x38>
     d9c:	82 27       	eor	r24, r18
     d9e:	93 27       	eor	r25, r19
     da0:	80 93 34 34 	sts	0x3434, r24	; 0x803434 <rng26(unsigned int)::y>
     da4:	90 93 35 34 	sts	0x3435, r25	; 0x803435 <rng26(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:392
  return (y);
}
uint16_t rng26() {
  return rng26(0);
     da8:	08 95       	ret

00000daa <rng26()>:
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	d6 cf       	rjmp	.-84     	; 0xd5c <rng26(unsigned int)>

00000db0 <rng25(unsigned int)>:
rng25():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:372
}

// a=11 b=11 c=5 
uint16_t rng25(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	21 f0       	breq	.+8      	; 0xdbc <rng25(unsigned int)+0xc>
     db4:	80 93 32 34 	sts	0x3432, r24	; 0x803432 <rng25(unsigned int)::y>
     db8:	90 93 33 34 	sts	0x3433, r25	; 0x803433 <rng25(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:373
  y ^= y << 11;
     dbc:	80 91 32 34 	lds	r24, 0x3432	; 0x803432 <rng25(unsigned int)::y>
     dc0:	90 91 33 34 	lds	r25, 0x3433	; 0x803433 <rng25(unsigned int)::y+0x1>
     dc4:	9c 01       	movw	r18, r24
     dc6:	32 2f       	mov	r19, r18
     dc8:	22 27       	eor	r18, r18
     dca:	33 0f       	add	r19, r19
     dcc:	33 0f       	add	r19, r19
     dce:	33 0f       	add	r19, r19
     dd0:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:374
  y ^= y >> 11;
     dd2:	39 27       	eor	r19, r25
     dd4:	c9 01       	movw	r24, r18
     dd6:	89 2f       	mov	r24, r25
     dd8:	99 27       	eor	r25, r25
     dda:	86 95       	lsr	r24
     ddc:	86 95       	lsr	r24
     dde:	86 95       	lsr	r24
     de0:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:375
  y ^= y << 5;
     de2:	39 27       	eor	r19, r25
     de4:	c9 01       	movw	r24, r18
     de6:	65 e0       	ldi	r22, 0x05	; 5
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	6a 95       	dec	r22
     dee:	e1 f7       	brne	.-8      	; 0xde8 <rng25(unsigned int)+0x38>
     df0:	82 27       	eor	r24, r18
     df2:	93 27       	eor	r25, r19
     df4:	80 93 32 34 	sts	0x3432, r24	; 0x803432 <rng25(unsigned int)::y>
     df8:	90 93 33 34 	sts	0x3433, r25	; 0x803433 <rng25(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:379
  return (y);
}
uint16_t rng25() {
  return rng25(0);
     dfc:	08 95       	ret

00000dfe <rng25()>:
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	d6 cf       	rjmp	.-84     	; 0xdb0 <rng25(unsigned int)>

00000e04 <rng24(unsigned int)>:
rng24():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:359
}

// a=6 b=11 c=5 
uint16_t rng24(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	21 f0       	breq	.+8      	; 0xe10 <rng24(unsigned int)+0xc>
     e08:	80 93 30 34 	sts	0x3430, r24	; 0x803430 <rng24(unsigned int)::y>
     e0c:	90 93 31 34 	sts	0x3431, r25	; 0x803431 <rng24(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:360
  y ^= y << 6;
     e10:	80 91 30 34 	lds	r24, 0x3430	; 0x803430 <rng24(unsigned int)::y>
     e14:	90 91 31 34 	lds	r25, 0x3431	; 0x803431 <rng24(unsigned int)::y+0x1>
     e18:	9c 01       	movw	r18, r24
     e1a:	46 e0       	ldi	r20, 0x06	; 6
     e1c:	22 0f       	add	r18, r18
     e1e:	33 1f       	adc	r19, r19
     e20:	4a 95       	dec	r20
     e22:	e1 f7       	brne	.-8      	; 0xe1c <rng24(unsigned int)+0x18>
     e24:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:361
  y ^= y >> 11;
     e26:	39 27       	eor	r19, r25
     e28:	c9 01       	movw	r24, r18
     e2a:	89 2f       	mov	r24, r25
     e2c:	99 27       	eor	r25, r25
     e2e:	86 95       	lsr	r24
     e30:	86 95       	lsr	r24
     e32:	86 95       	lsr	r24
     e34:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:362
  y ^= y << 5;
     e36:	39 27       	eor	r19, r25
     e38:	c9 01       	movw	r24, r18
     e3a:	65 e0       	ldi	r22, 0x05	; 5
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	6a 95       	dec	r22
     e42:	e1 f7       	brne	.-8      	; 0xe3c <rng24(unsigned int)+0x38>
     e44:	82 27       	eor	r24, r18
     e46:	93 27       	eor	r25, r19
     e48:	80 93 30 34 	sts	0x3430, r24	; 0x803430 <rng24(unsigned int)::y>
     e4c:	90 93 31 34 	sts	0x3431, r25	; 0x803431 <rng24(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:366
  return (y);
}
uint16_t rng24() {
  return rng24(0);
     e50:	08 95       	ret

00000e52 <rng24()>:
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:346
}

// a=8 b=9 c=5 
uint16_t rng23(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     e56:	d6 cf       	rjmp	.-84     	; 0xe04 <rng24(unsigned int)>

00000e58 <rng23(unsigned int)>:
rng23():
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	21 f0       	breq	.+8      	; 0xe64 <rng23(unsigned int)+0xc>
     e5c:	80 93 2e 34 	sts	0x342E, r24	; 0x80342e <rng23(unsigned int)::y>
     e60:	90 93 2f 34 	sts	0x342F, r25	; 0x80342f <rng23(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:347
  y ^= y << 8;
     e64:	80 91 2e 34 	lds	r24, 0x342E	; 0x80342e <rng23(unsigned int)::y>
     e68:	90 91 2f 34 	lds	r25, 0x342F	; 0x80342f <rng23(unsigned int)::y+0x1>
     e6c:	38 2f       	mov	r19, r24
     e6e:	22 27       	eor	r18, r18
     e70:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:348
  y ^= y >> 9;
     e72:	39 27       	eor	r19, r25
     e74:	c9 01       	movw	r24, r18
     e76:	89 2f       	mov	r24, r25
     e78:	99 27       	eor	r25, r25
     e7a:	86 95       	lsr	r24
     e7c:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:349
  y ^= y << 5;
     e7e:	39 27       	eor	r19, r25
     e80:	c9 01       	movw	r24, r18
     e82:	55 e0       	ldi	r21, 0x05	; 5
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	5a 95       	dec	r21
     e8a:	e1 f7       	brne	.-8      	; 0xe84 <rng23(unsigned int)+0x2c>
     e8c:	82 27       	eor	r24, r18
     e8e:	93 27       	eor	r25, r19
     e90:	80 93 2e 34 	sts	0x342E, r24	; 0x80342e <rng23(unsigned int)::y>
     e94:	90 93 2f 34 	sts	0x342F, r25	; 0x80342f <rng23(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:353
  return (y);
}
uint16_t rng23() {
  return rng23(0);
     e98:	08 95       	ret

00000e9a <rng23()>:
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	dc cf       	rjmp	.-72     	; 0xe58 <rng23(unsigned int)>

00000ea0 <rng22(unsigned int)>:
rng22():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:333
}

// a=14 b=7 c=5 
uint16_t rng22(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	21 f0       	breq	.+8      	; 0xeac <rng22(unsigned int)+0xc>
     ea4:	80 93 2c 34 	sts	0x342C, r24	; 0x80342c <rng22(unsigned int)::y>
     ea8:	90 93 2d 34 	sts	0x342D, r25	; 0x80342d <rng22(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:334
  y ^= y << 14;
     eac:	80 91 2c 34 	lds	r24, 0x342C	; 0x80342c <rng22(unsigned int)::y>
     eb0:	90 91 2d 34 	lds	r25, 0x342D	; 0x80342d <rng22(unsigned int)::y+0x1>
     eb4:	9c 01       	movw	r18, r24
     eb6:	30 e4       	ldi	r19, 0x40	; 64
     eb8:	23 9f       	mul	r18, r19
     eba:	30 2d       	mov	r19, r0
     ebc:	22 27       	eor	r18, r18
     ebe:	11 24       	eor	r1, r1
     ec0:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:335
  y ^= y >> 7;
     ec2:	39 27       	eor	r19, r25
     ec4:	c9 01       	movw	r24, r18
     ec6:	88 0f       	add	r24, r24
     ec8:	89 2f       	mov	r24, r25
     eca:	88 1f       	adc	r24, r24
     ecc:	99 0b       	sbc	r25, r25
     ece:	91 95       	neg	r25
     ed0:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:336
  y ^= y << 5;
     ed2:	39 27       	eor	r19, r25
     ed4:	c9 01       	movw	r24, r18
     ed6:	65 e0       	ldi	r22, 0x05	; 5
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	6a 95       	dec	r22
     ede:	e1 f7       	brne	.-8      	; 0xed8 <rng22(unsigned int)+0x38>
     ee0:	82 27       	eor	r24, r18
     ee2:	93 27       	eor	r25, r19
     ee4:	80 93 2c 34 	sts	0x342C, r24	; 0x80342c <rng22(unsigned int)::y>
     ee8:	90 93 2d 34 	sts	0x342D, r25	; 0x80342d <rng22(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:340
  return (y);
}
uint16_t rng22() {
  return rng22(0);
     eec:	08 95       	ret

00000eee <rng22()>:
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	d6 cf       	rjmp	.-84     	; 0xea0 <rng22(unsigned int)>

00000ef4 <rng21(unsigned int)>:
rng21():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:320
}

// a=11 b=11 c=4 
uint16_t rng21(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	21 f0       	breq	.+8      	; 0xf00 <rng21(unsigned int)+0xc>
     ef8:	80 93 2a 34 	sts	0x342A, r24	; 0x80342a <rng21(unsigned int)::y>
     efc:	90 93 2b 34 	sts	0x342B, r25	; 0x80342b <rng21(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:321
  y ^= y << 11;
     f00:	80 91 2a 34 	lds	r24, 0x342A	; 0x80342a <rng21(unsigned int)::y>
     f04:	90 91 2b 34 	lds	r25, 0x342B	; 0x80342b <rng21(unsigned int)::y+0x1>
     f08:	9c 01       	movw	r18, r24
     f0a:	32 2f       	mov	r19, r18
     f0c:	22 27       	eor	r18, r18
     f0e:	33 0f       	add	r19, r19
     f10:	33 0f       	add	r19, r19
     f12:	33 0f       	add	r19, r19
     f14:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:322
  y ^= y >> 11;
     f16:	39 27       	eor	r19, r25
     f18:	c9 01       	movw	r24, r18
     f1a:	89 2f       	mov	r24, r25
     f1c:	99 27       	eor	r25, r25
     f1e:	86 95       	lsr	r24
     f20:	86 95       	lsr	r24
     f22:	86 95       	lsr	r24
     f24:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:323
  y ^= y << 4;
     f26:	39 27       	eor	r19, r25
     f28:	c9 01       	movw	r24, r18
     f2a:	64 e0       	ldi	r22, 0x04	; 4
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	6a 95       	dec	r22
     f32:	e1 f7       	brne	.-8      	; 0xf2c <rng21(unsigned int)+0x38>
     f34:	82 27       	eor	r24, r18
     f36:	93 27       	eor	r25, r19
     f38:	80 93 2a 34 	sts	0x342A, r24	; 0x80342a <rng21(unsigned int)::y>
     f3c:	90 93 2b 34 	sts	0x342B, r25	; 0x80342b <rng21(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:327
  return (y);
}
uint16_t rng21() {
  return rng21(0);
     f40:	08 95       	ret

00000f42 <rng21()>:
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:307
}

// a=1 b=7 c=4 
uint16_t rng20(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     f46:	d6 cf       	rjmp	.-84     	; 0xef4 <rng21(unsigned int)>

00000f48 <rng20(unsigned int)>:
rng20():
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	21 f0       	breq	.+8      	; 0xf54 <rng20(unsigned int)+0xc>
     f4c:	80 93 28 34 	sts	0x3428, r24	; 0x803428 <rng20(unsigned int)::y>
     f50:	90 93 29 34 	sts	0x3429, r25	; 0x803429 <rng20(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:308
  y ^= y << 1;
     f54:	80 91 28 34 	lds	r24, 0x3428	; 0x803428 <rng20(unsigned int)::y>
     f58:	90 91 29 34 	lds	r25, 0x3429	; 0x803429 <rng20(unsigned int)::y+0x1>
     f5c:	9c 01       	movw	r18, r24
     f5e:	22 0f       	add	r18, r18
     f60:	33 1f       	adc	r19, r19
     f62:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:309
  y ^= y >> 7;
     f64:	39 27       	eor	r19, r25
     f66:	c9 01       	movw	r24, r18
     f68:	88 0f       	add	r24, r24
     f6a:	89 2f       	mov	r24, r25
     f6c:	88 1f       	adc	r24, r24
     f6e:	99 0b       	sbc	r25, r25
     f70:	91 95       	neg	r25
     f72:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:310
  y ^= y << 4;
     f74:	39 27       	eor	r19, r25
     f76:	c9 01       	movw	r24, r18
     f78:	64 e0       	ldi	r22, 0x04	; 4
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	6a 95       	dec	r22
     f80:	e1 f7       	brne	.-8      	; 0xf7a <rng20(unsigned int)+0x32>
     f82:	82 27       	eor	r24, r18
     f84:	93 27       	eor	r25, r19
     f86:	80 93 28 34 	sts	0x3428, r24	; 0x803428 <rng20(unsigned int)::y>
     f8a:	90 93 29 34 	sts	0x3429, r25	; 0x803429 <rng20(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:314
  return (y);
}
uint16_t rng20() {
  return rng20(0);
     f8e:	08 95       	ret

00000f90 <rng20()>:
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:294
}

// a=7 b=3 c=4 
uint16_t rng19(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     f94:	d9 cf       	rjmp	.-78     	; 0xf48 <rng20(unsigned int)>

00000f96 <rng19(unsigned int)>:
rng19():
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	21 f0       	breq	.+8      	; 0xfa2 <rng19(unsigned int)+0xc>
     f9a:	80 93 26 34 	sts	0x3426, r24	; 0x803426 <rng19(unsigned int)::y>
     f9e:	90 93 27 34 	sts	0x3427, r25	; 0x803427 <rng19(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:295
  y ^= y << 7;
     fa2:	80 91 26 34 	lds	r24, 0x3426	; 0x803426 <rng19(unsigned int)::y>
     fa6:	90 91 27 34 	lds	r25, 0x3427	; 0x803427 <rng19(unsigned int)::y+0x1>
     faa:	9c 01       	movw	r18, r24
     fac:	36 95       	lsr	r19
     fae:	32 2f       	mov	r19, r18
     fb0:	22 27       	eor	r18, r18
     fb2:	37 95       	ror	r19
     fb4:	27 95       	ror	r18
     fb6:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:296
  y ^= y >> 3;
     fb8:	39 27       	eor	r19, r25
     fba:	c9 01       	movw	r24, r18
     fbc:	53 e0       	ldi	r21, 0x03	; 3
     fbe:	96 95       	lsr	r25
     fc0:	87 95       	ror	r24
     fc2:	5a 95       	dec	r21
     fc4:	e1 f7       	brne	.-8      	; 0xfbe <rng19(unsigned int)+0x28>
     fc6:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:297
  y ^= y << 4;
     fc8:	39 27       	eor	r19, r25
     fca:	c9 01       	movw	r24, r18
     fcc:	64 e0       	ldi	r22, 0x04	; 4
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	6a 95       	dec	r22
     fd4:	e1 f7       	brne	.-8      	; 0xfce <rng19(unsigned int)+0x38>
     fd6:	82 27       	eor	r24, r18
     fd8:	93 27       	eor	r25, r19
     fda:	80 93 26 34 	sts	0x3426, r24	; 0x803426 <rng19(unsigned int)::y>
     fde:	90 93 27 34 	sts	0x3427, r25	; 0x803427 <rng19(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:301
  return (y);
}
uint16_t rng19() {
  return rng19(0);
     fe2:	08 95       	ret

00000fe4 <rng19()>:
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:281
}

// a=9 b=13 c=3 
uint16_t rng18(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
     fe8:	d6 cf       	rjmp	.-84     	; 0xf96 <rng19(unsigned int)>

00000fea <rng18(unsigned int)>:
rng18():
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	21 f0       	breq	.+8      	; 0xff6 <rng18(unsigned int)+0xc>
     fee:	80 93 24 34 	sts	0x3424, r24	; 0x803424 <rng18(unsigned int)::y>
     ff2:	90 93 25 34 	sts	0x3425, r25	; 0x803425 <rng18(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:282
  y ^= y << 9;
     ff6:	80 91 24 34 	lds	r24, 0x3424	; 0x803424 <rng18(unsigned int)::y>
     ffa:	90 91 25 34 	lds	r25, 0x3425	; 0x803425 <rng18(unsigned int)::y+0x1>
     ffe:	9c 01       	movw	r18, r24
    1000:	32 2f       	mov	r19, r18
    1002:	22 27       	eor	r18, r18
    1004:	33 0f       	add	r19, r19
    1006:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:283
  y ^= y >> 13;
    1008:	39 27       	eor	r19, r25
    100a:	c9 01       	movw	r24, r18
    100c:	89 2f       	mov	r24, r25
    100e:	99 27       	eor	r25, r25
    1010:	82 95       	swap	r24
    1012:	86 95       	lsr	r24
    1014:	87 70       	andi	r24, 0x07	; 7
    1016:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:284
  y ^= y << 3;
    1018:	39 27       	eor	r19, r25
    101a:	c9 01       	movw	r24, r18
    101c:	63 e0       	ldi	r22, 0x03	; 3
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	6a 95       	dec	r22
    1024:	e1 f7       	brne	.-8      	; 0x101e <rng18(unsigned int)+0x34>
    1026:	82 27       	eor	r24, r18
    1028:	93 27       	eor	r25, r19
    102a:	80 93 24 34 	sts	0x3424, r24	; 0x803424 <rng18(unsigned int)::y>
    102e:	90 93 25 34 	sts	0x3425, r25	; 0x803425 <rng18(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:288
  return (y);
}
uint16_t rng18() {
  return rng18(0);
    1032:	08 95       	ret

00001034 <rng18()>:
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:268
}

// a=11 b=11 c=3 
uint16_t rng17(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    1038:	d8 cf       	rjmp	.-80     	; 0xfea <rng18(unsigned int)>

0000103a <rng17(unsigned int)>:
rng17():
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	21 f0       	breq	.+8      	; 0x1046 <rng17(unsigned int)+0xc>
    103e:	80 93 22 34 	sts	0x3422, r24	; 0x803422 <rng17(unsigned int)::y>
    1042:	90 93 23 34 	sts	0x3423, r25	; 0x803423 <rng17(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:269
  y ^= y << 11;
    1046:	80 91 22 34 	lds	r24, 0x3422	; 0x803422 <rng17(unsigned int)::y>
    104a:	90 91 23 34 	lds	r25, 0x3423	; 0x803423 <rng17(unsigned int)::y+0x1>
    104e:	9c 01       	movw	r18, r24
    1050:	32 2f       	mov	r19, r18
    1052:	22 27       	eor	r18, r18
    1054:	33 0f       	add	r19, r19
    1056:	33 0f       	add	r19, r19
    1058:	33 0f       	add	r19, r19
    105a:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:270
  y ^= y >> 11;
    105c:	39 27       	eor	r19, r25
    105e:	c9 01       	movw	r24, r18
    1060:	89 2f       	mov	r24, r25
    1062:	99 27       	eor	r25, r25
    1064:	86 95       	lsr	r24
    1066:	86 95       	lsr	r24
    1068:	86 95       	lsr	r24
    106a:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:271
  y ^= y << 3;
    106c:	39 27       	eor	r19, r25
    106e:	c9 01       	movw	r24, r18
    1070:	63 e0       	ldi	r22, 0x03	; 3
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	6a 95       	dec	r22
    1078:	e1 f7       	brne	.-8      	; 0x1072 <rng17(unsigned int)+0x38>
    107a:	82 27       	eor	r24, r18
    107c:	93 27       	eor	r25, r19
    107e:	80 93 22 34 	sts	0x3422, r24	; 0x803422 <rng17(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:273
  return (y);
}
    1082:	90 93 23 34 	sts	0x3423, r25	; 0x803423 <rng17(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:275
uint16_t rng17() {
  return rng17(0);
    1086:	08 95       	ret

00001088 <rng17()>:
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:255
}

// a=1 b=11 c=3 
uint16_t rng16(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    108c:	d6 cf       	rjmp	.-84     	; 0x103a <rng17(unsigned int)>

0000108e <rng16(unsigned int)>:
rng16():
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	21 f0       	breq	.+8      	; 0x109a <rng16(unsigned int)+0xc>
    1092:	80 93 20 34 	sts	0x3420, r24	; 0x803420 <rng16(unsigned int)::y>
    1096:	90 93 21 34 	sts	0x3421, r25	; 0x803421 <rng16(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:256
  y ^= y << 1;
    109a:	80 91 20 34 	lds	r24, 0x3420	; 0x803420 <rng16(unsigned int)::y>
    109e:	90 91 21 34 	lds	r25, 0x3421	; 0x803421 <rng16(unsigned int)::y+0x1>
    10a2:	9c 01       	movw	r18, r24
    10a4:	22 0f       	add	r18, r18
    10a6:	33 1f       	adc	r19, r19
    10a8:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:257
  y ^= y >> 11;
    10aa:	39 27       	eor	r19, r25
    10ac:	c9 01       	movw	r24, r18
    10ae:	89 2f       	mov	r24, r25
    10b0:	99 27       	eor	r25, r25
    10b2:	86 95       	lsr	r24
    10b4:	86 95       	lsr	r24
    10b6:	86 95       	lsr	r24
    10b8:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:258
  y ^= y << 3;
    10ba:	39 27       	eor	r19, r25
    10bc:	c9 01       	movw	r24, r18
    10be:	63 e0       	ldi	r22, 0x03	; 3
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	6a 95       	dec	r22
    10c6:	e1 f7       	brne	.-8      	; 0x10c0 <rng16(unsigned int)+0x32>
    10c8:	82 27       	eor	r24, r18
    10ca:	93 27       	eor	r25, r19
    10cc:	80 93 20 34 	sts	0x3420, r24	; 0x803420 <rng16(unsigned int)::y>
    10d0:	90 93 21 34 	sts	0x3421, r25	; 0x803421 <rng16(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:262
  return (y);
}
uint16_t rng16() {
  return rng16(0);
    10d4:	08 95       	ret

000010d6 <rng16()>:
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:242
}

// a=11 b=5 c=3 
uint16_t rng15(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    10da:	d9 cf       	rjmp	.-78     	; 0x108e <rng16(unsigned int)>

000010dc <rng15(unsigned int)>:
rng15():
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	21 f0       	breq	.+8      	; 0x10e8 <rng15(unsigned int)+0xc>
    10e0:	80 93 1e 34 	sts	0x341E, r24	; 0x80341e <rng15(unsigned int)::y>
    10e4:	90 93 1f 34 	sts	0x341F, r25	; 0x80341f <rng15(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:243
  y ^= y << 11;
    10e8:	80 91 1e 34 	lds	r24, 0x341E	; 0x80341e <rng15(unsigned int)::y>
    10ec:	90 91 1f 34 	lds	r25, 0x341F	; 0x80341f <rng15(unsigned int)::y+0x1>
    10f0:	9c 01       	movw	r18, r24
    10f2:	32 2f       	mov	r19, r18
    10f4:	22 27       	eor	r18, r18
    10f6:	33 0f       	add	r19, r19
    10f8:	33 0f       	add	r19, r19
    10fa:	33 0f       	add	r19, r19
    10fc:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:244
  y ^= y >> 5;
    10fe:	39 27       	eor	r19, r25
    1100:	c9 01       	movw	r24, r18
    1102:	55 e0       	ldi	r21, 0x05	; 5
    1104:	96 95       	lsr	r25
    1106:	87 95       	ror	r24
    1108:	5a 95       	dec	r21
    110a:	e1 f7       	brne	.-8      	; 0x1104 <rng15(unsigned int)+0x28>
    110c:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:245
  y ^= y << 3;
    110e:	39 27       	eor	r19, r25
    1110:	c9 01       	movw	r24, r18
    1112:	63 e0       	ldi	r22, 0x03	; 3
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	6a 95       	dec	r22
    111a:	e1 f7       	brne	.-8      	; 0x1114 <rng15(unsigned int)+0x38>
    111c:	82 27       	eor	r24, r18
    111e:	93 27       	eor	r25, r19
    1120:	80 93 1e 34 	sts	0x341E, r24	; 0x80341e <rng15(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:247
  return (y);
}
    1124:	90 93 1f 34 	sts	0x341F, r25	; 0x80341f <rng15(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:249
uint16_t rng15() {
  return rng15(0);
    1128:	08 95       	ret

0000112a <rng15()>:
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:229
}

// a=15 b=1 c=3 
uint16_t rng14(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    112e:	d6 cf       	rjmp	.-84     	; 0x10dc <rng15(unsigned int)>

00001130 <rng14(unsigned int)>:
rng14():
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	21 f0       	breq	.+8      	; 0x113c <rng14(unsigned int)+0xc>
    1134:	80 93 1c 34 	sts	0x341C, r24	; 0x80341c <rng14(unsigned int)::y>
    1138:	90 93 1d 34 	sts	0x341D, r25	; 0x80341d <rng14(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:230
  y ^= y << 15;
    113c:	80 91 1c 34 	lds	r24, 0x341C	; 0x80341c <rng14(unsigned int)::y>
    1140:	90 91 1d 34 	lds	r25, 0x341D	; 0x80341d <rng14(unsigned int)::y+0x1>
    1144:	9c 01       	movw	r18, r24
    1146:	33 27       	eor	r19, r19
    1148:	26 95       	lsr	r18
    114a:	37 95       	ror	r19
    114c:	22 27       	eor	r18, r18
    114e:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:231
  y ^= y >> 1;
    1150:	39 27       	eor	r19, r25
    1152:	c9 01       	movw	r24, r18
    1154:	96 95       	lsr	r25
    1156:	87 95       	ror	r24
    1158:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:232
  y ^= y << 3;
    115a:	39 27       	eor	r19, r25
    115c:	c9 01       	movw	r24, r18
    115e:	63 e0       	ldi	r22, 0x03	; 3
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	6a 95       	dec	r22
    1166:	e1 f7       	brne	.-8      	; 0x1160 <rng14(unsigned int)+0x30>
    1168:	82 27       	eor	r24, r18
    116a:	93 27       	eor	r25, r19
    116c:	80 93 1c 34 	sts	0x341C, r24	; 0x80341c <rng14(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:234
  return (y);
}
    1170:	90 93 1d 34 	sts	0x341D, r25	; 0x80341d <rng14(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:236
uint16_t rng14() {
  return rng14(0);
    1174:	08 95       	ret

00001176 <rng14()>:
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:216
}

// a=12 b=1 c=3 
uint16_t rng13(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    117a:	da cf       	rjmp	.-76     	; 0x1130 <rng14(unsigned int)>

0000117c <rng13(unsigned int)>:
rng13():
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	21 f0       	breq	.+8      	; 0x1188 <rng13(unsigned int)+0xc>
    1180:	80 93 1a 34 	sts	0x341A, r24	; 0x80341a <rng13(unsigned int)::y>
    1184:	90 93 1b 34 	sts	0x341B, r25	; 0x80341b <rng13(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:217
  y ^= y << 12;
    1188:	80 91 1a 34 	lds	r24, 0x341A	; 0x80341a <rng13(unsigned int)::y>
    118c:	90 91 1b 34 	lds	r25, 0x341B	; 0x80341b <rng13(unsigned int)::y+0x1>
    1190:	9c 01       	movw	r18, r24
    1192:	32 2f       	mov	r19, r18
    1194:	22 27       	eor	r18, r18
    1196:	32 95       	swap	r19
    1198:	30 7f       	andi	r19, 0xF0	; 240
    119a:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:218
  y ^= y >> 1;
    119c:	39 27       	eor	r19, r25
    119e:	c9 01       	movw	r24, r18
    11a0:	96 95       	lsr	r25
    11a2:	87 95       	ror	r24
    11a4:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:219
  y ^= y << 3;
    11a6:	39 27       	eor	r19, r25
    11a8:	c9 01       	movw	r24, r18
    11aa:	63 e0       	ldi	r22, 0x03	; 3
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	6a 95       	dec	r22
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <rng13(unsigned int)+0x30>
    11b4:	82 27       	eor	r24, r18
    11b6:	93 27       	eor	r25, r19
    11b8:	80 93 1a 34 	sts	0x341A, r24	; 0x80341a <rng13(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:221
  return (y);
}
    11bc:	90 93 1b 34 	sts	0x341B, r25	; 0x80341b <rng13(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:223
uint16_t rng13() {
  return rng13(0);
    11c0:	08 95       	ret

000011c2 <rng13()>:
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:203
}

// a=15 b=7 c=2 
uint16_t rng12(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    11c6:	da cf       	rjmp	.-76     	; 0x117c <rng13(unsigned int)>

000011c8 <rng12(unsigned int)>:
rng12():
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	21 f0       	breq	.+8      	; 0x11d4 <rng12(unsigned int)+0xc>
    11cc:	80 93 18 34 	sts	0x3418, r24	; 0x803418 <rng12(unsigned int)::y>
    11d0:	90 93 19 34 	sts	0x3419, r25	; 0x803419 <rng12(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:204
  y ^= y << 15;
    11d4:	80 91 18 34 	lds	r24, 0x3418	; 0x803418 <rng12(unsigned int)::y>
    11d8:	90 91 19 34 	lds	r25, 0x3419	; 0x803419 <rng12(unsigned int)::y+0x1>
    11dc:	9c 01       	movw	r18, r24
    11de:	33 27       	eor	r19, r19
    11e0:	26 95       	lsr	r18
    11e2:	37 95       	ror	r19
    11e4:	22 27       	eor	r18, r18
    11e6:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:205
  y ^= y >> 7;
    11e8:	39 27       	eor	r19, r25
    11ea:	c9 01       	movw	r24, r18
    11ec:	88 0f       	add	r24, r24
    11ee:	89 2f       	mov	r24, r25
    11f0:	88 1f       	adc	r24, r24
    11f2:	99 0b       	sbc	r25, r25
    11f4:	91 95       	neg	r25
    11f6:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:206
  y ^= y << 2;
    11f8:	39 27       	eor	r19, r25
    11fa:	c9 01       	movw	r24, r18
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	82 27       	eor	r24, r18
    1206:	93 27       	eor	r25, r19
    1208:	80 93 18 34 	sts	0x3418, r24	; 0x803418 <rng12(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:208
  return (y);
}
    120c:	90 93 19 34 	sts	0x3419, r25	; 0x803419 <rng12(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:210
uint16_t rng12() {
  return rng12(0);
    1210:	08 95       	ret

00001212 <rng12()>:
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:190
}

// a=13 b=7 c=2 
uint16_t rng11(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    1216:	d8 cf       	rjmp	.-80     	; 0x11c8 <rng12(unsigned int)>

00001218 <rng11(unsigned int)>:
rng11():
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	21 f0       	breq	.+8      	; 0x1224 <rng11(unsigned int)+0xc>
    121c:	80 93 16 34 	sts	0x3416, r24	; 0x803416 <rng11(unsigned int)::y>
    1220:	90 93 17 34 	sts	0x3417, r25	; 0x803417 <rng11(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:191
  y ^= y << 13;
    1224:	80 91 16 34 	lds	r24, 0x3416	; 0x803416 <rng11(unsigned int)::y>
    1228:	90 91 17 34 	lds	r25, 0x3417	; 0x803417 <rng11(unsigned int)::y+0x1>
    122c:	9c 01       	movw	r18, r24
    122e:	32 2f       	mov	r19, r18
    1230:	22 27       	eor	r18, r18
    1232:	32 95       	swap	r19
    1234:	33 0f       	add	r19, r19
    1236:	30 7e       	andi	r19, 0xE0	; 224
    1238:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:192
  y ^= y >> 7;
    123a:	39 27       	eor	r19, r25
    123c:	c9 01       	movw	r24, r18
    123e:	88 0f       	add	r24, r24
    1240:	89 2f       	mov	r24, r25
    1242:	88 1f       	adc	r24, r24
    1244:	99 0b       	sbc	r25, r25
    1246:	91 95       	neg	r25
    1248:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:193
  y ^= y << 2;
    124a:	39 27       	eor	r19, r25
    124c:	c9 01       	movw	r24, r18
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	82 27       	eor	r24, r18
    1258:	93 27       	eor	r25, r19
    125a:	80 93 16 34 	sts	0x3416, r24	; 0x803416 <rng11(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:195
  return (y);
}
    125e:	90 93 17 34 	sts	0x3417, r25	; 0x803417 <rng11(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:197
uint16_t rng11() {
  return rng11(0);
    1262:	08 95       	ret

00001264 <rng11()>:
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:177
}

// a=15 b=5 c=2 
uint16_t rng10(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    1268:	d7 cf       	rjmp	.-82     	; 0x1218 <rng11(unsigned int)>

0000126a <rng10(unsigned int)>:
rng10():
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	21 f0       	breq	.+8      	; 0x1276 <rng10(unsigned int)+0xc>
    126e:	80 93 14 34 	sts	0x3414, r24	; 0x803414 <rng10(unsigned int)::y>
    1272:	90 93 15 34 	sts	0x3415, r25	; 0x803415 <rng10(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:178
  y ^= y << 15;
    1276:	80 91 14 34 	lds	r24, 0x3414	; 0x803414 <rng10(unsigned int)::y>
    127a:	90 91 15 34 	lds	r25, 0x3415	; 0x803415 <rng10(unsigned int)::y+0x1>
    127e:	9c 01       	movw	r18, r24
    1280:	33 27       	eor	r19, r19
    1282:	26 95       	lsr	r18
    1284:	37 95       	ror	r19
    1286:	22 27       	eor	r18, r18
    1288:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:179
  y ^= y >> 5;
    128a:	39 27       	eor	r19, r25
    128c:	c9 01       	movw	r24, r18
    128e:	55 e0       	ldi	r21, 0x05	; 5
    1290:	96 95       	lsr	r25
    1292:	87 95       	ror	r24
    1294:	5a 95       	dec	r21
    1296:	e1 f7       	brne	.-8      	; 0x1290 <rng10(unsigned int)+0x26>
    1298:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:180
  y ^= y << 2;
    129a:	39 27       	eor	r19, r25
    129c:	c9 01       	movw	r24, r18
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	82 27       	eor	r24, r18
    12a8:	93 27       	eor	r25, r19
    12aa:	80 93 14 34 	sts	0x3414, r24	; 0x803414 <rng10(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:182
  return (y);
}
    12ae:	90 93 15 34 	sts	0x3415, r25	; 0x803415 <rng10(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:184
uint16_t rng10() {
  return rng10(0);
    12b2:	08 95       	ret

000012b4 <rng10()>:
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:164
}

// a=13 b=5 c=2 
uint16_t rng9(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    12b8:	d8 cf       	rjmp	.-80     	; 0x126a <rng10(unsigned int)>

000012ba <rng9(unsigned int)>:
rng9():
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	21 f0       	breq	.+8      	; 0x12c6 <rng9(unsigned int)+0xc>
    12be:	80 93 12 34 	sts	0x3412, r24	; 0x803412 <rng9(unsigned int)::y>
    12c2:	90 93 13 34 	sts	0x3413, r25	; 0x803413 <rng9(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:165
  y ^= y << 13;
    12c6:	80 91 12 34 	lds	r24, 0x3412	; 0x803412 <rng9(unsigned int)::y>
    12ca:	90 91 13 34 	lds	r25, 0x3413	; 0x803413 <rng9(unsigned int)::y+0x1>
    12ce:	9c 01       	movw	r18, r24
    12d0:	32 2f       	mov	r19, r18
    12d2:	22 27       	eor	r18, r18
    12d4:	32 95       	swap	r19
    12d6:	33 0f       	add	r19, r19
    12d8:	30 7e       	andi	r19, 0xE0	; 224
    12da:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:166
  y ^= y >> 5;
    12dc:	39 27       	eor	r19, r25
    12de:	c9 01       	movw	r24, r18
    12e0:	55 e0       	ldi	r21, 0x05	; 5
    12e2:	96 95       	lsr	r25
    12e4:	87 95       	ror	r24
    12e6:	5a 95       	dec	r21
    12e8:	e1 f7       	brne	.-8      	; 0x12e2 <rng9(unsigned int)+0x28>
    12ea:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:167
  y ^= y << 2;
    12ec:	39 27       	eor	r19, r25
    12ee:	c9 01       	movw	r24, r18
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	82 27       	eor	r24, r18
    12fa:	93 27       	eor	r25, r19
    12fc:	80 93 12 34 	sts	0x3412, r24	; 0x803412 <rng9(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:169
  return (y);
}
    1300:	90 93 13 34 	sts	0x3413, r25	; 0x803413 <rng9(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:171
uint16_t rng9() {
  return rng9(0);
    1304:	08 95       	ret

00001306 <rng9()>:
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:151
}

// a=1 b=5 c=2 
uint16_t rng8(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    130a:	d7 cf       	rjmp	.-82     	; 0x12ba <rng9(unsigned int)>

0000130c <rng8(unsigned int)>:
rng8():
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	21 f0       	breq	.+8      	; 0x1318 <rng8(unsigned int)+0xc>
    1310:	80 93 10 34 	sts	0x3410, r24	; 0x803410 <rng8(unsigned int)::y>
    1314:	90 93 11 34 	sts	0x3411, r25	; 0x803411 <rng8(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:152
  y ^= y << 1;
    1318:	80 91 10 34 	lds	r24, 0x3410	; 0x803410 <rng8(unsigned int)::y>
    131c:	90 91 11 34 	lds	r25, 0x3411	; 0x803411 <rng8(unsigned int)::y+0x1>
    1320:	9c 01       	movw	r18, r24
    1322:	22 0f       	add	r18, r18
    1324:	33 1f       	adc	r19, r19
    1326:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:153
  y ^= y >> 5;
    1328:	39 27       	eor	r19, r25
    132a:	c9 01       	movw	r24, r18
    132c:	55 e0       	ldi	r21, 0x05	; 5
    132e:	96 95       	lsr	r25
    1330:	87 95       	ror	r24
    1332:	5a 95       	dec	r21
    1334:	e1 f7       	brne	.-8      	; 0x132e <rng8(unsigned int)+0x22>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:154
  y ^= y << 2;
    1336:	28 27       	eor	r18, r24
    1338:	39 27       	eor	r19, r25
    133a:	c9 01       	movw	r24, r18
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	82 27       	eor	r24, r18
    1346:	93 27       	eor	r25, r19
    1348:	80 93 10 34 	sts	0x3410, r24	; 0x803410 <rng8(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:156
  return (y);
}
    134c:	90 93 11 34 	sts	0x3411, r25	; 0x803411 <rng8(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:158
uint16_t rng8() {
  return rng8(0);
    1350:	08 95       	ret

00001352 <rng8()>:
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:138
}

// a=7 b=15 c=1 
uint16_t rng7(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    1356:	da cf       	rjmp	.-76     	; 0x130c <rng8(unsigned int)>

00001358 <rng7(unsigned int)>:
rng7():
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	21 f0       	breq	.+8      	; 0x1364 <rng7(unsigned int)+0xc>
    135c:	80 93 0e 34 	sts	0x340E, r24	; 0x80340e <rng7(unsigned int)::y>
    1360:	90 93 0f 34 	sts	0x340F, r25	; 0x80340f <rng7(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:139
  y ^= y << 7;
    1364:	80 91 0e 34 	lds	r24, 0x340E	; 0x80340e <rng7(unsigned int)::y>
    1368:	90 91 0f 34 	lds	r25, 0x340F	; 0x80340f <rng7(unsigned int)::y+0x1>
    136c:	9c 01       	movw	r18, r24
    136e:	36 95       	lsr	r19
    1370:	32 2f       	mov	r19, r18
    1372:	22 27       	eor	r18, r18
    1374:	37 95       	ror	r19
    1376:	27 95       	ror	r18
    1378:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:140
  y ^= y >> 15;
    137a:	39 27       	eor	r19, r25
    137c:	c9 01       	movw	r24, r18
    137e:	88 27       	eor	r24, r24
    1380:	99 0f       	add	r25, r25
    1382:	88 1f       	adc	r24, r24
    1384:	99 27       	eor	r25, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:141
  y ^= y << 1;
    1386:	28 27       	eor	r18, r24
    1388:	39 27       	eor	r19, r25
    138a:	c9 01       	movw	r24, r18
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	82 27       	eor	r24, r18
    1392:	93 27       	eor	r25, r19
    1394:	80 93 0e 34 	sts	0x340E, r24	; 0x80340e <rng7(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:143
  return (y);
}
    1398:	90 93 0f 34 	sts	0x340F, r25	; 0x80340f <rng7(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:145
uint16_t rng7() {
  return rng7(0);
    139c:	08 95       	ret

0000139e <rng7()>:
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:125
}

// a=6 b=15 c=1 
uint16_t rng6(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    13a2:	da cf       	rjmp	.-76     	; 0x1358 <rng7(unsigned int)>

000013a4 <rng6(unsigned int)>:
rng6():
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	21 f0       	breq	.+8      	; 0x13b0 <rng6(unsigned int)+0xc>
    13a8:	80 93 0c 34 	sts	0x340C, r24	; 0x80340c <rng6(unsigned int)::y>
    13ac:	90 93 0d 34 	sts	0x340D, r25	; 0x80340d <rng6(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:126
  y ^= y << 6;
    13b0:	80 91 0c 34 	lds	r24, 0x340C	; 0x80340c <rng6(unsigned int)::y>
    13b4:	90 91 0d 34 	lds	r25, 0x340D	; 0x80340d <rng6(unsigned int)::y+0x1>
    13b8:	9c 01       	movw	r18, r24
    13ba:	46 e0       	ldi	r20, 0x06	; 6
    13bc:	22 0f       	add	r18, r18
    13be:	33 1f       	adc	r19, r19
    13c0:	4a 95       	dec	r20
    13c2:	e1 f7       	brne	.-8      	; 0x13bc <rng6(unsigned int)+0x18>
    13c4:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:127
  y ^= y >> 15;
    13c6:	39 27       	eor	r19, r25
    13c8:	c9 01       	movw	r24, r18
    13ca:	88 27       	eor	r24, r24
    13cc:	99 0f       	add	r25, r25
    13ce:	88 1f       	adc	r24, r24
    13d0:	99 27       	eor	r25, r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:128
  y ^= y << 1;
    13d2:	28 27       	eor	r18, r24
    13d4:	39 27       	eor	r19, r25
    13d6:	c9 01       	movw	r24, r18
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	82 27       	eor	r24, r18
    13de:	93 27       	eor	r25, r19
    13e0:	80 93 0c 34 	sts	0x340C, r24	; 0x80340c <rng6(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:130
  return (y);
}
    13e4:	90 93 0d 34 	sts	0x340D, r25	; 0x80340d <rng6(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:132
uint16_t rng6() {
  return rng6(0);
    13e8:	08 95       	ret

000013ea <rng6()>:
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:112
}

// a=3 b=11 c=1 
uint16_t rng5(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    13ee:	da cf       	rjmp	.-76     	; 0x13a4 <rng6(unsigned int)>

000013f0 <rng5(unsigned int)>:
rng5():
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	21 f0       	breq	.+8      	; 0x13fc <rng5(unsigned int)+0xc>
    13f4:	80 93 0a 34 	sts	0x340A, r24	; 0x80340a <rng5(unsigned int)::y>
    13f8:	90 93 0b 34 	sts	0x340B, r25	; 0x80340b <rng5(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:113
  y ^= y << 3;
    13fc:	80 91 0a 34 	lds	r24, 0x340A	; 0x80340a <rng5(unsigned int)::y>
    1400:	90 91 0b 34 	lds	r25, 0x340B	; 0x80340b <rng5(unsigned int)::y+0x1>
    1404:	9c 01       	movw	r18, r24
    1406:	43 e0       	ldi	r20, 0x03	; 3
    1408:	22 0f       	add	r18, r18
    140a:	33 1f       	adc	r19, r19
    140c:	4a 95       	dec	r20
    140e:	e1 f7       	brne	.-8      	; 0x1408 <rng5(unsigned int)+0x18>
    1410:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:114
  y ^= y >> 11;
    1412:	39 27       	eor	r19, r25
    1414:	c9 01       	movw	r24, r18
    1416:	89 2f       	mov	r24, r25
    1418:	99 27       	eor	r25, r25
    141a:	86 95       	lsr	r24
    141c:	86 95       	lsr	r24
    141e:	86 95       	lsr	r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:115
  y ^= y << 1;
    1420:	28 27       	eor	r18, r24
    1422:	39 27       	eor	r19, r25
    1424:	c9 01       	movw	r24, r18
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	82 27       	eor	r24, r18
    142c:	93 27       	eor	r25, r19
    142e:	80 93 0a 34 	sts	0x340A, r24	; 0x80340a <rng5(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:117
  return (y);
}
    1432:	90 93 0b 34 	sts	0x340B, r25	; 0x80340b <rng5(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:119
uint16_t rng5() {
  return rng5(0);
    1436:	08 95       	ret

00001438 <rng5()>:
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:99
}

// a=11 b=7 c=1 
uint16_t rng4(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    143c:	d9 cf       	rjmp	.-78     	; 0x13f0 <rng5(unsigned int)>

0000143e <rng4(unsigned int)>:
rng4():
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	21 f0       	breq	.+8      	; 0x144a <rng4(unsigned int)+0xc>
    1442:	80 93 08 34 	sts	0x3408, r24	; 0x803408 <rng4(unsigned int)::y>
    1446:	90 93 09 34 	sts	0x3409, r25	; 0x803409 <rng4(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:100
  y ^= y << 11;
    144a:	80 91 08 34 	lds	r24, 0x3408	; 0x803408 <rng4(unsigned int)::y>
    144e:	90 91 09 34 	lds	r25, 0x3409	; 0x803409 <rng4(unsigned int)::y+0x1>
    1452:	9c 01       	movw	r18, r24
    1454:	32 2f       	mov	r19, r18
    1456:	22 27       	eor	r18, r18
    1458:	33 0f       	add	r19, r19
    145a:	33 0f       	add	r19, r19
    145c:	33 0f       	add	r19, r19
    145e:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:101
  y ^= y >> 7;
    1460:	39 27       	eor	r19, r25
    1462:	c9 01       	movw	r24, r18
    1464:	88 0f       	add	r24, r24
    1466:	89 2f       	mov	r24, r25
    1468:	88 1f       	adc	r24, r24
    146a:	99 0b       	sbc	r25, r25
    146c:	91 95       	neg	r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:102
  y ^= y << 1;
    146e:	28 27       	eor	r18, r24
    1470:	39 27       	eor	r19, r25
    1472:	c9 01       	movw	r24, r18
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	82 27       	eor	r24, r18
    147a:	93 27       	eor	r25, r19
    147c:	80 93 08 34 	sts	0x3408, r24	; 0x803408 <rng4(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:104
  return (y);
}
    1480:	90 93 09 34 	sts	0x3409, r25	; 0x803409 <rng4(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:106
uint16_t rng4() {
  return rng4(0);
    1484:	08 95       	ret

00001486 <rng4()>:
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:86
}

// a=4 b=7 c=1 
uint16_t rng3(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    148a:	d9 cf       	rjmp	.-78     	; 0x143e <rng4(unsigned int)>

0000148c <rng3(unsigned int)>:
rng3():
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	21 f0       	breq	.+8      	; 0x1498 <rng3(unsigned int)+0xc>
    1490:	80 93 06 34 	sts	0x3406, r24	; 0x803406 <rng3(unsigned int)::y>
    1494:	90 93 07 34 	sts	0x3407, r25	; 0x803407 <rng3(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:87
  y ^= y << 4;
    1498:	80 91 06 34 	lds	r24, 0x3406	; 0x803406 <rng3(unsigned int)::y>
    149c:	90 91 07 34 	lds	r25, 0x3407	; 0x803407 <rng3(unsigned int)::y+0x1>
    14a0:	9c 01       	movw	r18, r24
    14a2:	44 e0       	ldi	r20, 0x04	; 4
    14a4:	22 0f       	add	r18, r18
    14a6:	33 1f       	adc	r19, r19
    14a8:	4a 95       	dec	r20
    14aa:	e1 f7       	brne	.-8      	; 0x14a4 <rng3(unsigned int)+0x18>
    14ac:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:88
  y ^= y >> 7;
    14ae:	39 27       	eor	r19, r25
    14b0:	c9 01       	movw	r24, r18
    14b2:	88 0f       	add	r24, r24
    14b4:	89 2f       	mov	r24, r25
    14b6:	88 1f       	adc	r24, r24
    14b8:	99 0b       	sbc	r25, r25
    14ba:	91 95       	neg	r25
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:89
  y ^= y << 1;
    14bc:	28 27       	eor	r18, r24
    14be:	39 27       	eor	r19, r25
    14c0:	c9 01       	movw	r24, r18
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	82 27       	eor	r24, r18
    14c8:	93 27       	eor	r25, r19
    14ca:	80 93 06 34 	sts	0x3406, r24	; 0x803406 <rng3(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:91
  return (y);
}
    14ce:	90 93 07 34 	sts	0x3407, r25	; 0x803407 <rng3(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:93
uint16_t rng3() {
  return rng3(0);
    14d2:	08 95       	ret

000014d4 <rng3()>:
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:73
}

// a=2 b=5 c=1 
uint16_t rng2(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    14d8:	d9 cf       	rjmp	.-78     	; 0x148c <rng3(unsigned int)>

000014da <rng2(unsigned int)>:
rng2():
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	21 f0       	breq	.+8      	; 0x14e6 <rng2(unsigned int)+0xc>
    14de:	80 93 04 34 	sts	0x3404, r24	; 0x803404 <rng2(unsigned int)::y>
    14e2:	90 93 05 34 	sts	0x3405, r25	; 0x803405 <rng2(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:74
  y ^= y << 2;
    14e6:	80 91 04 34 	lds	r24, 0x3404	; 0x803404 <rng2(unsigned int)::y>
    14ea:	90 91 05 34 	lds	r25, 0x3405	; 0x803405 <rng2(unsigned int)::y+0x1>
    14ee:	9c 01       	movw	r18, r24
    14f0:	22 0f       	add	r18, r18
    14f2:	33 1f       	adc	r19, r19
    14f4:	22 0f       	add	r18, r18
    14f6:	33 1f       	adc	r19, r19
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:75
  y ^= y >> 5;
    14f8:	28 27       	eor	r18, r24
    14fa:	39 27       	eor	r19, r25
    14fc:	c9 01       	movw	r24, r18
    14fe:	55 e0       	ldi	r21, 0x05	; 5
    1500:	96 95       	lsr	r25
    1502:	87 95       	ror	r24
    1504:	5a 95       	dec	r21
    1506:	e1 f7       	brne	.-8      	; 0x1500 <rng2(unsigned int)+0x26>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:76
  y ^= y << 1;
    1508:	28 27       	eor	r18, r24
    150a:	39 27       	eor	r19, r25
    150c:	c9 01       	movw	r24, r18
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	82 27       	eor	r24, r18
    1514:	93 27       	eor	r25, r19
    1516:	80 93 04 34 	sts	0x3404, r24	; 0x803404 <rng2(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:78
  return (y);
}
    151a:	90 93 05 34 	sts	0x3405, r25	; 0x803405 <rng2(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:80
uint16_t rng2() {
  return rng2(0);
    151e:	08 95       	ret

00001520 <rng2()>:
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:60
}

// a=15 b=1 c=1 
uint16_t rng1(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    1524:	da cf       	rjmp	.-76     	; 0x14da <rng2(unsigned int)>

00001526 <rng1(unsigned int)>:
rng1():
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	21 f0       	breq	.+8      	; 0x1532 <rng1(unsigned int)+0xc>
    152a:	80 93 02 34 	sts	0x3402, r24	; 0x803402 <rng1(unsigned int)::y>
    152e:	90 93 03 34 	sts	0x3403, r25	; 0x803403 <rng1(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:61
  y ^= y << 15;
    1532:	80 91 02 34 	lds	r24, 0x3402	; 0x803402 <rng1(unsigned int)::y>
    1536:	90 91 03 34 	lds	r25, 0x3403	; 0x803403 <rng1(unsigned int)::y+0x1>
    153a:	9c 01       	movw	r18, r24
    153c:	33 27       	eor	r19, r19
    153e:	26 95       	lsr	r18
    1540:	37 95       	ror	r19
    1542:	22 27       	eor	r18, r18
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:62
  y ^= y >> 1;
    1544:	28 27       	eor	r18, r24
    1546:	39 27       	eor	r19, r25
    1548:	c9 01       	movw	r24, r18
    154a:	96 95       	lsr	r25
    154c:	87 95       	ror	r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:63
  y ^= y << 1;
    154e:	28 27       	eor	r18, r24
    1550:	39 27       	eor	r19, r25
    1552:	c9 01       	movw	r24, r18
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	82 27       	eor	r24, r18
    155a:	93 27       	eor	r25, r19
    155c:	80 93 02 34 	sts	0x3402, r24	; 0x803402 <rng1(unsigned int)::y>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:65
  return (y);
}
    1560:	90 93 03 34 	sts	0x3403, r25	; 0x803403 <rng1(unsigned int)::y+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:67
uint16_t rng1() {
  return rng1(0);
    1564:	08 95       	ret

00001566 <rng1()>:
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:47

}
// a=14 b=1 c=1 
uint16_t rng0(uint16_t seed) {
  static uint16_t y = 0;
  if (seed != 0) y = (seed);
    156a:	dd cf       	rjmp	.-70     	; 0x1526 <rng1(unsigned int)>

0000156c <rng0(unsigned int)>:
rng0():
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	21 f0       	breq	.+8      	; 0x1578 <rng0(unsigned int)+0xc>
    1570:	80 93 00 34 	sts	0x3400, r24	; 0x803400 <__DATA_REGION_ORIGIN__>
    1574:	90 93 01 34 	sts	0x3401, r25	; 0x803401 <__DATA_REGION_ORIGIN__+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:48
  y ^= y << 14;
    1578:	80 91 00 34 	lds	r24, 0x3400	; 0x803400 <__DATA_REGION_ORIGIN__>
    157c:	90 91 01 34 	lds	r25, 0x3401	; 0x803401 <__DATA_REGION_ORIGIN__+0x1>
    1580:	9c 01       	movw	r18, r24
    1582:	30 e4       	ldi	r19, 0x40	; 64
    1584:	23 9f       	mul	r18, r19
    1586:	30 2d       	mov	r19, r0
    1588:	22 27       	eor	r18, r18
    158a:	11 24       	eor	r1, r1
    158c:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:49
  y ^= y >> 1;
    158e:	39 27       	eor	r19, r25
    1590:	c9 01       	movw	r24, r18
    1592:	96 95       	lsr	r25
    1594:	87 95       	ror	r24
    1596:	28 27       	eor	r18, r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:50
  y ^= y << 1;
    1598:	39 27       	eor	r19, r25
    159a:	c9 01       	movw	r24, r18
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	82 27       	eor	r24, r18
    15a2:	93 27       	eor	r25, r19
    15a4:	80 93 00 34 	sts	0x3400, r24	; 0x803400 <__DATA_REGION_ORIGIN__>
    15a8:	90 93 01 34 	sts	0x3401, r25	; 0x803401 <__DATA_REGION_ORIGIN__+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:54
  return (y);
}
uint16_t rng0() {
  return rng0(0);
    15ac:	08 95       	ret

000015ae <rng0()>:
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	dc cf       	rjmp	.-72     	; 0x156c <rng0(unsigned int)>

000015b4 <initialize()>:
initialize():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:18
}
uint16_t (*rngseed_ptr[])(uint16_t) = {&rng0,&rng1,&rng2,&rng3,&rng4,&rng5,&rng6,&rng7,&rng8,&rng9,&rng10,&rng11,&rng12,&rng13,&rng14,&rng15,&rng16,&rng17,&rng18,&rng19,&rng20,&rng21,&rng22,&rng23,&rng24,&rng25,&rng26,&rng27,&rng28,&rng29,&rng30,&rng31,&rng32, &rng33,&rng34,&rng35,&rng36,&rng37,&rng38,&rng39,&rng40,&rng41,&rng42,&rng43,&rng44,&rng45,&rng46,&rng47,&rng48,&rng49,&rng50,&rng51,&rng52,&rng53,&rng54,&rng55,&rng56,&rng57,&rng58,&rng59};

uint16_t (*rng_ptr[])(void) = {&rng0,&rng1,&rng2,&rng3,&rng4,&rng5,&rng6,&rng7,&rng8,&rng9,&rng10,&rng11,&rng12,&rng13,&rng14,&rng15,&rng16,&rng17,&rng18,&rng19,&rng20,&rng21,&rng22,&rng23,&rng24,&rng25,&rng26,&rng27,&rng28,&rng29,&rng30,&rng31,&rng32, &rng33,&rng34,&rng35,&rng36,&rng37,&rng38,&rng39,&rng40,&rng41,&rng42,&rng43,&rng44,&rng45,&rng46,&rng47,&rng48,&rng49,&rng50,&rng51,&rng52,&rng53,&rng54,&rng55,&rng56,&rng57,&rng58,&rng59};

void initialize() {
    15b4:	cf 92       	push	r12
    15b6:	df 92       	push	r13
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
_analogReadEnh():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_analog.c:447
    ADC0.CTRLE = sampdur;
    return true;
  }

  int32_t _analogReadEnh(uint8_t pin, uint8_t neg, uint8_t res, uint8_t gain) {
    if (!(ADC0.CTRLA & 0x01)) return ADC_ENH_ERROR_DISABLED;
    15bc:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <rng_ptr+0x7f69d0>
initialize():
    15c0:	59 ef       	ldi	r21, 0xF9	; 249
    15c2:	c5 2e       	mov	r12, r21
    15c4:	5a e8       	ldi	r21, 0x8A	; 138
    15c6:	d5 2e       	mov	r13, r21
    15c8:	54 ed       	ldi	r21, 0xD4	; 212
    15ca:	e5 2e       	mov	r14, r21
    15cc:	52 e8       	ldi	r21, 0x82	; 130
    15ce:	f5 2e       	mov	r15, r21
_analogReadEnh():
    15d0:	80 ff       	sbrs	r24, 0
    15d2:	2e c0       	rjmp	.+92     	; 0x1630 <initialize()+0x7c>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_analog.c:492
      neg &= 0x3F;

    }
    pin &= 0x3F;

    if (ADC0.COMMAND & ADC_START_gm) return ADC_ENH_ERROR_BUSY;
    15d4:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <rng_ptr+0x7f69da>
    15d8:	87 70       	andi	r24, 0x07	; 7
initialize():
    15da:	cc 24       	eor	r12, r12
    15dc:	ca 94       	dec	r12
    15de:	4a e8       	ldi	r20, 0x8A	; 138
    15e0:	d4 2e       	mov	r13, r20
    15e2:	44 ed       	ldi	r20, 0xD4	; 212
    15e4:	e4 2e       	mov	r14, r20
    15e6:	42 e8       	ldi	r20, 0x82	; 130
    15e8:	f4 2e       	mov	r15, r20
_analogReadEnh():
    15ea:	81 11       	cpse	r24, r1
    15ec:	21 c0       	rjmp	.+66     	; 0x1630 <initialize()+0x7c>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_analog.c:502
        gainbits+=32;
      }
      ADC0.PGACTRL = (ADC0.PGACTRL & ~ADC_GAIN_gm) | gainbits | ADC_PGAEN_bm;
    }

    ADC0.MUXPOS = (gain ? ADC_VIA_PGA_gc:0) | pin;
    15ee:	84 e0       	ldi	r24, 0x04	; 4
    15f0:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <rng_ptr+0x7f69dc>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_analog.c:506
    if (neg != SINGLE_ENDED) {
      ADC0.MUXNEG = (gain ? ADC_VIA_PGA_gc:0) | neg;
    }
    ADC0.CTRLF = sampnum;
    15f4:	8a e0       	ldi	r24, 0x0A	; 10
    15f6:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <rng_ptr+0x7f69d9>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_analog.c:508
    uint8_t command = ((neg != SINGLE_ENDED)?0x80:0) | ((res == 8) ? ADC_MODE_SINGLE_8BIT_gc : (res > ADC_NATIVE_RESOLUTION ? ADC_MODE_BURST_gc : ADC_MODE_SINGLE_12BIT_gc)) | 1;
    ADC0.COMMAND = command;
    15fa:	81 e4       	ldi	r24, 0x41	; 65
    15fc:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <rng_ptr+0x7f69da>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_analog.c:509
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm));
    1600:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <rng_ptr+0x7f69d5>
    1604:	80 ff       	sbrs	r24, 0
    1606:	fc cf       	rjmp	.-8      	; 0x1600 <initialize()+0x4c>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_analog.c:510
    int32_t result = ADC0.RESULT;
    1608:	c0 90 10 06 	lds	r12, 0x0610	; 0x800610 <rng_ptr+0x7f69e0>
    160c:	d0 90 11 06 	lds	r13, 0x0611	; 0x800611 <rng_ptr+0x7f69e1>
    1610:	e0 90 12 06 	lds	r14, 0x0612	; 0x800612 <rng_ptr+0x7f69e2>
    1614:	f0 90 13 06 	lds	r15, 0x0613	; 0x800613 <rng_ptr+0x7f69e3>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_analog.c:515

    if (res < 0x80 && res > ADC_NATIVE_RESOLUTION) {
      uint8_t shift = res - ADC_NATIVE_RESOLUTION ; // - 1;
      while (shift) {
        result >>= 1;
    1618:	65 e0       	ldi	r22, 0x05	; 5
    161a:	f5 94       	asr	r15
    161c:	e7 94       	ror	r14
    161e:	d7 94       	ror	r13
    1620:	c7 94       	ror	r12
    1622:	6a 95       	dec	r22
    1624:	d1 f7       	brne	.-12     	; 0x161a <initialize()+0x66>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_analog.c:531
      result >>= shift;
    }

    // res > 0x80 (raw accumulate) or res == 8, res == 12 need no adjustment.
    if (_analog_options & 0x80) { // this bit controls autoshutoff of PGA.
      ADC0.PGACTRL &= ~ADC_PGAEN_bm;
    1626:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <rng_ptr+0x7f69db>
    162a:	8e 7f       	andi	r24, 0xFE	; 254
    162c:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <rng_ptr+0x7f69db>
initialize():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:38
  #endif
  //Serial.print("Initial seed is: ");
  //Serial.printHex(seedstart);
  //Serial.println();
  //Serial.print("First result is:");
  starttime=micros();
    1630:	0e 94 4f 01 	call	0x29e	; 0x29e <micros>
    1634:	60 93 7c 34 	sts	0x347C, r22	; 0x80347c <starttime>
    1638:	70 93 7d 34 	sts	0x347D, r23	; 0x80347d <starttime+0x1>
    163c:	80 93 7e 34 	sts	0x347E, r24	; 0x80347e <starttime+0x2>
    1640:	90 93 7f 34 	sts	0x347F, r25	; 0x80347f <starttime+0x3>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:26
  #if defined(CORE_HAS_ANALOG_ENH) && CORE_HAS_ANALOG_ENH
    seedstart = analogReadEnh(FLOATINGPIN,ADC_MAX_OVERSAMPLED_RESOLUTION);
    if (ADC_MAX_OVERSAMPLED_RESOLUTION == 15) {
      seedstart += analogReadEnh(FLOATINGPIN,ADC_MAX_OVERSAMPLED_RESOLUTION);
    } else if (ADC_MAX_OVERSAMPLED_RESOLUTION == 17 ) {
      seedstart >>= 1;
    1644:	d7 01       	movw	r26, r14
    1646:	c6 01       	movw	r24, r12
    1648:	b6 95       	lsr	r27
    164a:	a7 95       	ror	r26
    164c:	97 95       	ror	r25
    164e:	87 95       	ror	r24
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:39
  //Serial.print("Initial seed is: ");
  //Serial.printHex(seedstart);
  //Serial.println();
  //Serial.print("First result is:");
  starttime=micros();
  firstseed=(*rngseed_ptr[rngnbr])((uint16_t)seedstart);
    1650:	e0 91 86 34 	lds	r30, 0x3486	; 0x803486 <rngnbr>
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	ee 0f       	add	r30, r30
    1658:	ff 1f       	adc	r31, r31
    165a:	ec 59       	subi	r30, 0x9C	; 156
    165c:	f4 46       	sbci	r31, 0x64	; 100
    165e:	01 90       	ld	r0, Z+
    1660:	f0 81       	ld	r31, Z
    1662:	e0 2d       	mov	r30, r0
    1664:	09 95       	icall
    1666:	80 93 84 34 	sts	0x3484, r24	; 0x803484 <firstseed>
    166a:	90 93 85 34 	sts	0x3485, r25	; 0x803485 <firstseed+0x1>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:41
  //Serial.printHexln(firstseed);
  iterationcount++;
    166e:	80 91 80 34 	lds	r24, 0x3480	; 0x803480 <iterationcount>
    1672:	90 91 81 34 	lds	r25, 0x3481	; 0x803481 <iterationcount+0x1>
    1676:	a0 91 82 34 	lds	r26, 0x3482	; 0x803482 <iterationcount+0x2>
    167a:	b0 91 83 34 	lds	r27, 0x3483	; 0x803483 <iterationcount+0x3>
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	a1 1d       	adc	r26, r1
    1682:	b1 1d       	adc	r27, r1
    1684:	80 93 80 34 	sts	0x3480, r24	; 0x803480 <iterationcount>
    1688:	90 93 81 34 	sts	0x3481, r25	; 0x803481 <iterationcount+0x1>
    168c:	a0 93 82 34 	sts	0x3482, r26	; 0x803482 <iterationcount+0x2>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:43

}
    1690:	b0 93 83 34 	sts	0x3483, r27	; 0x803483 <iterationcount+0x3>
    1694:	ff 90       	pop	r15
    1696:	ef 90       	pop	r14
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:143
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    1698:	df 90       	pop	r13
    169a:	cf 90       	pop	r12
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:32
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

inline __attribute__((always_inline)) void check_valid_digital_pin(pin_size_t pin) {
  if (__builtin_constant_p(pin)) {
    169c:	08 95       	ret

0000169e <pinMode>:
pinMode():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:143
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    169e:	82 31       	cpi	r24, 0x12	; 18
    16a0:	f0 f4       	brcc	.+60     	; 0x16de <pinMode+0x40>
check_valid_digital_pin():
    16a2:	90 e0       	ldi	r25, 0x00	; 0
pinMode():
    16a4:	fc 01       	movw	r30, r24
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:144
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
    16a6:	e0 50       	subi	r30, 0x00	; 0
    16a8:	f4 46       	sbci	r31, 0x64	; 100
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:147
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
    16aa:	20 81       	ld	r18, Z
    16ac:	2f 3f       	cpi	r18, 0xFF	; 255
    16ae:	b9 f0       	breq	.+46     	; 0x16de <pinMode+0x40>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:137
  SREG=oldSREG; // re-enable interrupts
}

static inline uint8_t portToPortBaseOffset(uint8_t port);
static inline uint8_t portToPortBaseOffset(uint8_t port) {
  _SWAP(port);
    16b0:	fc 01       	movw	r30, r24
    16b2:	e2 51       	subi	r30, 0x12	; 18
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:138
  return port << 1;
    16b4:	f4 46       	sbci	r31, 0x64	; 100
portToPortBaseOffset():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:147
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
    16b6:	e0 81       	ld	r30, Z
    16b8:	e2 95       	swap	r30
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:148
  if (mode & 0x01) {
    16ba:	ee 0f       	add	r30, r30
pinMode():
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:150
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
    16be:	f4 60       	ori	r31, 0x04	; 4
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:161
    } else if (mode == 0) {
      *(port_base + 6) = bit_mask;
    }
    */
  }
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
    16c0:	61 30       	cpi	r22, 0x01	; 1
    16c2:	71 f4       	brne	.+28     	; 0x16e0 <pinMode+0x42>
    16c4:	21 83       	std	Z+1, r18	; 0x01
    16c6:	84 52       	subi	r24, 0x24	; 36
    16c8:	94 46       	sbci	r25, 0x64	; 100
    16ca:	dc 01       	movw	r26, r24
    16cc:	8c 91       	ld	r24, X
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:162
  bit_mask = *port_base;
    16ce:	80 61       	ori	r24, 0x10	; 16
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:163
  if (mode & 2) {
    16d0:	e8 0f       	add	r30, r24
    16d2:	f1 1d       	adc	r31, r1
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:164
    bit_mask |= 0x08;
    16d4:	80 81       	ld	r24, Z
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:168
  } else {
    bit_mask &= 0xF7;
  }
  *port_base = bit_mask;
    16d6:	61 30       	cpi	r22, 0x01	; 1
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:169
}
    16d8:	29 f0       	breq	.+10     	; 0x16e4 <pinMode+0x46>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:152
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
  if (mode & 0x01) {
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
  } else {
    *(port_base + 2) = bit_mask;
    16da:	88 60       	ori	r24, 0x08	; 8
    16dc:	80 83       	st	Z, r24
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring_digital.c:166
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
  bit_mask = *port_base;
  if (mode & 2) {
    bit_mask |= 0x08;
  } else {
    bit_mask &= 0xF7;
    16de:	08 95       	ret
    16e0:	22 83       	std	Z+2, r18	; 0x02
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART0.cpp:87
  #else
    ISR(USART0_DRE_vect, ISR_NAKED) {
      __asm__ __volatile__(
                "push  r30"    "\n\t"
                "push  r31"    "\n\t"
                :::);
    16e2:	f1 cf       	rjmp	.-30     	; 0x16c6 <pinMode+0x28>
    16e4:	87 7f       	andi	r24, 0xF7	; 247
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART0.cpp:94
#if PROGMEM_SIZE > 8192
                "jmp _do_dre"  "\n\t"
#else
                "rjmp _do_dre" "\n\t"
#endif
                ::"z"(&Serial));
    16e6:	fa cf       	rjmp	.-12     	; 0x16dc <pinMode+0x3e>

000016e8 <__vector_18>:
__vector_18():
    16e8:	ef 93       	push	r30
    16ea:	ff 93       	push	r31
    16ec:	e7 e8       	ldi	r30, 0x87	; 135
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART0.cpp:69
  #else
    ISR(USART0_RXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push      r30"     "\n\t"
            "push      r31"     "\n\t"
            :::);
    16ee:	f4 e3       	ldi	r31, 0x34	; 52
    16f0:	08 c0       	rjmp	.+16     	; 0x1702 <_do_dre()>

000016f2 <__vector_17>:
__vector_17():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART0.cpp:72
      __asm__ __volatile__(
            "jmp   _do_rxc"     "\n\t"
            ::"z"(&Serial));
    16f2:	ef 93       	push	r30
    16f4:	ff 93       	push	r31
    16f6:	e7 e8       	ldi	r30, 0x87	; 135
    16f8:	f4 e3       	ldi	r31, 0x34	; 52
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART0.cpp:42
    ISR(USART0_TXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push  r30"         "\n\t" // push the low byte of Z
            "ldi r30, 0x00"     "\n\t" // and put the low bit of this USART there - 0x20 * n
            "jmp _do_txc"      "\n\t" // _do_txc pushes the other necessary registers and loads 0x08 into the high byte.
            :::);
    16fa:	32 c0       	rjmp	.+100    	; 0x1760 <_do_rxc()>

000016fc <__vector_19>:
__vector_19():
    16fc:	ef 93       	push	r30
    16fe:	e0 e0       	ldi	r30, 0x00	; 0
    1700:	53 c0       	rjmp	.+166    	; 0x17a8 <_do_txc()>

00001702 <_do_dre()>:
_Z7_do_drev():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:309
          "out        0x3f,     r18"      "\n\t"  // restore SREG
          "pop         r18"               "\n\t"  // pop old r18
          "pop         r31"               "\n\t"  // pop the Z that the isr pushed.
          "pop         r30"               "\n\t"
          "reti"                          "\n"   // and RETI!
          ::);
    1702:	2f 93       	push	r18
    1704:	2f b7       	in	r18, 0x3f	; 63
    1706:	2f 93       	push	r18
    1708:	8f 93       	push	r24
    170a:	9f 93       	push	r25
    170c:	af 93       	push	r26
    170e:	bf 93       	push	r27
    1710:	68 94       	set

00001712 <_poll_dre>:
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	c0 85       	ldd	r28, Z+8	; 0x08
    171a:	d8 e0       	ldi	r29, 0x08	; 8
    171c:	90 89       	ldd	r25, Z+16	; 0x10
    171e:	df 01       	movw	r26, r30
    1720:	a9 0f       	add	r26, r25
    1722:	b2 1f       	adc	r27, r18
    1724:	af 5a       	subi	r26, 0xAF	; 175
    1726:	bf 4f       	sbci	r27, 0xFF	; 255
    1728:	8c 91       	ld	r24, X
    172a:	20 e4       	ldi	r18, 0x40	; 64
    172c:	2c 83       	std	Y+4, r18	; 0x04
    172e:	8a 83       	std	Y+2, r24	; 0x02
    1730:	9f 5f       	subi	r25, 0xFF	; 255
    1732:	9f 73       	andi	r25, 0x3F	; 63
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	27 85       	ldd	r18, Z+15	; 0x0f
    1738:	29 13       	cpse	r18, r25
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <_done_dre_irq>
    173c:	8f 7d       	andi	r24, 0xDF	; 223
    173e:	8d 83       	std	Y+5, r24	; 0x05

00001740 <_done_dre_irq>:
    1740:	90 8b       	std	Z+16, r25	; 0x10
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	16 f0       	brts	.+4      	; 0x174c <_done_dre_irq+0xc>
    1748:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_poll_dre_done>
    174c:	bf 91       	pop	r27
    174e:	af 91       	pop	r26
    1750:	9f 91       	pop	r25
    1752:	8f 91       	pop	r24
    1754:	2f 91       	pop	r18
    1756:	2f bf       	out	0x3f, r18	; 63
    1758:	2f 91       	pop	r18
    175a:	ff 91       	pop	r31
    175c:	ef 91       	pop	r30
    175e:	18 95       	reti

00001760 <_do_rxc()>:
_Z7_do_rxcv():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:177
            "out       0x3f,       r18"   "\n\t" // and write back
            "pop        r18"              "\n\t" // used as tail pointer and z known zero.
            "pop        r31"              "\n\t" // end with Z which the isr pushed to make room for
            "pop        r30"              "\n\t" // pointer to serial instance
            "reti"                        "\n"   // return
            ::);
    1760:	2f 93       	push	r18
    1762:	2f b7       	in	r18, 0x3f	; 63
    1764:	2f 93       	push	r18
    1766:	8f 93       	push	r24
    1768:	9f 93       	push	r25
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	c0 85       	ldd	r28, Z+8	; 0x08
    1770:	d8 e0       	ldi	r29, 0x08	; 8
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	98 81       	ld	r25, Y
    1776:	81 fd       	sbrc	r24, 1
    1778:	0d c0       	rjmp	.+26     	; 0x1794 <_end_rxc>
    177a:	c5 85       	ldd	r28, Z+13	; 0x0d
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	8c 0f       	add	r24, r28
    1780:	8f 73       	andi	r24, 0x3F	; 63
    1782:	26 85       	ldd	r18, Z+14	; 0x0e
    1784:	28 17       	cp	r18, r24
    1786:	31 f0       	breq	.+12     	; 0x1794 <_end_rxc>
    1788:	ce 0f       	add	r28, r30
    178a:	df 2f       	mov	r29, r31
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	d2 1f       	adc	r29, r18
    1790:	99 8b       	std	Y+17, r25	; 0x11
    1792:	85 87       	std	Z+13, r24	; 0x0d

00001794 <_end_rxc>:
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	9f 91       	pop	r25
    179a:	8f 91       	pop	r24
    179c:	2f 91       	pop	r18
    179e:	2f bf       	out	0x3f, r18	; 63
    17a0:	2f 91       	pop	r18
    17a2:	ff 91       	pop	r31
    17a4:	ef 91       	pop	r30
    17a6:	18 95       	reti

000017a8 <_do_txc()>:
_Z7_do_txcv():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:107
            "out     0x3f,      r24"  "\n\t"  // restore it
            "pop      r24"            "\n\t"  // pop r24 to get it's old value back
            "pop      r31"            "\n\t"  // and r31
            "pop      r30"            "\n\t"  // Pop the register the ISR did
            "reti"                    "\n"    // return from the interrupt.
            ::);
    17a8:	ff 93       	push	r31
    17aa:	8f 93       	push	r24
    17ac:	8f b7       	in	r24, 0x3f	; 63
    17ae:	8f 93       	push	r24
    17b0:	f8 e0       	ldi	r31, 0x08	; 8

000017b2 <_txc_flush_rx>:
    17b2:	80 81       	ld	r24, Z
    17b4:	84 81       	ldd	r24, Z+4	; 0x04
    17b6:	87 ff       	sbrs	r24, 7
    17b8:	fc cf       	rjmp	.-8      	; 0x17b2 <_txc_flush_rx>
    17ba:	85 81       	ldd	r24, Z+5	; 0x05
    17bc:	8f 7b       	andi	r24, 0xBF	; 191
    17be:	80 68       	ori	r24, 0x80	; 128
    17c0:	85 83       	std	Z+5, r24	; 0x05
    17c2:	8f 91       	pop	r24
    17c4:	8f bf       	out	0x3f, r24	; 63
    17c6:	8f 91       	pop	r24
    17c8:	ff 91       	pop	r31
    17ca:	ef 91       	pop	r30
    17cc:	18 95       	reti

000017ce <__vector_25>:
__vector_25():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:168
#elif defined(MILLIS_USE_TIMERB4)
  ISR(TCB4_INT_vect)
#else
  #error "No millis timer selected, but not disabled - cannot determine millis vector"
#endif
{
    17ce:	1f 92       	push	r1
    17d0:	0f 92       	push	r0
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	0f 92       	push	r0
    17d6:	11 24       	eor	r1, r1
    17d8:	8f 93       	push	r24
    17da:	9f 93       	push	r25
    17dc:	af 93       	push	r26
    17de:	bf 93       	push	r27
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:174
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)

  #if (defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1) || defined(MILLIS_USE_TIMERB2) || defined(MILLIS_USE_TIMERB3) || defined(MILLIS_USE_TIMERB4))
    #if (F_CPU > 2000000)
      timer_millis++; // that's all we need to do!
    17e0:	80 91 78 34 	lds	r24, 0x3478	; 0x803478 <timer_millis>
    17e4:	90 91 79 34 	lds	r25, 0x3479	; 0x803479 <timer_millis+0x1>
    17e8:	a0 91 7a 34 	lds	r26, 0x347A	; 0x80347a <timer_millis+0x2>
    17ec:	b0 91 7b 34 	lds	r27, 0x347B	; 0x80347b <timer_millis+0x3>
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	a1 1d       	adc	r26, r1
    17f4:	b1 1d       	adc	r27, r1
    17f6:	80 93 78 34 	sts	0x3478, r24	; 0x803478 <timer_millis>
    17fa:	90 93 79 34 	sts	0x3479, r25	; 0x803479 <timer_millis+0x1>
    17fe:	a0 93 7a 34 	sts	0x347A, r26	; 0x80347a <timer_millis+0x2>
    1802:	b0 93 7b 34 	sts	0x347B, r27	; 0x80347b <timer_millis+0x3>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:204
  #elif defined(MILLIS_USE_TIMERD0)
    TCD0.INTFLAGS = TCD_OVF_bm;
  #elif defined(MILLIS_USE_TIMERRTC)
    RTC.INTFLAGS = RTC_OVF_bm;
  #else // timerb
    _timer->INTFLAGS = TCB_CAPT_bm;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	80 93 96 0a 	sts	0x0A96, r24	; 0x800a96 <rng_ptr+0x7f6e66>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:206
  #endif
}
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	0f 90       	pop	r0
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	0f 90       	pop	r0
    181a:	1f 90       	pop	r1
    181c:	18 95       	reti

0000181e <Print::write(char const*) [clone .part.2] [clone .constprop.9]>:
_ZN5Print5writeEPKc.part.2():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.h:56
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
        return 0;
      }
      return write((const uint8_t *)str, strlen(str));
    181e:	fc 01       	movw	r30, r24
    1820:	01 90       	ld	r0, Z+
    1822:	00 20       	and	r0, r0
    1824:	e9 f7       	brne	.-6      	; 0x1820 <Print::write(char const*) [clone .part.2] [clone .constprop.9]+0x2>
    1826:	31 97       	sbiw	r30, 0x01	; 1
    1828:	af 01       	movw	r20, r30
    182a:	48 1b       	sub	r20, r24
    182c:	59 0b       	sbc	r21, r25
    182e:	bc 01       	movw	r22, r24
    1830:	87 e8       	ldi	r24, 0x87	; 135
    1832:	94 e3       	ldi	r25, 0x34	; 52
    1834:	0c 94 67 00 	jmp	0xce	; 0xce <Print::write(unsigned char const*, unsigned int)>

00001838 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.5]>:
printNumber():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:215
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    1838:	8f 92       	push	r8
    183a:	9f 92       	push	r9
    183c:	af 92       	push	r10
    183e:	bf 92       	push	r11
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	a1 97       	sbiw	r28, 0x21	; 33
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	de bf       	out	0x3e, r29	; 62
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:219
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1852:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:222

  // prevent crash if called with base == 1
  if (base < 2) {
    1854:	42 30       	cpi	r20, 0x02	; 2
    1856:	08 f4       	brcc	.+2      	; 0x185a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.5]+0x22>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:223
    base = 10;
    1858:	4a e0       	ldi	r20, 0x0A	; 10
    185a:	8e 01       	movw	r16, r28
    185c:	0f 5d       	subi	r16, 0xDF	; 223
    185e:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:227
  }

  do {
    char c = n % base;
    1860:	84 2e       	mov	r8, r20
    1862:	91 2c       	mov	r9, r1
    1864:	b1 2c       	mov	r11, r1
    1866:	a1 2c       	mov	r10, r1
    1868:	a5 01       	movw	r20, r10
    186a:	94 01       	movw	r18, r8
    186c:	38 d1       	rcall	.+624    	; 0x1ade <__udivmodsi4>
    186e:	e6 2f       	mov	r30, r22
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:228
    n /= base;
    1870:	b9 01       	movw	r22, r18
    1872:	ca 01       	movw	r24, r20
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:230

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1874:	ea 30       	cpi	r30, 0x0A	; 10
    1876:	d4 f4       	brge	.+52     	; 0x18ac <Print::printNumber(unsigned long, unsigned char) [clone .constprop.5]+0x74>
    1878:	e0 5d       	subi	r30, 0xD0	; 208
    187a:	d8 01       	movw	r26, r16
    187c:	ee 93       	st	-X, r30
    187e:	8d 01       	movw	r16, r26
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:231
  } while (n);
    1880:	23 2b       	or	r18, r19
    1882:	24 2b       	or	r18, r20
    1884:	25 2b       	or	r18, r21
    1886:	81 f7       	brne	.-32     	; 0x1868 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.5]+0x30>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.h:54
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
        return 0;
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	80 e0       	ldi	r24, 0x00	; 0
write():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.h:53
      setWriteError(0);
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
    188c:	10 97       	sbiw	r26, 0x00	; 0
    188e:	11 f0       	breq	.+4      	; 0x1894 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.5]+0x5c>
    1890:	cd 01       	movw	r24, r26
    1892:	c5 df       	rcall	.-118    	; 0x181e <Print::write(char const*) [clone .part.2] [clone .constprop.9]>
printNumber():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:234

  return write(str);
}
    1894:	a1 96       	adiw	r28, 0x21	; 33
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	bf 90       	pop	r11
    18a4:	af 90       	pop	r10
    18a6:	9f 90       	pop	r9
    18a8:	8f 90       	pop	r8
    18aa:	08 95       	ret
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:230

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    18ac:	e9 5c       	subi	r30, 0xC9	; 201
    18ae:	e5 cf       	rjmp	.-54     	; 0x187a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.5]+0x42>

000018b0 <main>:
init_clock():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:1329
    #if (defined(CLOCK_TUNE_INTERNAL))
      tune_internal(); // Will be inlined as only called once. Just too long and ugly to put two implementations in middle of this.
    #else
      #if (F_CPU == 20000000)
        /* No division on clock */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, 0x00);
    18b0:	88 ed       	ldi	r24, 0xD8	; 216
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	84 bf       	out	0x34, r24	; 52
    18b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <rng_ptr+0x7f6431>
init_ADC0():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:1491
    #elif F_CPU  >= 30000000            // 32 MHz /12 = 2.67 MHz
      ADC0.CTRLB  = ADC_PRESC_DIV12_gc; // 30 MHz /12 = 2.50 MHz
    #elif F_CPU  >= 24000000            // 25 MHz /10 = 2.50 MHz
      ADC0.CTRLB  = ADC_PRESC_DIV10_gc; // 24 MHz /10 = 2.40 MHz
    #elif F_CPU  >= 20000000
      ADC0.CTRLB  = ADC_PRESC_DIV8_gc;  // 20 MHz / 8 = 2.50 MHz
    18ba:	83 e0       	ldi	r24, 0x03	; 3
    18bc:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <rng_ptr+0x7f69d1>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:1501
    #elif F_CPU  >=  6000000            // 10 MHz / 4 = 2.50 MHz
      ADC0.CTRLB  = ADC_PRESC_DIV4_gc;  //  8 MHz / 4 = 2.00 MHz
    #else                               //  5 MHz / 2 = 2.50 MHz
      ADC0.CTRLB  = ADC_PRESC_DIV2_gc;  //  4 MHz / 2 = 2.00 MHz
    #endif                              //  1 MHz / 2 =  500 kHz
    ADC0.CTRLE = 15; // 15.5 without PGA, 16 with PGA, corresponding to 7.75 or 8 us.
    18c0:	9f e0       	ldi	r25, 0x0F	; 15
    18c2:	90 93 08 06 	sts	0x0608, r25	; 0x800608 <rng_ptr+0x7f69d8>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:1502
    ADC0.CTRLA = ADC_ENABLE_bm | ADC_LOWLAT_bm;
    18c6:	91 e2       	ldi	r25, 0x21	; 33
    18c8:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <rng_ptr+0x7f69d0>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:1507
    /* Default low latency mode on
     * Users can turn it off if they care about power consumption while ADC is on
     * and chip is awake, since these parts don't have the perverse ADC-left-on
     * behavior of classic AVRs. */
    ADC0.CTRLC = TIMEBASE_1US; // defined in Arduino.h.
    18cc:	90 ea       	ldi	r25, 0xA0	; 160
    18ce:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <rng_ptr+0x7f69d2>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:1508
    ADC0.PGACTRL = ADC_PGABIASSEL_3_4X_gc | ADC_ADCPGASAMPDUR_15CLK_gc;
    18d2:	9a e0       	ldi	r25, 0x0A	; 10
    18d4:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <rng_ptr+0x7f69db>
init_TCA0():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:1571
  #ifdef __AVR_ATtinyxy2__
    PORTMUX.CTRLC = 1; // move WO0 output to PA7 so PA3 can be used with WO3
  #endif

  /* Enable Split Mode */
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
    18d8:	91 e0       	ldi	r25, 0x01	; 1
    18da:	90 93 03 0a 	sts	0x0A03, r25	; 0x800a03 <rng_ptr+0x7f6dd3>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:1576

  // Only 1 WGM so no need to specifically set up.

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
    18de:	2e ef       	ldi	r18, 0xFE	; 254
    18e0:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <rng_ptr+0x7f6df6>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:1577
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
    18e4:	20 93 27 0a 	sts	0x0A27, r18	; 0x800a27 <rng_ptr+0x7f6df7>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:1604
    TCA0.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) // use 64 divider unless it's 5 MHz or under
    #if defined(MILLIS_USE_TIMERA0) && (TIME_TRACKING_TIMER_DIVIDER != 64)
      #error "wiring.c and timers.h want to set millis timer TCA0 to different divider"
    #endif
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
    18e8:	2b e0       	ldi	r18, 0x0B	; 11
    18ea:	20 93 00 0a 	sts	0x0A00, r18	; 0x800a00 <rng_ptr+0x7f6dd0>
init_millis():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:1255
        // RTC.CLKSEL=0; this is the power on value
      #endif
      RTC.INTCTRL         = 0x01; // enable overflow interrupt
      RTC.CTRLA           = (RTC_RUNSTDBY_bm|RTC_RTCEN_bm|RTC_PRESCALER_DIV32_gc);//fire it up, prescale by 32.
    #else // It's a type b timer - we have already errored out if that wasn't defined
      _timer->CCMP = TIME_TRACKING_TIMER_PERIOD;
    18ee:	2f e0       	ldi	r18, 0x0F	; 15
    18f0:	37 e2       	ldi	r19, 0x27	; 39
    18f2:	20 93 9c 0a 	sts	0x0A9C, r18	; 0x800a9c <rng_ptr+0x7f6e6c>
    18f6:	30 93 9d 0a 	sts	0x0A9D, r19	; 0x800a9d <rng_ptr+0x7f6e6d>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:1257
      // Enable timer interrupt, but clear the rest of register
      _timer->INTCTRL = TCB_CAPT_bm;
    18fa:	90 93 95 0a 	sts	0x0A95, r25	; 0x800a95 <rng_ptr+0x7f6e65>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:1259
      // Clear timer mode (since it will have been set as PWM by init())
      _timer->CTRLB = 0;
    18fe:	10 92 91 0a 	sts	0x0A91, r1	; 0x800a91 <rng_ptr+0x7f6e61>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:1261
      // CLK_PER/1 is 0b00,. CLK_PER/2 is 0b01, so bitwise OR of valid divider with enable works
      _timer->CTRLA = TIME_TRACKING_TIMER_DIVIDER|TCB_ENABLE_bm;  // Keep this last before enabling interrupts to ensure tracking as accurate as possible
    1902:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <rng_ptr+0x7f6e60>
init():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/wiring.c:1310
    init_millis();
  #endif
  /*************************** ENABLE GLOBAL INTERRUPTS *************************/
  // Finally, after everything is initialized, we go ahead and enable interrupts.
  if (onAfterInit()) {
    sei();
    1906:	78 94       	sei
begin():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:469
    }

    void UartClass::begin(unsigned long baud, uint16_t options) {
      // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
      // without first calling end()
      if (_state & 1) {
    1908:	80 91 93 34 	lds	r24, 0x3493	; 0x803493 <Serial+0xc>
    190c:	80 ff       	sbrs	r24, 0
    190e:	14 c0       	rjmp	.+40     	; 0x1938 <main+0x88>
end():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:598
      */
    }

    void UartClass::end() {
      // wait for transmission of outgoing data
      flush();
    1910:	87 e8       	ldi	r24, 0x87	; 135
    1912:	94 e3       	ldi	r25, 0x34	; 52
    1914:	0e 94 3b 01 	call	0x276	; 0x276 <UartClass::flush()>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:601
      // Disable receiver and transmitter as well as the RX complete and the data register empty interrupts.
      // TXCIE only used in half duplex - we can just turn the damned thing off yo!
      volatile USART_t * temp = _hwserial_module; /* compiler does a slightly better job with this. */
    1918:	e0 91 8f 34 	lds	r30, 0x348F	; 0x80348f <Serial+0x8>
    191c:	f0 91 90 34 	lds	r31, 0x3490	; 0x803490 <Serial+0x9>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:602
      temp -> CTRLB &= 0; //~(USART_RXEN_bm | USART_TXEN_bm);
    1920:	86 81       	ldd	r24, Z+6	; 0x06
    1922:	16 82       	std	Z+6, r1	; 0x06
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:603
      temp -> CTRLA &= 0; //~(USART_RXCIE_bm | USART_DREIE_bm | USART_TXCIE_bm);
    1924:	85 81       	ldd	r24, Z+5	; 0x05
    1926:	15 82       	std	Z+5, r1	; 0x05
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:604
      temp -> STATUS =  USART_TXCIF_bm; // want to make sure no chanceofthat firing in error. TXCIE only used in half duplex
    1928:	80 e4       	ldi	r24, 0x40	; 64
    192a:	84 83       	std	Z+4, r24	; 0x04
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:606
      // clear any received data
      _rx_buffer_head = _rx_buffer_tail;
    192c:	80 91 95 34 	lds	r24, 0x3495	; 0x803495 <Serial+0xe>
    1930:	80 93 94 34 	sts	0x3494, r24	; 0x803494 <Serial+0xd>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:610

      // Note: Does not change output pins
      // though the datasheetsays turning the TX module sets it to input.
      _state = 0;
    1934:	10 92 93 34 	sts	0x3493, r1	; 0x803493 <Serial+0xc>
begin():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:508
        setpinmask             |= 0x10;         // this tells _set_pins not to disturb the configuration on the RX pin.
      }
      if (ctrla & USART_RS485_bm) {             // RS485 mode recorded here too... because we need to set
        setpinmask             |= 0x01;         // set pin output if we need to do that. Datasheet isn't clear
      }
      uint8_t oldSREG = SREG;
    1938:	ff b6       	in	r15, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:509
      cli();
    193a:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:510
      volatile USART_t* MyUSART = _hwserial_module;
    193c:	e0 91 8f 34 	lds	r30, 0x348F	; 0x80348f <Serial+0x8>
    1940:	f0 91 90 34 	lds	r31, 0x3490	; 0x803490 <Serial+0x9>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:511
      (*MyUSART).CTRLB          = 0;            // gotta disable first - some things are enable-locked.
    1944:	16 82       	std	Z+6, r1	; 0x06
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:512
      (*MyUSART).CTRLC          = ctrlc;        // No reason not to set first.
    1946:	83 e0       	ldi	r24, 0x03	; 3
    1948:	87 83       	std	Z+7, r24	; 0x07
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:513
      (*MyUSART).BAUD           = baud_setting; // Wish I could have set it long ago
    194a:	8d ea       	ldi	r24, 0xAD	; 173
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	80 87       	std	Z+8, r24	; 0x08
    1950:	91 87       	std	Z+9, r25	; 0x09
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:519
      if (ctrla & 0x20) {                       // Now we have to do a bit of work
        setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
        (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
        (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
      } else {
        (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
    1952:	14 86       	std	Z+12, r1	; 0x0c
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:521
      }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
      (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
    1954:	80 e8       	ldi	r24, 0x80	; 128
    1956:	85 83       	std	Z+5, r24	; 0x05
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:522
      (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
    1958:	80 ec       	ldi	r24, 0xC0	; 192
    195a:	86 83       	std	Z+6, r24	; 0x06
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:523
      _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
    195c:	90 91 92 34 	lds	r25, 0x3492	; 0x803492 <Serial+0xb>
    1960:	c0 91 91 34 	lds	r28, 0x3491	; 0x803491 <Serial+0xa>
_set_pins():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:530
    }

    void UartClass::_set_pins(uint8_t mod_nbr, uint8_t mux_set, uint8_t enmask) {
      // Set the mux register
      #if defined(PORTMUX_USARTROUTEA)
        uint8_t muxregval    = PORTMUX.USARTROUTEA;
    1964:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <rng_ptr+0x7f69b2>
main():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:531
        muxregval           &= ~(mod_nbr ? 0x0C : 0x03);
    1968:	23 ef       	ldi	r18, 0xF3	; 243
_set_pins():
    196a:	c1 11       	cpse	r28, r1
    196c:	01 c0       	rjmp	.+2      	; 0x1970 <main+0xc0>
main():
    196e:	2c ef       	ldi	r18, 0xFC	; 252
_set_pins():
    1970:	82 23       	and	r24, r18
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:532
        PORTMUX.USARTROUTEA  = (muxregval) | (mux_set << (mod_nbr ? 2 : 0)); // shift muxset left if needed.
    1972:	29 2f       	mov	r18, r25
    1974:	30 e0       	ldi	r19, 0x00	; 0
main():
    1976:	42 e0       	ldi	r20, 0x02	; 2
_set_pins():
    1978:	c1 11       	cpse	r28, r1
    197a:	01 c0       	rjmp	.+2      	; 0x197e <main+0xce>
main():
    197c:	40 e0       	ldi	r20, 0x00	; 0
_set_pins():
    197e:	b9 01       	movw	r22, r18
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <main+0xd6>
    1982:	66 0f       	add	r22, r22
    1984:	77 1f       	adc	r23, r23
    1986:	4a 95       	dec	r20
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <main+0xd2>
    198a:	86 2b       	or	r24, r22
    198c:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <rng_ptr+0x7f69b2>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:542
        } else {
          PORTMUX.CTRLB       &= 0xFE;
        }
      #endif
      #if MEGATINYCORE_SERIES == 2
        if (mux_set == 3) { // not connected to pins...
    1990:	93 30       	cpi	r25, 0x03	; 3
    1992:	79 f0       	breq	.+30     	; 0x19b2 <main+0x102>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:546
          return;           // so we are done!
        }
      #endif
      const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
    1994:	c2 0f       	add	r28, r18
    1996:	d3 2f       	mov	r29, r19
    1998:	d1 1d       	adc	r29, r1
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:548
      if ((enmask & 0x40 && !(enmask & 0x08))) {
        pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
    199a:	cc 0f       	add	r28, r28
    199c:	dd 1f       	adc	r29, r29
    199e:	cc 0f       	add	r28, r28
    19a0:	dd 1f       	adc	r29, r29
    19a2:	cc 5d       	subi	r28, 0xDC	; 220
    19a4:	d3 46       	sbci	r29, 0x63	; 99
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	88 81       	ld	r24, Y
    19aa:	79 de       	rcall	.-782    	; 0x169e <pinMode>
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:555
        // TX should be INPUT_PULLUP.
        pinMode(muxrow[0], INPUT_PULLUP);
      }
      if (enmask & 0x80 && !(enmask & 0x10)) {
        // Likewise if RX is enabled, unless loopback mode is too (in which case we caught it above, it should be pulled up
        pinMode(muxrow[1], INPUT_PULLUP);
    19ac:	62 e0       	ldi	r22, 0x02	; 2
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	76 de       	rcall	.-788    	; 0x169e <pinMode>
begin():
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART.cpp:524
        (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
      }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
      (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
      (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
      _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
      SREG = oldSREG;                             // re-enable interrupts, and we're done.
    19b2:	ff be       	out	0x3f, r15	; 63
setup():
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:12
uint8_t rngnbr = 0;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(460800);
  initialize();
    19b4:	ff dd       	rcall	.-1026   	; 0x15b4 <initialize()>
loop():
    19b6:	cc 24       	eor	r12, r12
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:832
  if (rval == firstseed && iterationcount > 1) {
    uint32_t endtime=micros();
    Serial.print(rngnbr);
    Serial.print(", ");
    uint32_t timeelapsed=endtime-starttime;
    Serial.print(timeelapsed*(F_CPU/1000000)/65535);
    19b8:	ca 94       	dec	r12
    19ba:	dc 2c       	mov	r13, r12
    19bc:	e1 2c       	mov	r14, r1
    19be:	f1 2c       	mov	r15, r1
    19c0:	88 24       	eor	r8, r8
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:835
    Serial.println(" clocks");
    rngnbr++;
    iterationcount = -1;
    19c2:	8a 94       	dec	r8
    19c4:	98 2c       	mov	r9, r8
    19c6:	54 01       	movw	r10, r8
    19c8:	e0 91 86 34 	lds	r30, 0x3486	; 0x803486 <rngnbr>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:825
uint16_t rng59() {
  return rng59(0);
}

void loop() {
  uint16_t rval = (*rng_ptr[rngnbr])();
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	ee 0f       	add	r30, r30
    19d0:	ff 1f       	adc	r31, r31
    19d2:	e0 5d       	subi	r30, 0xD0	; 208
    19d4:	f3 46       	sbci	r31, 0x63	; 99
    19d6:	01 90       	ld	r0, Z+
    19d8:	f0 81       	ld	r31, Z
    19da:	e0 2d       	mov	r30, r0
    19dc:	09 95       	icall
    19de:	20 91 84 34 	lds	r18, 0x3484	; 0x803484 <firstseed>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:827
  //Serial.printHexln(rval);
  if (rval == firstseed && iterationcount > 1) {
    19e2:	30 91 85 34 	lds	r19, 0x3485	; 0x803485 <firstseed+0x1>
    19e6:	82 17       	cp	r24, r18
    19e8:	93 07       	cpc	r25, r19
    19ea:	09 f0       	breq	.+2      	; 0x19ee <main+0x13e>
    19ec:	48 c0       	rjmp	.+144    	; 0x1a7e <main+0x1ce>
    19ee:	80 91 80 34 	lds	r24, 0x3480	; 0x803480 <iterationcount>
    19f2:	90 91 81 34 	lds	r25, 0x3481	; 0x803481 <iterationcount+0x1>
    19f6:	a0 91 82 34 	lds	r26, 0x3482	; 0x803482 <iterationcount+0x2>
    19fa:	b0 91 83 34 	lds	r27, 0x3483	; 0x803483 <iterationcount+0x3>
    19fe:	02 97       	sbiw	r24, 0x02	; 2
    1a00:	a1 05       	cpc	r26, r1
    1a02:	b1 05       	cpc	r27, r1
    1a04:	08 f4       	brcc	.+2      	; 0x1a08 <main+0x158>
    1a06:	3b c0       	rjmp	.+118    	; 0x1a7e <main+0x1ce>
    1a08:	c0 91 86 34 	lds	r28, 0x3486	; 0x803486 <rngnbr>
    1a0c:	0e 94 4f 01 	call	0x29e	; 0x29e <micros>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:828
    uint32_t endtime=micros();
    1a10:	2b 01       	movw	r4, r22
    1a12:	3c 01       	movw	r6, r24
print():
    1a14:	6c 2f       	mov	r22, r28
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:75
size_t Print::print(char c) {
  return write(c);
}

size_t Print::print(unsigned char b, int base) {
  return print((unsigned long) b, base);
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:105

size_t Print::print(unsigned long n, int base) {
  if (base == 0) {
    return write(n);
  } else {
    return printNumber(n, base);
    1a1c:	4a e0       	ldi	r20, 0x0A	; 10
    1a1e:	0c df       	rcall	.-488    	; 0x1838 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.5]>
write():
    1a20:	88 ea       	ldi	r24, 0xA8	; 168
    1a22:	9c e9       	ldi	r25, 0x9C	; 156
    1a24:	fc de       	rcall	.-520    	; 0x181e <Print::write(char const*) [clone .part.2] [clone .constprop.9]>
loop():
    1a26:	80 91 7c 34 	lds	r24, 0x347C	; 0x80347c <starttime>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:831
    Serial.print(rngnbr);
    Serial.print(", ");
    uint32_t timeelapsed=endtime-starttime;
    1a2a:	90 91 7d 34 	lds	r25, 0x347D	; 0x80347d <starttime+0x1>
    1a2e:	a0 91 7e 34 	lds	r26, 0x347E	; 0x80347e <starttime+0x2>
    1a32:	b0 91 7f 34 	lds	r27, 0x347F	; 0x80347f <starttime+0x3>
    1a36:	a3 01       	movw	r20, r6
    1a38:	92 01       	movw	r18, r4
    1a3a:	28 1b       	sub	r18, r24
    1a3c:	39 0b       	sbc	r19, r25
    1a3e:	4a 0b       	sbc	r20, r26
    1a40:	5b 0b       	sbc	r21, r27
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:832
    Serial.print(timeelapsed*(F_CPU/1000000)/65535);
    1a42:	a4 e1       	ldi	r26, 0x14	; 20
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	6d d0       	rcall	.+218    	; 0x1b22 <__muluhisi3>
    1a48:	a7 01       	movw	r20, r14
    1a4a:	96 01       	movw	r18, r12
    1a4c:	48 d0       	rcall	.+144    	; 0x1ade <__udivmodsi4>
    1a4e:	ca 01       	movw	r24, r20
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.cpp:105
    1a50:	b9 01       	movw	r22, r18
print():
    1a52:	4a e0       	ldi	r20, 0x0A	; 10
    1a54:	f1 de       	rcall	.-542    	; 0x1838 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.5]>
write():
    1a56:	8b ea       	ldi	r24, 0xAB	; 171
    1a58:	9c e9       	ldi	r25, 0x9C	; 156
    1a5a:	e1 de       	rcall	.-574    	; 0x181e <Print::write(char const*) [clone .part.2] [clone .constprop.9]>
    1a5c:	83 eb       	ldi	r24, 0xB3	; 179
    1a5e:	9c e9       	ldi	r25, 0x9C	; 156
    1a60:	de de       	rcall	.-580    	; 0x181e <Print::write(char const*) [clone .part.2] [clone .constprop.9]>
loop():
    1a62:	80 91 86 34 	lds	r24, 0x3486	; 0x803486 <rngnbr>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:834
    Serial.println(" clocks");
    rngnbr++;
    1a66:	8f 5f       	subi	r24, 0xFF	; 255
    1a68:	80 93 86 34 	sts	0x3486, r24	; 0x803486 <rngnbr>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:835
    iterationcount = -1;
    1a6c:	80 92 80 34 	sts	0x3480, r8	; 0x803480 <iterationcount>
    1a70:	90 92 81 34 	sts	0x3481, r9	; 0x803481 <iterationcount+0x1>
    1a74:	a0 92 82 34 	sts	0x3482, r10	; 0x803482 <iterationcount+0x2>
    1a78:	b0 92 83 34 	sts	0x3483, r11	; 0x803483 <iterationcount+0x3>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:836
    initialize();
    1a7c:	9b dd       	rcall	.-1226   	; 0x15b4 <initialize()>
    1a7e:	80 91 86 34 	lds	r24, 0x3486	; 0x803486 <rngnbr>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:838
  }
  if (rngnbr==60) while (1);
    1a82:	8c 33       	cpi	r24, 0x3C	; 60
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <main+0x1d8>
    1a86:	ff cf       	rjmp	.-2      	; 0x1a86 <main+0x1d6>
    1a88:	80 91 80 34 	lds	r24, 0x3480	; 0x803480 <iterationcount>
C:\Users\Spence\Documents\Arduino\16bitxorshift_speed/16bitxorshift_speed.ino:839
  iterationcount++;
    1a8c:	90 91 81 34 	lds	r25, 0x3481	; 0x803481 <iterationcount+0x1>
    1a90:	a0 91 82 34 	lds	r26, 0x3482	; 0x803482 <iterationcount+0x2>
    1a94:	b0 91 83 34 	lds	r27, 0x3483	; 0x803483 <iterationcount+0x3>
    1a98:	01 96       	adiw	r24, 0x01	; 1
    1a9a:	a1 1d       	adc	r26, r1
    1a9c:	b1 1d       	adc	r27, r1
    1a9e:	80 93 80 34 	sts	0x3480, r24	; 0x803480 <iterationcount>
    1aa2:	90 93 81 34 	sts	0x3481, r25	; 0x803481 <iterationcount+0x1>
    1aa6:	a0 93 82 34 	sts	0x3482, r26	; 0x803482 <iterationcount+0x2>
    1aaa:	b0 93 83 34 	sts	0x3483, r27	; 0x803483 <iterationcount+0x3>
    1aae:	8c cf       	rjmp	.-232    	; 0x19c8 <main+0x118>

00001ab0 <_GLOBAL__sub_I___vector_19>:
_ZN5PrintC2Ev():
    1ab0:	e7 e8       	ldi	r30, 0x87	; 135
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Print.h:42
  protected:
    void setWriteError(int err = 1) {
      write_error = err;
    }
  public:
    Print() : write_error(0) {}
    1ab2:	f4 e3       	ldi	r31, 0x34	; 52
    1ab4:	12 82       	std	Z+2, r1	; 0x02
    1ab6:	13 82       	std	Z+3, r1	; 0x03
_ZN6StreamC2Ev():
    1ab8:	88 ee       	ldi	r24, 0xE8	; 232
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore\api/Stream.h:63
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {
      _timeout = 1000;
    1aba:	93 e0       	ldi	r25, 0x03	; 3
    1abc:	a0 e0       	ldi	r26, 0x00	; 0
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	84 83       	std	Z+4, r24	; 0x04
    1ac2:	95 83       	std	Z+5, r25	; 0x05
    1ac4:	a6 83       	std	Z+6, r26	; 0x06
    1ac6:	b7 83       	std	Z+7, r27	; 0x07
_ZN9UartClassC2EPV12USART_structhh():
    1ac8:	86 e1       	ldi	r24, 0x16	; 22
C:\Users\Spence\Documents\Arduino\hardware\megaTinyCore\megaavr\cores\megatinycore/UART_private.h:19

#if defined(USART0) || defined(USART1)
/* Significant changes in UART.cpp, UART.h, and UART_swap.h required to support more UARTs */

UartClass::UartClass(volatile USART_t *hwserial_module, uint8_t module_number, uint8_t mux_default) :
    _hwserial_module(hwserial_module), _module_number(module_number), _pin_set(mux_default) {
    1aca:	9c e9       	ldi	r25, 0x9C	; 156
    1acc:	80 83       	st	Z, r24
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	98 e0       	ldi	r25, 0x08	; 8
    1ad4:	80 87       	std	Z+8, r24	; 0x08
    1ad6:	91 87       	std	Z+9, r25	; 0x09
    1ad8:	12 86       	std	Z+10, r1	; 0x0a
    1ada:	13 86       	std	Z+11, r1	; 0x0b
_GLOBAL__sub_I___vector_19():
    1adc:	08 95       	ret

00001ade <__udivmodsi4>:
__udivmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1ade:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1ae0:	1a 2e       	mov	r1, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1ae2:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1ae4:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1ae6:	fd 01       	movw	r30, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1ae8:	0d c0       	rjmp	.+26     	; 0x1b04 <__udivmodsi4_ep>

00001aea <__udivmodsi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1aea:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1aec:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1aee:	ee 1f       	adc	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1af0:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1af2:	a2 17       	cp	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1af4:	b3 07       	cpc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1af6:	e4 07       	cpc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1af8:	f5 07       	cpc	r31, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1afa:	20 f0       	brcs	.+8      	; 0x1b04 <__udivmodsi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1afc:	a2 1b       	sub	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1afe:	b3 0b       	sbc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1b00:	e4 0b       	sbc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1b02:	f5 0b       	sbc	r31, r21

00001b04 <__udivmodsi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1b04:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1b06:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1b08:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1b0a:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1b0c:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1b0e:	69 f7       	brne	.-38     	; 0x1aea <__udivmodsi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1b10:	60 95       	com	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1b12:	70 95       	com	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1b14:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1b16:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1b18:	9b 01       	movw	r18, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1b1a:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1b1c:	bd 01       	movw	r22, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1b1e:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1b20:	08 95       	ret

00001b22 <__muluhisi3>:
__muluhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    1b22:	0f d0       	rcall	.+30     	; 0x1b42 <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1b24:	a5 9f       	mul	r26, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    1b26:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    1b28:	b4 9f       	mul	r27, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    1b2a:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    1b2c:	a4 9f       	mul	r26, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    1b2e:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    1b30:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1b32:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1b34:	08 95       	ret

00001b36 <__tablejump2__>:
__tablejump2__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1b36:	ee 0f       	add	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1b38:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1b3a:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1b3c:	f4 91       	lpm	r31, Z
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1b3e:	e0 2d       	mov	r30, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1b40:	09 94       	ijmp

00001b42 <__umulhisi3>:
__umulhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1b42:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1b44:	b0 01       	movw	r22, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    1b46:	b3 9f       	mul	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    1b48:	c0 01       	movw	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    1b4a:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    1b4c:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    1b4e:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    1b50:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1b52:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1b54:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    1b56:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    1b58:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    1b5a:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    1b5c:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    1b5e:	08 95       	ret

00001b60 <_exit>:
exit():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1b60:	f8 94       	cli

00001b62 <__stop_program>:
__stop_program():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1b62:	ff cf       	rjmp	.-2      	; 0x1b62 <__stop_program>
