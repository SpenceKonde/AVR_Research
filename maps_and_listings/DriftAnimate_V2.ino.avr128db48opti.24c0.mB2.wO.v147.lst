
C:\Users\Spence\AppData\Local\Temp\arduino_build_806259/DriftAnimate_V2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000200 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
     200:	de c3       	rjmp	.+1980   	; 0x9be <__ctors_end>
     202:	00 00       	nop
../../../../crt1/gcrt1.S:67
     204:	06 c4       	rjmp	.+2060   	; 0xa12 <__bad_interrupt>
     206:	00 00       	nop
../../../../crt1/gcrt1.S:68
     208:	04 c4       	rjmp	.+2056   	; 0xa12 <__bad_interrupt>
     20a:	00 00       	nop
../../../../crt1/gcrt1.S:69
     20c:	02 c4       	rjmp	.+2052   	; 0xa12 <__bad_interrupt>
     20e:	00 00       	nop
../../../../crt1/gcrt1.S:70
     210:	00 c4       	rjmp	.+2048   	; 0xa12 <__bad_interrupt>
     212:	00 00       	nop
../../../../crt1/gcrt1.S:71
     214:	fe c3       	rjmp	.+2044   	; 0xa12 <__bad_interrupt>
     216:	00 00       	nop
../../../../crt1/gcrt1.S:72
     218:	fc c3       	rjmp	.+2040   	; 0xa12 <__bad_interrupt>
     21a:	00 00       	nop
../../../../crt1/gcrt1.S:73
     21c:	fa c3       	rjmp	.+2036   	; 0xa12 <__bad_interrupt>
     21e:	00 00       	nop
../../../../crt1/gcrt1.S:74
     220:	f8 c3       	rjmp	.+2032   	; 0xa12 <__bad_interrupt>
     222:	00 00       	nop
../../../../crt1/gcrt1.S:75
     224:	f6 c3       	rjmp	.+2028   	; 0xa12 <__bad_interrupt>
     226:	00 00       	nop
../../../../crt1/gcrt1.S:76
     228:	f4 c3       	rjmp	.+2024   	; 0xa12 <__bad_interrupt>
     22a:	00 00       	nop
../../../../crt1/gcrt1.S:77
     22c:	f2 c3       	rjmp	.+2020   	; 0xa12 <__bad_interrupt>
     22e:	00 00       	nop
../../../../crt1/gcrt1.S:78
     230:	f0 c3       	rjmp	.+2016   	; 0xa12 <__bad_interrupt>
     232:	00 00       	nop
../../../../crt1/gcrt1.S:79
     234:	ee c3       	rjmp	.+2012   	; 0xa12 <__bad_interrupt>
     236:	00 00       	nop
../../../../crt1/gcrt1.S:80
     238:	ec c3       	rjmp	.+2008   	; 0xa12 <__bad_interrupt>
     23a:	00 00       	nop
../../../../crt1/gcrt1.S:81
     23c:	ea c3       	rjmp	.+2004   	; 0xa12 <__bad_interrupt>
     23e:	00 00       	nop
../../../../crt1/gcrt1.S:82
     240:	e8 c3       	rjmp	.+2000   	; 0xa12 <__bad_interrupt>
     242:	00 00       	nop
../../../../crt1/gcrt1.S:83
     244:	e6 c3       	rjmp	.+1996   	; 0xa12 <__bad_interrupt>
     246:	00 00       	nop
../../../../crt1/gcrt1.S:84
     248:	e4 c3       	rjmp	.+1992   	; 0xa12 <__bad_interrupt>
     24a:	00 00       	nop
../../../../crt1/gcrt1.S:85
     24c:	e2 c3       	rjmp	.+1988   	; 0xa12 <__bad_interrupt>
     24e:	00 00       	nop
../../../../crt1/gcrt1.S:86
     250:	e0 c3       	rjmp	.+1984   	; 0xa12 <__bad_interrupt>
     252:	00 00       	nop
../../../../crt1/gcrt1.S:87
     254:	0c 94 17 14 	jmp	0x282e	; 0x282e <__vector_21>
../../../../crt1/gcrt1.S:88
     258:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__vector_22>
../../../../crt1/gcrt1.S:89
     25c:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__vector_23>
../../../../crt1/gcrt1.S:90
     260:	d8 c3       	rjmp	.+1968   	; 0xa12 <__bad_interrupt>
     262:	00 00       	nop
../../../../crt1/gcrt1.S:91
     264:	d6 c3       	rjmp	.+1964   	; 0xa12 <__bad_interrupt>
     266:	00 00       	nop
../../../../crt1/gcrt1.S:92
     268:	d4 c3       	rjmp	.+1960   	; 0xa12 <__bad_interrupt>
     26a:	00 00       	nop
../../../../crt1/gcrt1.S:93
     26c:	d2 c3       	rjmp	.+1956   	; 0xa12 <__bad_interrupt>
     26e:	00 00       	nop
../../../../crt1/gcrt1.S:94
     270:	d0 c3       	rjmp	.+1952   	; 0xa12 <__bad_interrupt>
     272:	00 00       	nop
../../../../crt1/gcrt1.S:95
     274:	ce c3       	rjmp	.+1948   	; 0xa12 <__bad_interrupt>
     276:	00 00       	nop
../../../../crt1/gcrt1.S:96
     278:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__vector_30>
../../../../crt1/gcrt1.S:97
     27c:	0c 94 85 14 	jmp	0x290a	; 0x290a <__vector_31>
../../../../crt1/gcrt1.S:98
     280:	c8 c3       	rjmp	.+1936   	; 0xa12 <__bad_interrupt>
     282:	00 00       	nop
../../../../crt1/gcrt1.S:99
     284:	c6 c3       	rjmp	.+1932   	; 0xa12 <__bad_interrupt>
     286:	00 00       	nop
../../../../crt1/gcrt1.S:100
     288:	c4 c3       	rjmp	.+1928   	; 0xa12 <__bad_interrupt>
     28a:	00 00       	nop
../../../../crt1/gcrt1.S:101
     28c:	c2 c3       	rjmp	.+1924   	; 0xa12 <__bad_interrupt>
     28e:	00 00       	nop
../../../../crt1/gcrt1.S:102
     290:	c0 c3       	rjmp	.+1920   	; 0xa12 <__bad_interrupt>
     292:	00 00       	nop
../../../../crt1/gcrt1.S:103
     294:	be c3       	rjmp	.+1916   	; 0xa12 <__bad_interrupt>
     296:	00 00       	nop
../../../../crt1/gcrt1.S:104
     298:	bc c3       	rjmp	.+1912   	; 0xa12 <__bad_interrupt>
     29a:	00 00       	nop
../../../../crt1/gcrt1.S:105
     29c:	ba c3       	rjmp	.+1908   	; 0xa12 <__bad_interrupt>
     29e:	00 00       	nop
../../../../crt1/gcrt1.S:106
     2a0:	b8 c3       	rjmp	.+1904   	; 0xa12 <__bad_interrupt>
     2a2:	00 00       	nop
../../../../crt1/gcrt1.S:107
     2a4:	b6 c3       	rjmp	.+1900   	; 0xa12 <__bad_interrupt>
     2a6:	00 00       	nop
../../../../crt1/gcrt1.S:108
     2a8:	b4 c3       	rjmp	.+1896   	; 0xa12 <__bad_interrupt>
     2aa:	00 00       	nop
../../../../crt1/gcrt1.S:109
     2ac:	b2 c3       	rjmp	.+1892   	; 0xa12 <__bad_interrupt>
     2ae:	00 00       	nop
../../../../crt1/gcrt1.S:110
     2b0:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__vector_44>
../../../../crt1/gcrt1.S:111
     2b4:	ae c3       	rjmp	.+1884   	; 0xa12 <__bad_interrupt>
     2b6:	00 00       	nop
../../../../crt1/gcrt1.S:112
     2b8:	ac c3       	rjmp	.+1880   	; 0xa12 <__bad_interrupt>
     2ba:	00 00       	nop
../../../../crt1/gcrt1.S:113
     2bc:	aa c3       	rjmp	.+1876   	; 0xa12 <__bad_interrupt>
     2be:	00 00       	nop
../../../../crt1/gcrt1.S:114
     2c0:	a8 c3       	rjmp	.+1872   	; 0xa12 <__bad_interrupt>
     2c2:	00 00       	nop
../../../../crt1/gcrt1.S:115
     2c4:	a6 c3       	rjmp	.+1868   	; 0xa12 <__bad_interrupt>
     2c6:	00 00       	nop
../../../../crt1/gcrt1.S:116
     2c8:	a4 c3       	rjmp	.+1864   	; 0xa12 <__bad_interrupt>
     2ca:	00 00       	nop
../../../../crt1/gcrt1.S:117
     2cc:	a2 c3       	rjmp	.+1860   	; 0xa12 <__bad_interrupt>
     2ce:	00 00       	nop
../../../../crt1/gcrt1.S:118
     2d0:	a0 c3       	rjmp	.+1856   	; 0xa12 <__bad_interrupt>
     2d2:	00 00       	nop
../../../../crt1/gcrt1.S:119
     2d4:	9e c3       	rjmp	.+1852   	; 0xa12 <__bad_interrupt>
     2d6:	00 00       	nop
../../../../crt1/gcrt1.S:120
     2d8:	9c c3       	rjmp	.+1848   	; 0xa12 <__bad_interrupt>
     2da:	00 00       	nop
../../../../crt1/gcrt1.S:121
     2dc:	9a c3       	rjmp	.+1844   	; 0xa12 <__bad_interrupt>
     2de:	00 00       	nop
../../../../crt1/gcrt1.S:122
     2e0:	98 c3       	rjmp	.+1840   	; 0xa12 <__bad_interrupt>
     2e2:	00 00       	nop
../../../../crt1/gcrt1.S:123
     2e4:	96 c3       	rjmp	.+1836   	; 0xa12 <__bad_interrupt>
     2e6:	00 00       	nop
../../../../crt1/gcrt1.S:124
     2e8:	94 c3       	rjmp	.+1832   	; 0xa12 <__bad_interrupt>
     2ea:	00 00       	nop
../../../../crt1/gcrt1.S:125
     2ec:	92 c3       	rjmp	.+1828   	; 0xa12 <__bad_interrupt>
     2ee:	00 00       	nop
../../../../crt1/gcrt1.S:126
     2f0:	90 c3       	rjmp	.+1824   	; 0xa12 <__bad_interrupt>
	...

000002f4 <__trampolines_end>:
__trampolines_start():
     2f4:	20 44       	sbci	r18, 0x40	; 64
     2f6:	52 49       	sbci	r21, 0x92	; 146
     2f8:	46 54       	subi	r20, 0x46	; 70
     2fa:	32 20       	and	r3, r2
	...

000002fd <mode9Name>:
     2fd:	20 46 41 44 45 32 20 20 00                           FADE2  .

00000306 <mode8Name>:
     306:	20 44 4f 54 53 32 20 20 00                           DOTS2  .

0000030f <mode7Name>:
     30f:	20 20 57 41 56 45 20 20 00                            WAVE  .

00000318 <mode6Name>:
     318:	20 20 46 41 44 45 20 20 00                            FADE  .

00000321 <mode5Name>:
     321:	20 20 44 4f 54 53 20 20 00                            DOTS  .

0000032a <mode4Name>:
     32a:	20 52 41 49 4e 42 4f 57 00                           RAINBOW.

00000333 <mode3Name>:
     333:	20 50 55 4c 53 45 20 20 00                           PULSE  .

0000033c <mode2Name>:
     33c:	20 43 4f 4d 45 54 53 20 00                           COMETS .

00000345 <mode1Name>:
     345:	44 52 49 46 54 49 4e 47 00                          DRIFTING.

0000034e <mode0Name>:
     34e:	20 53 4f 4c 49 44 20 20 00                           SOLID  .

00000357 <mode7R2>:
     357:	20 44 57 45 4c 4c 20 00                              DWELL .

0000035f <mode4R2>:
     35f:	20 44 49 52 45 43 54 00                              DIRECT.

00000367 <mode5R1>:
     367:	44 45 4e 53 49 54 59 00                             DENSITY.

0000036f <mode2R2>:
     36f:	20 4c 45 4e 47 54 48 00                              LENGTH.

00000377 <mode1R1>:
     377:	20 4e 55 4d 42 45 52 00                              NUMBER.

0000037f <mode1R0>:
     37f:	20 53 50 45 45 44 20 00                              SPEED .

00000387 <pallete10>:
     387:	53 54 41 54 49 43 20 00                             STATIC .

0000038f <pallete9>:
     38f:	50 55 52 50 4c 45 20 00                             PURPLE .

00000397 <pallete8>:
     397:	50 55 4d 50 4b 49 4e 00                             PUMPKIN.

0000039f <pallete7>:
     39f:	4a 55 4e 47 4c 45 20 00                             JUNGLE .

000003a7 <pallete6>:
     3a7:	20 20 46 49 52 45 20 00                               FIRE .

000003af <pallete5>:
     3af:	53 45 58 54 49 4d 45 00                             SEXTIME.

000003b7 <pallete4>:
     3b7:	4c 49 5a 41 52 44 20 00                             LIZARD .

000003bf <pallete3>:
     3bf:	53 55 4e 53 45 54 20 00                             SUNSET .

000003c7 <pallete2>:
     3c7:	20 20 43 4f 4f 4c 20 00                               COOL .

000003cf <pallete1>:
     3cf:	20 20 57 41 52 4d 20 00                               WARM .

000003d7 <pallete0>:
     3d7:	52 41 49 4e 42 4f 57 00                             RAINBOW.

000003df <mode0R0>:
     3df:	20 20 20 20 20 20 20 00                                    .

000003e7 <mode1L5>:
     3e7:	4d 41 58 20 42 4c 55 00                             MAX BLU.

000003ef <mode1L4>:
     3ef:	4d 49 4e 20 42 4c 55 00                             MIN BLU.

000003f7 <mode1L3>:
     3f7:	4d 41 58 20 47 52 4e 00                             MAX GRN.

000003ff <mode1L2>:
     3ff:	4d 49 4e 20 47 52 4e 00                             MIN GRN.

00000407 <mode1L1>:
     407:	4d 41 58 20 52 45 44 00                             MAX RED.

0000040f <mode1L0>:
     40f:	4d 49 4e 20 52 45 44 00                             MIN RED.

00000417 <mode0L2>:
     417:	20 20 42 4c 55 45 20 00                               BLUE .

0000041f <mode0L1>:
     41f:	20 47 52 45 45 4e 20 00                              GREEN .

00000427 <mode0L0>:
     427:	20 20 52 45 44 20 20 00                               RED  .

0000042f <defaultValueRight>:
	...
     437:	05 00 00 00 00 00 00 00 0a 0a 05 00 00 00 00 00     ................
     447:	05 05 00 00 00 00 00 00 05 0a 00 00 00 00 00 00     ................
     457:	05 0a 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
     467:	05 14 02 00 00 00 00 00 05 0a 00 00 00 00 00 00     ................
     477:	05 0a 02 00 00 00 00 00 05 0a 02 00 00 00 00 00     ................

00000487 <defaultValueLeft>:
     487:	ff ff ff 00 00 00 00 00 00 1f 00 1f 00 1f 00 00     ................
     497:	00 1f 00 1f 00 1f 00 00 00 1f 00 1f 00 1f 00 00     ................
	...
     4af:	00 1f 00 1f 00 1f 00 00 ff ff ff ff ff ff 00 00     ................
	...

000004df <getModeRatio(unsigned int)::__c>:
     4df:	45 52 52 4f 52 3a 20 72 61 74 69 6f 20 6f 75 74     ERROR: ratio out
     4ef:	20 6f 66 20 72 61 6e 67 65 00                        of range.

000004f9 <leftValues>:
     4f9:	00 01 02 03 04 06 08 0b 0e 12 16 1b 21 27 2e 36     ............!'.6
     509:	3f 49 54 5f 6a 75 80 8b 97 a3 b0 bd cc dc ed ff     ?IT_ju..........

00000519 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)::__c>:
     519:	45 52 52 4f 52 3a 20 72 61 74 69 6f 20 6f 75 74     ERROR: ratio out
     529:	20 6f 66 20 72 61 6e 67 65 00                        of range.

00000533 <colorPallete>:
     533:	ff 00 00 00 ff 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
     54b:	ff 60 20 ff 64 00 f0 80 28 ff 20 00 00 00 00 00     .` .d...(. .....
	...
     563:	ff 00 40 00 40 ff 00 d2 a0 a0 00 a0 00 00 00 00     ..@.@...........
	...
     57b:	ff 50 14 ff 64 00 c4 10 40 a0 00 40 ff 20 00 00     .P..d...@..@. ..
	...
     593:	00 ff 00 00 80 10 00 20 00 40 a0 00 00 00 00 00     ....... .@......
	...
     5ab:	ff 00 10 c4 00 40 ff 10 64 ff 00 40 00 00 00 00     .....@..d..@....
	...
     5c3:	ff 40 00 c4 20 00 dc 40 00 ff 10 00 00 00 00 00     .@.. ..@........
	...
     5db:	00 ff 00 20 ff 00 00 ff 20 20 ff 20 00 00 00 00     ... ....  . ....
	...
     5f3:	ff 40 00 c4 20 00 dc 40 00 20 ff 00 00 00 00 00     .@.. ..@. ......
	...
     60b:	c0 00 60 c4 00 40 ff 10 64 ff 00 40 00 00 00 00     ..`..@..d..@....
	...
     623:	a0 a0 8c e4 e4 c8 80 80 6e 3c 3c 32 00 00 00 00     ........n<<2....
	...

0000063b <maxValueLeft>:
     63b:	1f 1f 1f 00 00 00 00 00 1f 1f 1f 1f 1f 1f 00 00     ................
     64b:	1f 1f 1f 1f 1f 1f 00 00 1f 1f 1f 1f 1f 1f 00 00     ................
	...
     663:	1f 1f 1f 1f 1f 1f 00 00 1f 1f 1f 1f 1f 1f 00 00     ................
     673:	0a 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00     ................
     683:	0a 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00     ................

00000693 <__vector_30::enc_states>:
     693:	00 ff 01 00 01 00 00 ff ff 00 00 01 00 01 ff 00     ................

000006a3 <setup::__c>:
     6a3:	4e 6f 74 68 69 6e 67 20 77 6f 72 6b 73 21 00        Nothing works!.

000006b2 <setup::__c>:
     6b2:	57 6f 61 68 20 49 27 6d 20 6f 6e 20 61 20 44 42     Woah I'm on a DB
     6c2:	21 00                                               !.

000006c4 <handleUI()::__c>:
     6c4:	4d 6f 64 65 20 53 61 76 65 64 00                    Mode Saved.

000006cf <handleUI()::__c>:
     6cf:	63 6c 65 61 72 65 64 00                             cleared.

000006d7 <handleUI()::__c>:
     6d7:	53 61 76 65 64 20 6d 6f 64 65 00                    Saved mode.

000006e2 <doAttractLCD()::__c>:
     6e2:	41 44 4a 55 53 54 20 4c 49 47 48 54 49 4e 47 00     ADJUST LIGHTING.

000006f2 <doAttractLCD()::__c>:
     6f2:	54 55 52 4e 20 4d 59 20 4b 4e 4f 42 53 20 3b 29     TURN MY KNOBS ;)
	...

00000703 <doAttractLCD()::__c>:
     703:	55 53 45 20 4b 4e 4f 42 53 26 42 55 54 54 4f 4e     USE KNOBS&BUTTON
	...

00000714 <doAttractLCD()::__c>:
     714:	50 4c 41 59 20 57 49 54 48 20 4d 45 00              PLAY WITH ME.

00000721 <doAttractLCD()::__c>:
     721:	79 6f 75 20 41 6c 69 63 65 21 20 00                 you Alice! .

0000072d <doAttractLCD()::__c>:
     72d:	5a 75 7a 75 20 61 6e 64 20 49 20 6d 69 73 73 00     Zuzu and I miss.

0000073d <doAttractLCD()::__c>:
     73d:	31 32 2f 31 39 2f 32 31 20 76 65 72 73 2e 00        12/19/21 vers..

0000074c <doAttractLCD()::__c>:
     74c:	4c 45 44 43 54 52 4c 41 20 2d 20 56 32 2e 31 00     LEDCTRLA - V2.1.

0000075c <handleLCD()::__c>:
     75c:	46 57 44 00                                         FWD.

00000760 <handleLCD()::__c>:
     760:	52 45 56 00                                         REV.

00000764 <modeNames>:
     764:	4e 03 45 03 3c 03 33 03 2a 03 21 03 18 03 0f 03     N.E.<.3.*.!.....
     774:	06 03 fd 02 f4 02                                   ......

0000077a <handleLCD()::__c>:
     77a:	20 20 20 20 00                                          .

0000077f <maxSetting>:
     77f:	02 00 05 00 05 02 05 01 ff 02 05 02 05 00 00 03     ................
     78f:	00 02 00 03 00 02                                   ......

00000795 <handleLCD()::__c>:
     795:	20 20 20 20 00                                          .

0000079a <modesR>:
     79a:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     7aa:	7f 03 77 03 00 00 00 00 00 00 00 00 00 00 00 00     ..w.............
     7ba:	7f 03 77 03 6f 03 00 00 00 00 00 00 00 00 00 00     ..w.o...........
     7ca:	7f 03 67 03 00 00 00 00 00 00 00 00 00 00 00 00     ..g.............
     7da:	7f 03 6f 03 5f 03 00 00 00 00 00 00 00 00 00 00     ..o._...........
     7ea:	7f 03 67 03 5f 03 00 00 00 00 00 00 00 00 00 00     ..g._...........
     7fa:	7f 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     80a:	7f 03 6f 03 57 03 5f 03 00 00 00 00 00 00 00 00     ..o.W._.........
     81a:	7f 03 67 03 5f 03 00 00 00 00 00 00 00 00 00 00     ..g._...........
     82a:	7f 03 6f 03 57 03 5f 03 00 00 00 00 00 00 00 00     ..o.W._.........
     83a:	7f 03 6f 03 57 03 00 00 00 00 00 00 00 00 00 00     ..o.W...........

0000084a <palleteNames>:
     84a:	d7 03 cf 03 c7 03 bf 03 b7 03 af 03 a7 03 9f 03     ................
     85a:	97 03 8f 03 87 03                                   ......

00000860 <modesL>:
     860:	27 04 1f 04 17 04 00 00 00 00 00 00 00 00 00 00     '...............
     870:	0f 04 07 04 ff 03 f7 03 ef 03 e7 03 00 00 00 00     ................
     880:	0f 04 07 04 ff 03 f7 03 ef 03 e7 03 00 00 00 00     ................
     890:	0f 04 07 04 ff 03 f7 03 ef 03 e7 03 00 00 00 00     ................
     8a0:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8b0:	0f 04 07 04 ff 03 f7 03 ef 03 e7 03 00 00 00 00     ................
     8c0:	0f 04 ff 03 ef 03 07 04 f7 03 e7 03 00 00 00 00     ................
     8d0:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8e0:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8f0:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     900:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

00000910 <pulseBrightnessTable>:
     910:	00 01 02 03 04 05 06 07 08 09 0a 0c 0e 10 12 14     ................
     920:	16 18 1a 1c 1f 22 25 28 2b 2e 31 34 37 3b 3f 43     ....."%(+.147;?C
     930:	47 4b 4f 53 57 5c 61 66 6b 70 75 7a 7f 85 8b 91     GKOSW\afkpuz....
     940:	97 9d a3 a9 af b6 bd c4 cb d2 d9 e0 e7 ef f7 ff     ................

00000950 <colorCount>:
     950:	03 04 04 05 04 04 04 04 04 04 04                    ...........

0000095b <maxValueRight>:
	...
     963:	0a 00 00 00 00 00 00 00 0a 0a 0a 00 00 00 00 00     ................
     973:	0a 14 00 00 00 00 00 00 0a 0a 01 00 00 00 00 00     ................
     983:	0a 0c 01 00 00 00 00 00 0a 00 00 00 00 00 00 00     ................
     993:	0a 28 14 01 00 00 00 00 0a 0c 01 00 00 00 00 00     .(..............
     9a3:	0a 14 14 01 00 00 00 00 0a 14 14 00 00 00 00 00     ................

000009b3 <_usart0_pins>:
     9b3:	00 00 02 01 04 06 03 00 03                          .........

000009bc <__ctors_start>:
__ctors_start():
     9bc:	72 16       	cp	r7, r18

000009be <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     9be:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     9c0:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     9c2:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     9c4:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     9c6:	df e7       	ldi	r29, 0x7F	; 127
../../../../crt1/gcrt1.S:237
     9c8:	de bf       	out	0x3e, r29	; 62

000009ca <_initThreeStuff()>:
__do_copy_data():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     9ca:	11 e4       	ldi	r17, 0x41	; 65
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     9cc:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     9ce:	b0 e4       	ldi	r27, 0x40	; 64
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     9d0:	e8 e7       	ldi	r30, 0x78	; 120
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     9d2:	f8 e4       	ldi	r31, 0x48	; 72
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     9d4:	00 e0       	ldi	r16, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     9d6:	0b bf       	out	0x3b, r16	; 59
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <_initThreeStuff()+0x14>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     9da:	07 90       	elpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     9dc:	0d 92       	st	X+, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     9de:	a6 33       	cpi	r26, 0x36	; 54
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     9e0:	b1 07       	cpc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     9e2:	d9 f7       	brne	.-10     	; 0x9da <_initThreeStuff()+0x10>

000009e4 <__do_clear_bss>:
__do_clear_bss():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     9e4:	2e e5       	ldi	r18, 0x5E	; 94
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     9e6:	a6 e3       	ldi	r26, 0x36	; 54
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     9e8:	b1 e4       	ldi	r27, 0x41	; 65
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <.do_clear_bss_start>

000009ec <.do_clear_bss_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     9ec:	1d 92       	st	X+, r1

000009ee <.do_clear_bss_start>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     9ee:	af 38       	cpi	r26, 0x8F	; 143
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     9f0:	b2 07       	cpc	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <.do_clear_bss_loop>

000009f4 <__do_global_ctors>:
__do_global_ctors():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     9f4:	14 e0       	ldi	r17, 0x04	; 4
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     9f6:	cf ed       	ldi	r28, 0xDF	; 223
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     9f8:	d4 e0       	ldi	r29, 0x04	; 4
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     9fa:	04 c0       	rjmp	.+8      	; 0xa04 <__do_global_ctors+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     9fc:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     9fe:	fe 01       	movw	r30, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     a00:	0e 94 2d 24 	call	0x485a	; 0x485a <__tablejump2__>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     a04:	ce 3d       	cpi	r28, 0xDE	; 222
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     a06:	d1 07       	cpc	r29, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     a08:	c9 f7       	brne	.-14     	; 0x9fc <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     a0a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <main>
../../../../crt1/gcrt1.S:315
     a0e:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <_exit>

00000a12 <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     a12:	f6 cb       	rjmp	.-2068   	; 0x200 <__vectors>

00000a14 <Print::print(char)>:
print():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/main.cpp:198
  // Finally, none of these three things need to be done if running optiboot!
  // We want the vectors in the alt location, it checks, clears, and stashes the reset flags (in GPR0)
  // and it providews the entrypoint we call to write to flash.
#else
  void _initThreeStuff() __attribute__ ((naked)) __attribute__((used)) __attribute__ ((section (".init3")));
  void _initThreeStuff() {
     a14:	dc 01       	movw	r26, r24
     a16:	ed 91       	ld	r30, X+
     a18:	fc 91       	ld	r31, X
     a1a:	01 90       	ld	r0, Z+
     a1c:	f0 81       	ld	r31, Z
     a1e:	e0 2d       	mov	r30, r0
     a20:	09 94       	ijmp

00000a22 <Print::print(__FlashStringHelper const*)>:
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	8c 01       	movw	r16, r24
     a30:	7b 01       	movw	r14, r22
     a32:	d0 e0       	ldi	r29, 0x00	; 0
     a34:	c0 e0       	ldi	r28, 0x00	; 0
     a36:	f7 01       	movw	r30, r14
     a38:	ec 0f       	add	r30, r28
     a3a:	fd 1f       	adc	r31, r29
     a3c:	64 91       	lpm	r22, Z
     a3e:	66 23       	and	r22, r22
     a40:	61 f0       	breq	.+24     	; 0xa5a <Print::print(__FlashStringHelper const*)+0x38>
     a42:	d8 01       	movw	r26, r16
     a44:	ed 91       	ld	r30, X+
     a46:	fc 91       	ld	r31, X
     a48:	01 90       	ld	r0, Z+
     a4a:	f0 81       	ld	r31, Z
     a4c:	e0 2d       	mov	r30, r0
     a4e:	c8 01       	movw	r24, r16
     a50:	09 95       	icall
     a52:	89 2b       	or	r24, r25
     a54:	11 f0       	breq	.+4      	; 0xa5a <Print::print(__FlashStringHelper const*)+0x38>
     a56:	21 96       	adiw	r28, 0x01	; 1
     a58:	ee cf       	rjmp	.-36     	; 0xa36 <Print::print(__FlashStringHelper const*)+0x14>
     a5a:	ce 01       	movw	r24, r28
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	ff 90       	pop	r15
     a66:	ef 90       	pop	r14
     a68:	08 95       	ret

00000a6a <Print::write(unsigned char const*, unsigned int)>:
write():
     a6a:	af 92       	push	r10
     a6c:	bf 92       	push	r11
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	6c 01       	movw	r12, r24
     a80:	7b 01       	movw	r14, r22
     a82:	8b 01       	movw	r16, r22
     a84:	04 0f       	add	r16, r20
     a86:	15 1f       	adc	r17, r21
     a88:	eb 01       	movw	r28, r22
     a8a:	5e 01       	movw	r10, r28
     a8c:	ae 18       	sub	r10, r14
     a8e:	bf 08       	sbc	r11, r15
     a90:	c0 17       	cp	r28, r16
     a92:	d1 07       	cpc	r29, r17
     a94:	59 f0       	breq	.+22     	; 0xaac <Print::write(unsigned char const*, unsigned int)+0x42>
     a96:	69 91       	ld	r22, Y+
     a98:	d6 01       	movw	r26, r12
     a9a:	ed 91       	ld	r30, X+
     a9c:	fc 91       	ld	r31, X
     a9e:	01 90       	ld	r0, Z+
     aa0:	f0 81       	ld	r31, Z
     aa2:	e0 2d       	mov	r30, r0
     aa4:	c6 01       	movw	r24, r12
     aa6:	09 95       	icall
     aa8:	89 2b       	or	r24, r25
     aaa:	79 f7       	brne	.-34     	; 0xa8a <Print::write(unsigned char const*, unsigned int)+0x20>
     aac:	c5 01       	movw	r24, r10
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	cf 90       	pop	r12
     abe:	bf 90       	pop	r11
     ac0:	af 90       	pop	r10
     ac2:	08 95       	ret

00000ac4 <UartClass::availableForWrite()>:
availableForWrite():
     ac4:	fc 01       	movw	r30, r24
     ac6:	55 89       	ldd	r21, Z+21	; 0x15
     ac8:	46 89       	ldd	r20, Z+22	; 0x16
     aca:	25 2f       	mov	r18, r21
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	84 2f       	mov	r24, r20
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	82 1b       	sub	r24, r18
     ad4:	93 0b       	sbc	r25, r19
     ad6:	54 17       	cp	r21, r20
     ad8:	10 f0       	brcs	.+4      	; 0xade <UartClass::availableForWrite()+0x1a>
     ada:	cf 96       	adiw	r24, 0x3f	; 63
     adc:	08 95       	ret
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	08 95       	ret

00000ae2 <UartClass::read()>:
read():
     ae2:	fc 01       	movw	r30, r24
     ae4:	93 89       	ldd	r25, Z+19	; 0x13
     ae6:	84 89       	ldd	r24, Z+20	; 0x14
     ae8:	98 17       	cp	r25, r24
     aea:	61 f0       	breq	.+24     	; 0xb04 <UartClass::read()+0x22>
     aec:	a4 89       	ldd	r26, Z+20	; 0x14
     aee:	ae 0f       	add	r26, r30
     af0:	bf 2f       	mov	r27, r31
     af2:	b1 1d       	adc	r27, r1
     af4:	57 96       	adiw	r26, 0x17	; 23
     af6:	8c 91       	ld	r24, X
     af8:	94 89       	ldd	r25, Z+20	; 0x14
     afa:	9f 5f       	subi	r25, 0xFF	; 255
     afc:	9f 73       	andi	r25, 0x3F	; 63
     afe:	94 8b       	std	Z+20, r25	; 0x14
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	08 95       	ret
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	9f ef       	ldi	r25, 0xFF	; 255
     b08:	08 95       	ret

00000b0a <UartClass::peek()>:
peek():
     b0a:	fc 01       	movw	r30, r24
     b0c:	93 89       	ldd	r25, Z+19	; 0x13
     b0e:	84 89       	ldd	r24, Z+20	; 0x14
     b10:	98 17       	cp	r25, r24
     b12:	31 f0       	breq	.+12     	; 0xb20 <UartClass::peek()+0x16>
     b14:	84 89       	ldd	r24, Z+20	; 0x14
     b16:	e8 0f       	add	r30, r24
     b18:	f1 1d       	adc	r31, r1
     b1a:	87 89       	ldd	r24, Z+23	; 0x17
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	08 95       	ret
     b20:	8f ef       	ldi	r24, 0xFF	; 255
     b22:	9f ef       	ldi	r25, 0xFF	; 255
     b24:	08 95       	ret

00000b26 <UartClass::available()>:
available():
     b26:	fc 01       	movw	r30, r24
     b28:	93 89       	ldd	r25, Z+19	; 0x13
     b2a:	24 89       	ldd	r18, Z+20	; 0x14
     b2c:	89 2f       	mov	r24, r25
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	80 5c       	subi	r24, 0xC0	; 192
     b32:	9f 4f       	sbci	r25, 0xFF	; 255
     b34:	82 1b       	sub	r24, r18
     b36:	91 09       	sbc	r25, r1
     b38:	8f 73       	andi	r24, 0x3F	; 63
     b3a:	99 27       	eor	r25, r25
     b3c:	08 95       	ret

00000b3e <UartClass::end()>:
end():
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	ec 01       	movw	r28, r24
     b44:	e8 81       	ld	r30, Y
     b46:	f9 81       	ldd	r31, Y+1	; 0x01
     b48:	06 80       	ldd	r0, Z+6	; 0x06
     b4a:	f7 81       	ldd	r31, Z+7	; 0x07
     b4c:	e0 2d       	mov	r30, r0
     b4e:	09 95       	icall
     b50:	ec 85       	ldd	r30, Y+12	; 0x0c
     b52:	fd 85       	ldd	r31, Y+13	; 0x0d
     b54:	86 81       	ldd	r24, Z+6	; 0x06
     b56:	16 82       	std	Z+6, r1	; 0x06
     b58:	85 81       	ldd	r24, Z+5	; 0x05
     b5a:	15 82       	std	Z+5, r1	; 0x05
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	84 83       	std	Z+4, r24	; 0x04
     b60:	8c 89       	ldd	r24, Y+20	; 0x14
     b62:	8b 8b       	std	Y+19, r24	; 0x13
     b64:	1a 8a       	std	Y+18, r1	; 0x12
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <UartClass::begin(unsigned long, unsigned int)>:
begin():
     b6c:	8f 92       	push	r8
     b6e:	9f 92       	push	r9
     b70:	af 92       	push	r10
     b72:	bf 92       	push	r11
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	8c 01       	movw	r16, r24
     b80:	4a 01       	movw	r8, r20
     b82:	5b 01       	movw	r10, r22
     b84:	d2 2f       	mov	r29, r18
     b86:	c3 2f       	mov	r28, r19
     b88:	dc 01       	movw	r26, r24
     b8a:	52 96       	adiw	r26, 0x12	; 18
     b8c:	8c 91       	ld	r24, X
     b8e:	52 97       	sbiw	r26, 0x12	; 18
     b90:	80 ff       	sbrs	r24, 0
     b92:	07 c0       	rjmp	.+14     	; 0xba2 <UartClass::begin(unsigned long, unsigned int)+0x36>
     b94:	ed 91       	ld	r30, X+
     b96:	fc 91       	ld	r31, X
     b98:	02 88       	ldd	r0, Z+18	; 0x12
     b9a:	f3 89       	ldd	r31, Z+19	; 0x13
     b9c:	e0 2d       	mov	r30, r0
     b9e:	c8 01       	movw	r24, r16
     ba0:	09 95       	icall
     ba2:	d1 11       	cpse	r29, r1
     ba4:	01 c0       	rjmp	.+2      	; 0xba8 <UartClass::begin(unsigned long, unsigned int)+0x3c>
     ba6:	d3 e0       	ldi	r29, 0x03	; 3
     ba8:	fd 2e       	mov	r15, r29
     baa:	e8 94       	clt
     bac:	f2 f8       	bld	r15, 2
     bae:	dc 2f       	mov	r29, r28
     bb0:	d0 95       	com	r29
     bb2:	d0 7c       	andi	r29, 0xC0	; 192
     bb4:	b1 e6       	ldi	r27, 0x61	; 97
     bb6:	8b 16       	cp	r8, r27
     bb8:	b3 ee       	ldi	r27, 0xE3	; 227
     bba:	9b 06       	cpc	r9, r27
     bbc:	b6 e1       	ldi	r27, 0x16	; 22
     bbe:	ab 06       	cpc	r10, r27
     bc0:	b1 04       	cpc	r11, r1
     bc2:	28 f0       	brcs	.+10     	; 0xbce <UartClass::begin(unsigned long, unsigned int)+0x62>
     bc4:	d2 60       	ori	r29, 0x02	; 2
     bc6:	b6 94       	lsr	r11
     bc8:	a7 94       	ror	r10
     bca:	97 94       	ror	r9
     bcc:	87 94       	ror	r8
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	78 ed       	ldi	r23, 0xD8	; 216
     bd2:	88 eb       	ldi	r24, 0xB8	; 184
     bd4:	95 e0       	ldi	r25, 0x05	; 5
     bd6:	a5 01       	movw	r20, r10
     bd8:	94 01       	movw	r18, r8
     bda:	0e 94 bf 21 	call	0x437e	; 0x437e <__udivmodsi4>
     bde:	c9 01       	movw	r24, r18
     be0:	20 34       	cpi	r18, 0x40	; 64
     be2:	31 05       	cpc	r19, r1
     be4:	10 f4       	brcc	.+4      	; 0xbea <UartClass::begin(unsigned long, unsigned int)+0x7e>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	3c 2f       	mov	r19, r28
     bec:	3b 72       	andi	r19, 0x2B	; 43
     bee:	d7 fd       	sbrc	r29, 7
     bf0:	30 68       	ori	r19, 0x80	; 128
     bf2:	4d 2f       	mov	r20, r29
     bf4:	48 7c       	andi	r20, 0xC8	; 200
     bf6:	30 fd       	sbrc	r19, 0
     bf8:	41 60       	ori	r20, 0x01	; 1
     bfa:	5f b7       	in	r21, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	d8 01       	movw	r26, r16
     c00:	1c 96       	adiw	r26, 0x0c	; 12
     c02:	ed 91       	ld	r30, X+
     c04:	fc 91       	ld	r31, X
     c06:	16 82       	std	Z+6, r1	; 0x06
     c08:	f7 82       	std	Z+7, r15	; 0x07
     c0a:	80 87       	std	Z+8, r24	; 0x08
     c0c:	91 87       	std	Z+9, r25	; 0x09
     c0e:	35 ff       	sbrs	r19, 5
     c10:	8f c0       	rjmp	.+286    	; 0xd30 <UartClass::begin(unsigned long, unsigned int)+0x1c4>
     c12:	4f 77       	andi	r20, 0x7F	; 127
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	84 87       	std	Z+12, r24	; 0x0c
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	85 87       	std	Z+13, r24	; 0x0d
     c1c:	3f 7d       	andi	r19, 0xDF	; 223
     c1e:	35 83       	std	Z+5, r19	; 0x05
     c20:	d6 83       	std	Z+6, r29	; 0x06
     c22:	f8 01       	movw	r30, r16
     c24:	21 89       	ldd	r18, Z+17	; 0x11
     c26:	c0 89       	ldd	r28, Z+16	; 0x10
     c28:	86 85       	ldd	r24, Z+14	; 0x0e
     c2a:	97 85       	ldd	r25, Z+15	; 0x0f
_set_pins():
     c2c:	fc 01       	movw	r30, r24
     c2e:	33 e0       	ldi	r19, 0x03	; 3
     c30:	23 9f       	mul	r18, r19
     c32:	e0 0d       	add	r30, r0
     c34:	f1 1d       	adc	r31, r1
     c36:	11 24       	eor	r1, r1
     c38:	65 91       	lpm	r22, Z+
     c3a:	74 91       	lpm	r23, Z
     c3c:	2c 17       	cp	r18, r28
     c3e:	08 f0       	brcs	.+2      	; 0xc42 <UartClass::begin(unsigned long, unsigned int)+0xd6>
     c40:	59 c0       	rjmp	.+178    	; 0xcf4 <UartClass::begin(unsigned long, unsigned int)+0x188>
     c42:	27 2f       	mov	r18, r23
     c44:	46 ff       	sbrs	r20, 6
     c46:	76 c0       	rjmp	.+236    	; 0xd34 <UartClass::begin(unsigned long, unsigned int)+0x1c8>
_pinMode():
     c48:	79 32       	cpi	r23, 0x29	; 41
     c4a:	88 f4       	brcc	.+34     	; 0xc6e <UartClass::begin(unsigned long, unsigned int)+0x102>
check_valid_digital_pin():
     c4c:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
     c4e:	f9 01       	movw	r30, r18
     c50:	e8 58       	subi	r30, 0x88	; 136
     c52:	ff 4b       	sbci	r31, 0xBF	; 191
     c54:	a0 81       	ld	r26, Z
     c56:	af 3f       	cpi	r26, 0xFF	; 255
     c58:	51 f0       	breq	.+20     	; 0xc6e <UartClass::begin(unsigned long, unsigned int)+0x102>
     c5a:	2f 55       	subi	r18, 0x5F	; 95
     c5c:	3f 4b       	sbci	r19, 0xBF	; 191
     c5e:	f9 01       	movw	r30, r18
     c60:	30 81       	ld	r19, Z
     c62:	20 e2       	ldi	r18, 0x20	; 32
     c64:	32 9f       	mul	r19, r18
     c66:	f0 01       	movw	r30, r0
     c68:	11 24       	eor	r1, r1
     c6a:	fc 5f       	subi	r31, 0xFC	; 252
     c6c:	a1 83       	std	Z+1, r26	; 0x01
_set_pins():
     c6e:	47 ff       	sbrs	r20, 7
     c70:	2a c0       	rjmp	.+84     	; 0xcc6 <UartClass::begin(unsigned long, unsigned int)+0x15a>
     c72:	21 e0       	ldi	r18, 0x01	; 1
     c74:	27 0f       	add	r18, r23
_pinMode():
     c76:	29 32       	cpi	r18, 0x29	; 41
     c78:	30 f5       	brcc	.+76     	; 0xcc6 <UartClass::begin(unsigned long, unsigned int)+0x15a>
check_valid_digital_pin():
     c7a:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
     c7c:	f9 01       	movw	r30, r18
     c7e:	e8 58       	subi	r30, 0x88	; 136
     c80:	ff 4b       	sbci	r31, 0xBF	; 191
     c82:	d0 81       	ld	r29, Z
     c84:	df 3f       	cpi	r29, 0xFF	; 255
     c86:	f9 f0       	breq	.+62     	; 0xcc6 <UartClass::begin(unsigned long, unsigned int)+0x15a>
     c88:	f9 01       	movw	r30, r18
     c8a:	ef 55       	subi	r30, 0x5F	; 95
     c8c:	ff 4b       	sbci	r31, 0xBF	; 191
     c8e:	a0 81       	ld	r26, Z
     c90:	f0 e2       	ldi	r31, 0x20	; 32
     c92:	af 9f       	mul	r26, r31
     c94:	d0 01       	movw	r26, r0
     c96:	11 24       	eor	r1, r1
     c98:	bc 5f       	subi	r27, 0xFC	; 252
     c9a:	2b 5c       	subi	r18, 0xCB	; 203
     c9c:	3f 4b       	sbci	r19, 0xBF	; 191
     c9e:	f9 01       	movw	r30, r18
     ca0:	10 81       	ld	r17, Z
begin():
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	e0 e0       	ldi	r30, 0x00	; 0
_pinMode():
     ca6:	18 30       	cpi	r17, 0x08	; 8
     ca8:	30 f4       	brcc	.+12     	; 0xcb6 <UartClass::begin(unsigned long, unsigned int)+0x14a>
     caa:	9d 01       	movw	r18, r26
     cac:	20 5f       	subi	r18, 0xF0	; 240
     cae:	3f 4f       	sbci	r19, 0xFF	; 255
     cb0:	f9 01       	movw	r30, r18
     cb2:	e1 0f       	add	r30, r17
     cb4:	f1 1d       	adc	r31, r1
     cb6:	3f b7       	in	r19, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	12 96       	adiw	r26, 0x02	; 2
     cbc:	dc 93       	st	X, r29
     cbe:	20 81       	ld	r18, Z
     cc0:	28 60       	ori	r18, 0x08	; 8
     cc2:	20 83       	st	Z, r18
     cc4:	3f bf       	out	0x3f, r19	; 63
_set_pins():
     cc6:	40 ff       	sbrs	r20, 0
     cc8:	15 c0       	rjmp	.+42     	; 0xcf4 <UartClass::begin(unsigned long, unsigned int)+0x188>
     cca:	23 e0       	ldi	r18, 0x03	; 3
     ccc:	27 0f       	add	r18, r23
_pinMode():
     cce:	29 32       	cpi	r18, 0x29	; 41
     cd0:	88 f4       	brcc	.+34     	; 0xcf4 <UartClass::begin(unsigned long, unsigned int)+0x188>
check_valid_digital_pin():
     cd2:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
     cd4:	f9 01       	movw	r30, r18
     cd6:	e8 58       	subi	r30, 0x88	; 136
     cd8:	ff 4b       	sbci	r31, 0xBF	; 191
     cda:	40 81       	ld	r20, Z
     cdc:	4f 3f       	cpi	r20, 0xFF	; 255
     cde:	51 f0       	breq	.+20     	; 0xcf4 <UartClass::begin(unsigned long, unsigned int)+0x188>
     ce0:	2f 55       	subi	r18, 0x5F	; 95
     ce2:	3f 4b       	sbci	r19, 0xBF	; 191
     ce4:	d9 01       	movw	r26, r18
     ce6:	ec 91       	ld	r30, X
     ce8:	b0 e2       	ldi	r27, 0x20	; 32
     cea:	eb 9f       	mul	r30, r27
     cec:	f0 01       	movw	r30, r0
     cee:	11 24       	eor	r1, r1
     cf0:	fc 5f       	subi	r31, 0xFC	; 252
     cf2:	41 83       	std	Z+1, r20	; 0x01
_mux_set():
     cf4:	fc 01       	movw	r30, r24
     cf6:	23 e0       	ldi	r18, 0x03	; 3
     cf8:	c2 9f       	mul	r28, r18
     cfa:	e0 0d       	add	r30, r0
     cfc:	f1 1d       	adc	r31, r1
     cfe:	11 24       	eor	r1, r1
     d00:	31 96       	adiw	r30, 0x01	; 1
     d02:	25 91       	lpm	r18, Z+
     d04:	34 91       	lpm	r19, Z
     d06:	f9 01       	movw	r30, r18
     d08:	ff 27       	eor	r31, r31
     d0a:	ee 51       	subi	r30, 0x1E	; 30
     d0c:	fa 4f       	sbci	r31, 0xFA	; 250
     d0e:	90 81       	ld	r25, Z
     d10:	83 2f       	mov	r24, r19
     d12:	80 95       	com	r24
     d14:	89 23       	and	r24, r25
     d16:	68 2b       	or	r22, r24
     d18:	60 83       	st	Z, r22
begin():
     d1a:	5f bf       	out	0x3f, r21	; 63
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	9f 90       	pop	r9
     d2c:	8f 90       	pop	r8
     d2e:	08 95       	ret
     d30:	14 86       	std	Z+12, r1	; 0x0c
     d32:	74 cf       	rjmp	.-280    	; 0xc1c <UartClass::begin(unsigned long, unsigned int)+0xb0>
_set_pins():
     d34:	34 2f       	mov	r19, r20
     d36:	30 75       	andi	r19, 0x50	; 80
     d38:	09 f4       	brne	.+2      	; 0xd3c <UartClass::begin(unsigned long, unsigned int)+0x1d0>
     d3a:	99 cf       	rjmp	.-206    	; 0xc6e <UartClass::begin(unsigned long, unsigned int)+0x102>
_pinMode():
     d3c:	79 32       	cpi	r23, 0x29	; 41
     d3e:	08 f0       	brcs	.+2      	; 0xd42 <UartClass::begin(unsigned long, unsigned int)+0x1d6>
     d40:	96 cf       	rjmp	.-212    	; 0xc6e <UartClass::begin(unsigned long, unsigned int)+0x102>
check_valid_digital_pin():
     d42:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
     d44:	f9 01       	movw	r30, r18
     d46:	e8 58       	subi	r30, 0x88	; 136
     d48:	ff 4b       	sbci	r31, 0xBF	; 191
     d4a:	d0 81       	ld	r29, Z
     d4c:	df 3f       	cpi	r29, 0xFF	; 255
     d4e:	09 f4       	brne	.+2      	; 0xd52 <UartClass::begin(unsigned long, unsigned int)+0x1e6>
     d50:	8e cf       	rjmp	.-228    	; 0xc6e <UartClass::begin(unsigned long, unsigned int)+0x102>
     d52:	f9 01       	movw	r30, r18
     d54:	ef 55       	subi	r30, 0x5F	; 95
     d56:	ff 4b       	sbci	r31, 0xBF	; 191
     d58:	a0 81       	ld	r26, Z
     d5a:	e0 e2       	ldi	r30, 0x20	; 32
     d5c:	ae 9f       	mul	r26, r30
     d5e:	d0 01       	movw	r26, r0
     d60:	11 24       	eor	r1, r1
     d62:	bc 5f       	subi	r27, 0xFC	; 252
     d64:	2b 5c       	subi	r18, 0xCB	; 203
     d66:	3f 4b       	sbci	r19, 0xBF	; 191
     d68:	f9 01       	movw	r30, r18
     d6a:	10 81       	ld	r17, Z
begin():
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	e0 e0       	ldi	r30, 0x00	; 0
_pinMode():
     d70:	18 30       	cpi	r17, 0x08	; 8
     d72:	30 f4       	brcc	.+12     	; 0xd80 <UartClass::begin(unsigned long, unsigned int)+0x214>
     d74:	9d 01       	movw	r18, r26
     d76:	20 5f       	subi	r18, 0xF0	; 240
     d78:	3f 4f       	sbci	r19, 0xFF	; 255
     d7a:	f9 01       	movw	r30, r18
     d7c:	e1 0f       	add	r30, r17
     d7e:	f1 1d       	adc	r31, r1
     d80:	3f b7       	in	r19, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	12 96       	adiw	r26, 0x02	; 2
     d86:	dc 93       	st	X, r29
     d88:	20 81       	ld	r18, Z
     d8a:	28 60       	ori	r18, 0x08	; 8
     d8c:	20 83       	st	Z, r18
     d8e:	3f bf       	out	0x3f, r19	; 63
     d90:	6e cf       	rjmp	.-292    	; 0xc6e <UartClass::begin(unsigned long, unsigned int)+0x102>

00000d92 <UartClass::_poll_tx_data_empty()>:
_poll_tx_data_empty():
     d92:	fc 01       	movw	r30, r24
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	07 fe       	sbrs	r0, 7
     d98:	04 c0       	rjmp	.+8      	; 0xda2 <UartClass::_poll_tx_data_empty()+0x10>
     d9a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7e0111>
     d9e:	88 23       	and	r24, r24
     da0:	a9 f0       	breq	.+42     	; 0xdcc <_poll_dre_done>
     da2:	a4 85       	ldd	r26, Z+12	; 0x0c
     da4:	b5 85       	ldd	r27, Z+13	; 0x0d
     da6:	14 96       	adiw	r26, 0x04	; 4
     da8:	8c 91       	ld	r24, X
     daa:	14 97       	sbiw	r26, 0x04	; 4
     dac:	85 ff       	sbrs	r24, 5
     dae:	0e c0       	rjmp	.+28     	; 0xdcc <_poll_dre_done>
     db0:	95 89       	ldd	r25, Z+21	; 0x15
     db2:	86 89       	ldd	r24, Z+22	; 0x16
     db4:	98 17       	cp	r25, r24
     db6:	39 f0       	breq	.+14     	; 0xdc6 <UartClass::_poll_tx_data_empty()+0x34>
     db8:	15 96       	adiw	r26, 0x05	; 5
     dba:	8c 91       	ld	r24, X
     dbc:	15 97       	sbiw	r26, 0x05	; 5
     dbe:	8f 7d       	andi	r24, 0xDF	; 223
     dc0:	15 96       	adiw	r26, 0x05	; 5
     dc2:	8c 93       	st	X, r24
     dc4:	08 95       	ret
     dc6:	e8 94       	clt
     dc8:	0c 94 27 14 	jmp	0x284e	; 0x284e <_poll_dre>

00000dcc <_poll_dre_done>:
     dcc:	08 95       	ret

00000dce <UartClass::write(unsigned char)>:
write():
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	ec 01       	movw	r28, r24
     dd8:	8a 89       	ldd	r24, Y+18	; 0x12
     dda:	98 2f       	mov	r25, r24
     ddc:	91 60       	ori	r25, 0x01	; 1
     dde:	9a 8b       	std	Y+18, r25	; 0x12
     de0:	2d 89       	ldd	r18, Y+21	; 0x15
     de2:	9e 89       	ldd	r25, Y+22	; 0x16
     de4:	29 13       	cpse	r18, r25
     de6:	0a c0       	rjmp	.+20     	; 0xdfc <UartClass::write(unsigned char)+0x2e>
     de8:	ec 85       	ldd	r30, Y+12	; 0x0c
     dea:	fd 85       	ldd	r31, Y+13	; 0x0d
     dec:	94 81       	ldd	r25, Z+4	; 0x04
     dee:	95 ff       	sbrs	r25, 5
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <UartClass::write(unsigned char)+0x2e>
     df2:	81 fd       	sbrc	r24, 1
     df4:	0d c0       	rjmp	.+26     	; 0xe10 <UartClass::write(unsigned char)+0x42>
     df6:	80 e4       	ldi	r24, 0x40	; 64
     df8:	84 83       	std	Z+4, r24	; 0x04
     dfa:	12 c0       	rjmp	.+36     	; 0xe20 <UartClass::write(unsigned char)+0x52>
     dfc:	06 2f       	mov	r16, r22
     dfe:	1d 89       	ldd	r17, Y+21	; 0x15
     e00:	1f 5f       	subi	r17, 0xFF	; 255
     e02:	1f 73       	andi	r17, 0x3F	; 63
     e04:	8e 89       	ldd	r24, Y+22	; 0x16
     e06:	81 13       	cpse	r24, r17
     e08:	15 c0       	rjmp	.+42     	; 0xe34 <UartClass::write(unsigned char)+0x66>
     e0a:	ce 01       	movw	r24, r28
     e0c:	c2 df       	rcall	.-124    	; 0xd92 <UartClass::_poll_tx_data_empty()>
     e0e:	fa cf       	rjmp	.-12     	; 0xe04 <UartClass::write(unsigned char)+0x36>
     e10:	85 81       	ldd	r24, Z+5	; 0x05
     e12:	8f 77       	andi	r24, 0x7F	; 127
     e14:	80 64       	ori	r24, 0x40	; 64
     e16:	90 e4       	ldi	r25, 0x40	; 64
     e18:	94 83       	std	Z+4, r25	; 0x04
     e1a:	ec 85       	ldd	r30, Y+12	; 0x0c
     e1c:	fd 85       	ldd	r31, Y+13	; 0x0d
     e1e:	85 83       	std	Z+5, r24	; 0x05
     e20:	ec 85       	ldd	r30, Y+12	; 0x0c
     e22:	fd 85       	ldd	r31, Y+13	; 0x0d
     e24:	62 83       	std	Z+2, r22	; 0x02
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	1f 91       	pop	r17
     e30:	0f 91       	pop	r16
     e32:	08 95       	ret
     e34:	ed 89       	ldd	r30, Y+21	; 0x15
     e36:	ec 0f       	add	r30, r28
     e38:	fd 2f       	mov	r31, r29
     e3a:	f1 1d       	adc	r31, r1
     e3c:	e9 5a       	subi	r30, 0xA9	; 169
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	00 83       	st	Z, r16
     e42:	1d 8b       	std	Y+21, r17	; 0x15
     e44:	ec 85       	ldd	r30, Y+12	; 0x0c
     e46:	fd 85       	ldd	r31, Y+13	; 0x0d
     e48:	8a 89       	ldd	r24, Y+18	; 0x12
     e4a:	81 ff       	sbrs	r24, 1
     e4c:	09 c0       	rjmp	.+18     	; 0xe60 <UartClass::write(unsigned char)+0x92>
     e4e:	85 81       	ldd	r24, Z+5	; 0x05
     e50:	8f 77       	andi	r24, 0x7F	; 127
     e52:	80 66       	ori	r24, 0x60	; 96
     e54:	90 e4       	ldi	r25, 0x40	; 64
     e56:	94 83       	std	Z+4, r25	; 0x04
     e58:	ec 85       	ldd	r30, Y+12	; 0x0c
     e5a:	fd 85       	ldd	r31, Y+13	; 0x0d
     e5c:	85 83       	std	Z+5, r24	; 0x05
     e5e:	e3 cf       	rjmp	.-58     	; 0xe26 <UartClass::write(unsigned char)+0x58>
     e60:	85 81       	ldd	r24, Z+5	; 0x05
     e62:	80 62       	ori	r24, 0x20	; 32
     e64:	fb cf       	rjmp	.-10     	; 0xe5c <UartClass::write(unsigned char)+0x8e>

00000e66 <UartClass::flush()>:
flush():
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	ec 01       	movw	r28, r24
     e6c:	8a 89       	ldd	r24, Y+18	; 0x12
     e6e:	80 ff       	sbrs	r24, 0
     e70:	0b c0       	rjmp	.+22     	; 0xe88 <UartClass::flush()+0x22>
     e72:	ec 85       	ldd	r30, Y+12	; 0x0c
     e74:	fd 85       	ldd	r31, Y+13	; 0x0d
     e76:	85 81       	ldd	r24, Z+5	; 0x05
     e78:	85 fd       	sbrc	r24, 5
     e7a:	03 c0       	rjmp	.+6      	; 0xe82 <UartClass::flush()+0x1c>
     e7c:	84 81       	ldd	r24, Z+4	; 0x04
     e7e:	86 fd       	sbrc	r24, 6
     e80:	03 c0       	rjmp	.+6      	; 0xe88 <UartClass::flush()+0x22>
     e82:	ce 01       	movw	r24, r28
     e84:	86 df       	rcall	.-244    	; 0xd92 <UartClass::_poll_tx_data_empty()>
     e86:	f5 cf       	rjmp	.-22     	; 0xe72 <UartClass::flush()+0xc>
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	08 95       	ret

00000e8e <UartClass::operator bool()>:
operator 3():
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	08 95       	ret

00000e92 <micros>:
micros():
     e92:	9f b7       	in	r25, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	e0 91 2a 0b 	lds	r30, 0x0B2A	; 0x800b2a <__TEXT_REGION_LENGTH__+0x7e0b2a>
     e9a:	f0 91 2b 0b 	lds	r31, 0x0B2B	; 0x800b2b <__TEXT_REGION_LENGTH__+0x7e0b2b>
     e9e:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     ea2:	20 91 68 41 	lds	r18, 0x4168	; 0x804168 <timer_millis>
     ea6:	30 91 69 41 	lds	r19, 0x4169	; 0x804169 <timer_millis+0x1>
     eaa:	40 91 6a 41 	lds	r20, 0x416A	; 0x80416a <timer_millis+0x2>
     eae:	50 91 6b 41 	lds	r21, 0x416B	; 0x80416b <timer_millis+0x3>
     eb2:	9f bf       	out	0x3f, r25	; 63
     eb4:	80 ff       	sbrs	r24, 0
     eb6:	08 c0       	rjmp	.+16     	; 0xec8 <micros+0x36>
     eb8:	ec 3e       	cpi	r30, 0xEC	; 236
     eba:	8c e2       	ldi	r24, 0x2C	; 44
     ebc:	f8 07       	cpc	r31, r24
     ebe:	20 f4       	brcc	.+8      	; 0xec8 <micros+0x36>
     ec0:	2f 5f       	subi	r18, 0xFF	; 255
     ec2:	3f 4f       	sbci	r19, 0xFF	; 255
     ec4:	4f 4f       	sbci	r20, 0xFF	; 255
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
     ec8:	0f 01       	movw	r0, r30
     eca:	16 94       	lsr	r1
     ecc:	07 94       	ror	r0
     ece:	16 94       	lsr	r1
     ed0:	07 94       	ror	r0
     ed2:	16 94       	lsr	r1
     ed4:	07 94       	ror	r0
     ed6:	16 94       	lsr	r1
     ed8:	07 94       	ror	r0
     eda:	f0 01       	movw	r30, r0
     edc:	16 94       	lsr	r1
     ede:	07 94       	ror	r0
     ee0:	e0 0d       	add	r30, r0
     ee2:	f1 1d       	adc	r31, r1
     ee4:	16 94       	lsr	r1
     ee6:	07 94       	ror	r0
     ee8:	10 2c       	mov	r1, r0
     eea:	16 94       	lsr	r1
     eec:	01 18       	sub	r0, r1
     eee:	16 94       	lsr	r1
     ef0:	01 0c       	add	r0, r1
     ef2:	16 94       	lsr	r1
     ef4:	01 18       	sub	r0, r1
     ef6:	16 94       	lsr	r1
     ef8:	01 0c       	add	r0, r1
     efa:	16 94       	lsr	r1
     efc:	01 18       	sub	r0, r1
     efe:	16 94       	lsr	r1
     f00:	16 94       	lsr	r1
     f02:	01 0c       	add	r0, r1
     f04:	11 24       	eor	r1, r1
     f06:	e0 19       	sub	r30, r0
     f08:	f1 09       	sbc	r31, r1
     f0a:	a8 ee       	ldi	r26, 0xE8	; 232
     f0c:	b3 e0       	ldi	r27, 0x03	; 3
     f0e:	0e 94 af 21 	call	0x435e	; 0x435e <__muluhisi3>
     f12:	6e 0f       	add	r22, r30
     f14:	7f 1f       	adc	r23, r31
     f16:	81 1d       	adc	r24, r1
     f18:	91 1d       	adc	r25, r1
     f1a:	08 95       	ret

00000f1c <delay>:
delay():
     f1c:	8f 92       	push	r8
     f1e:	9f 92       	push	r9
     f20:	af 92       	push	r10
     f22:	bf 92       	push	r11
     f24:	cf 92       	push	r12
     f26:	df 92       	push	r13
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	4b 01       	movw	r8, r22
     f2e:	5c 01       	movw	r10, r24
     f30:	b0 df       	rcall	.-160    	; 0xe92 <micros>
     f32:	6b 01       	movw	r12, r22
     f34:	7c 01       	movw	r14, r24
     f36:	ad df       	rcall	.-166    	; 0xe92 <micros>
     f38:	6c 19       	sub	r22, r12
     f3a:	7d 09       	sbc	r23, r13
     f3c:	8e 09       	sbc	r24, r14
     f3e:	9f 09       	sbc	r25, r15
     f40:	68 3e       	cpi	r22, 0xE8	; 232
     f42:	73 40       	sbci	r23, 0x03	; 3
     f44:	81 05       	cpc	r24, r1
     f46:	91 05       	cpc	r25, r1
     f48:	b0 f3       	brcs	.-20     	; 0xf36 <delay+0x1a>
     f4a:	21 e0       	ldi	r18, 0x01	; 1
     f4c:	82 1a       	sub	r8, r18
     f4e:	91 08       	sbc	r9, r1
     f50:	a1 08       	sbc	r10, r1
     f52:	b1 08       	sbc	r11, r1
     f54:	88 ee       	ldi	r24, 0xE8	; 232
     f56:	c8 0e       	add	r12, r24
     f58:	83 e0       	ldi	r24, 0x03	; 3
     f5a:	d8 1e       	adc	r13, r24
     f5c:	e1 1c       	adc	r14, r1
     f5e:	f1 1c       	adc	r15, r1
     f60:	81 14       	cp	r8, r1
     f62:	91 04       	cpc	r9, r1
     f64:	a1 04       	cpc	r10, r1
     f66:	b1 04       	cpc	r11, r1
     f68:	31 f7       	brne	.-52     	; 0xf36 <delay+0x1a>
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	df 90       	pop	r13
     f70:	cf 90       	pop	r12
     f72:	bf 90       	pop	r11
     f74:	af 90       	pop	r10
     f76:	9f 90       	pop	r9
     f78:	8f 90       	pop	r8
     f7a:	08 95       	ret

00000f7c <millis>:
millis():
     f7c:	2f b7       	in	r18, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	60 91 68 41 	lds	r22, 0x4168	; 0x804168 <timer_millis>
     f84:	70 91 69 41 	lds	r23, 0x4169	; 0x804169 <timer_millis+0x1>
     f88:	80 91 6a 41 	lds	r24, 0x416A	; 0x80416a <timer_millis+0x2>
     f8c:	90 91 6b 41 	lds	r25, 0x416B	; 0x80416b <timer_millis+0x3>
     f90:	2f bf       	out	0x3f, r18	; 63
     f92:	08 95       	ret

00000f94 <hd44780::command(unsigned char)>:
command():
     f94:	8f 92       	push	r8
     f96:	9f 92       	push	r9
     f98:	af 92       	push	r10
     f9a:	bf 92       	push	r11
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	ec 01       	movw	r28, r24
     fa8:	16 2f       	mov	r17, r22
     faa:	e8 81       	ld	r30, Y
     fac:	f9 81       	ldd	r31, Y+1	; 0x01
     fae:	04 84       	ldd	r0, Z+12	; 0x0c
     fb0:	f5 85       	ldd	r31, Z+13	; 0x0d
     fb2:	e0 2d       	mov	r30, r0
     fb4:	46 2f       	mov	r20, r22
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	09 95       	icall
     fbc:	7c 01       	movw	r14, r24
     fbe:	11 50       	subi	r17, 0x01	; 1
     fc0:	12 30       	cpi	r17, 0x02	; 2
     fc2:	d0 f4       	brcc	.+52     	; 0xff8 <hd44780::command(unsigned char)+0x64>
     fc4:	19 86       	std	Y+9, r1	; 0x09
     fc6:	1a 86       	std	Y+10, r1	; 0x0a
     fc8:	88 88       	ldd	r8, Y+16	; 0x10
     fca:	99 88       	ldd	r9, Y+17	; 0x11
     fcc:	aa 88       	ldd	r10, Y+18	; 0x12
     fce:	bb 88       	ldd	r11, Y+19	; 0x13
markStart():
     fd0:	60 df       	rcall	.-320    	; 0xe92 <micros>
     fd2:	68 8f       	std	Y+24, r22	; 0x18
     fd4:	79 8f       	std	Y+25, r23	; 0x19
     fd6:	8a 8f       	std	Y+26, r24	; 0x1a
     fd8:	9b 8f       	std	Y+27, r25	; 0x1b
     fda:	8c 8e       	std	Y+28, r8	; 0x1c
     fdc:	9d 8e       	std	Y+29, r9	; 0x1d
     fde:	ae 8e       	std	Y+30, r10	; 0x1e
     fe0:	bf 8e       	std	Y+31, r11	; 0x1f
command():
     fe2:	c7 01       	movw	r24, r14
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	ff 90       	pop	r15
     fec:	ef 90       	pop	r14
     fee:	bf 90       	pop	r11
     ff0:	af 90       	pop	r10
     ff2:	9f 90       	pop	r9
     ff4:	8f 90       	pop	r8
     ff6:	08 95       	ret
     ff8:	8c 88       	ldd	r8, Y+20	; 0x14
     ffa:	9d 88       	ldd	r9, Y+21	; 0x15
     ffc:	ae 88       	ldd	r10, Y+22	; 0x16
     ffe:	bf 88       	ldd	r11, Y+23	; 0x17
    1000:	e7 cf       	rjmp	.-50     	; 0xfd0 <hd44780::command(unsigned char)+0x3c>

00001002 <hd44780::clear() [clone .constprop.25]>:
clear():
    1002:	61 e0       	ldi	r22, 0x01	; 1
    1004:	86 e6       	ldi	r24, 0x66	; 102
    1006:	9e e5       	ldi	r25, 0x5E	; 94
    1008:	c5 cf       	rjmp	.-118    	; 0xf94 <hd44780::command(unsigned char)>

0000100a <hd44780::setCursor(unsigned char, unsigned char)>:
setCursor():
    100a:	dc 01       	movw	r26, r24
    100c:	18 96       	adiw	r26, 0x08	; 8
    100e:	8c 91       	ld	r24, X
    1010:	18 97       	sbiw	r26, 0x08	; 8
    1012:	48 17       	cp	r20, r24
    1014:	10 f0       	brcs	.+4      	; 0x101a <hd44780::setCursor(unsigned char, unsigned char)+0x10>
    1016:	4f ef       	ldi	r20, 0xFF	; 255
    1018:	48 0f       	add	r20, r24
    101a:	1b 96       	adiw	r26, 0x0b	; 11
    101c:	9c 91       	ld	r25, X
    101e:	1b 97       	sbiw	r26, 0x0b	; 11
    1020:	99 23       	and	r25, r25
    1022:	89 f0       	breq	.+34     	; 0x1046 <hd44780::setCursor(unsigned char, unsigned char)+0x3c>
    1024:	17 96       	adiw	r26, 0x07	; 7
    1026:	9c 91       	ld	r25, X
    1028:	17 97       	sbiw	r26, 0x07	; 7
    102a:	69 17       	cp	r22, r25
    102c:	30 f0       	brcs	.+12     	; 0x103a <hd44780::setCursor(unsigned char, unsigned char)+0x30>
    102e:	69 1b       	sub	r22, r25
    1030:	4f 5f       	subi	r20, 0xFF	; 255
    1032:	48 17       	cp	r20, r24
    1034:	d0 f3       	brcs	.-12     	; 0x102a <hd44780::setCursor(unsigned char, unsigned char)+0x20>
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	f8 cf       	rjmp	.-16     	; 0x102a <hd44780::setCursor(unsigned char, unsigned char)+0x20>
    103a:	19 96       	adiw	r26, 0x09	; 9
    103c:	6c 93       	st	X, r22
    103e:	19 97       	sbiw	r26, 0x09	; 9
    1040:	1a 96       	adiw	r26, 0x0a	; 10
    1042:	4c 93       	st	X, r20
    1044:	1a 97       	sbiw	r26, 0x0a	; 10
    1046:	fd 01       	movw	r30, r26
    1048:	e4 0f       	add	r30, r20
    104a:	f1 1d       	adc	r31, r1
    104c:	84 85       	ldd	r24, Z+12	; 0x0c
    104e:	68 0f       	add	r22, r24
    1050:	60 68       	ori	r22, 0x80	; 128
    1052:	cd 01       	movw	r24, r26
    1054:	9f cf       	rjmp	.-194    	; 0xf94 <hd44780::command(unsigned char)>

00001056 <hd44780::write(unsigned char)>:
write():
    1056:	8f 92       	push	r8
    1058:	9f 92       	push	r9
    105a:	af 92       	push	r10
    105c:	bf 92       	push	r11
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	ec 01       	movw	r28, r24
    106c:	46 2f       	mov	r20, r22
_write():
    106e:	e8 81       	ld	r30, Y
    1070:	f9 81       	ldd	r31, Y+1	; 0x01
    1072:	04 84       	ldd	r0, Z+12	; 0x0c
    1074:	f5 85       	ldd	r31, Z+13	; 0x0d
    1076:	e0 2d       	mov	r30, r0
    1078:	61 e0       	ldi	r22, 0x01	; 1
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	09 95       	icall
    107e:	7c 01       	movw	r14, r24
    1080:	8c 88       	ldd	r8, Y+20	; 0x14
    1082:	9d 88       	ldd	r9, Y+21	; 0x15
    1084:	ae 88       	ldd	r10, Y+22	; 0x16
    1086:	bf 88       	ldd	r11, Y+23	; 0x17
markStart():
    1088:	04 df       	rcall	.-504    	; 0xe92 <micros>
    108a:	68 8f       	std	Y+24, r22	; 0x18
    108c:	79 8f       	std	Y+25, r23	; 0x19
    108e:	8a 8f       	std	Y+26, r24	; 0x1a
    1090:	9b 8f       	std	Y+27, r25	; 0x1b
    1092:	8c 8e       	std	Y+28, r8	; 0x1c
    1094:	9d 8e       	std	Y+29, r9	; 0x1d
    1096:	ae 8e       	std	Y+30, r10	; 0x1e
    1098:	bf 8e       	std	Y+31, r11	; 0x1f
_write():
    109a:	01 e0       	ldi	r16, 0x01	; 1
    109c:	10 e0       	ldi	r17, 0x00	; 0
    109e:	ef 28       	or	r14, r15
    10a0:	11 f0       	breq	.+4      	; 0x10a6 <hd44780::write(unsigned char)+0x50>
    10a2:	10 e0       	ldi	r17, 0x00	; 0
    10a4:	00 e0       	ldi	r16, 0x00	; 0
write():
    10a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    10a8:	88 23       	and	r24, r24
    10aa:	91 f0       	breq	.+36     	; 0x10d0 <hd44780::write(unsigned char)+0x7a>
    10ac:	89 85       	ldd	r24, Y+9	; 0x09
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	89 87       	std	Y+9, r24	; 0x09
    10b2:	9f 81       	ldd	r25, Y+7	; 0x07
    10b4:	89 17       	cp	r24, r25
    10b6:	60 f0       	brcs	.+24     	; 0x10d0 <hd44780::write(unsigned char)+0x7a>
    10b8:	19 86       	std	Y+9, r1	; 0x09
    10ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    10bc:	8f 5f       	subi	r24, 0xFF	; 255
    10be:	8a 87       	std	Y+10, r24	; 0x0a
    10c0:	98 85       	ldd	r25, Y+8	; 0x08
    10c2:	89 17       	cp	r24, r25
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <hd44780::write(unsigned char)+0x72>
    10c6:	1a 86       	std	Y+10, r1	; 0x0a
    10c8:	4a 85       	ldd	r20, Y+10	; 0x0a
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	ce 01       	movw	r24, r28
    10ce:	9d df       	rcall	.-198    	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
    10d0:	c8 01       	movw	r24, r16
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	ef 90       	pop	r14
    10de:	bf 90       	pop	r11
    10e0:	af 90       	pop	r10
    10e2:	9f 90       	pop	r9
    10e4:	8f 90       	pop	r8
    10e6:	08 95       	ret

000010e8 <hd44780::iosetContrast(unsigned char)>:
iosetContrast():
    10e8:	8d ef       	ldi	r24, 0xFD	; 253
    10ea:	9f ef       	ldi	r25, 0xFF	; 255
    10ec:	08 95       	ret

000010ee <hd44780::ioread(hd44780::iotype)>:
ioread():
    10ee:	8d ef       	ldi	r24, 0xFD	; 253
    10f0:	9f ef       	ldi	r25, 0xFF	; 255
    10f2:	08 95       	ret

000010f4 <Print::availableForWrite()>:
availableForWrite():
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	08 95       	ret

000010fa <getPalleteNumber()>:
getPalleteNumber():
    10fa:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    10fe:	84 30       	cpi	r24, 0x04	; 4
    1100:	19 f0       	breq	.+6      	; 0x1108 <getPalleteNumber()+0xe>
    1102:	80 91 97 4f 	lds	r24, 0x4F97	; 0x804f97 <currentValueLeft>
    1106:	08 95       	ret
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	08 95       	ret

0000110c <getTransitionFrames()>:
getTransitionFrames():
    110c:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    1110:	84 30       	cpi	r24, 0x04	; 4
    1112:	41 f4       	brne	.+16     	; 0x1124 <getTransitionFrames()+0x18>
    1114:	80 91 a0 4f 	lds	r24, 0x4FA0	; 0x804fa0 <currentValueRight+0x1>
    1118:	26 e0       	ldi	r18, 0x06	; 6
    111a:	82 9f       	mul	r24, r18
    111c:	c0 01       	movw	r24, r0
    111e:	11 24       	eor	r1, r1
    1120:	09 96       	adiw	r24, 0x09	; 9
    1122:	08 95       	ret
    1124:	88 30       	cpi	r24, 0x08	; 8
    1126:	39 f0       	breq	.+14     	; 0x1136 <getTransitionFrames()+0x2a>
    1128:	80 91 a0 4f 	lds	r24, 0x4FA0	; 0x804fa0 <currentValueRight+0x1>
    112c:	23 e0       	ldi	r18, 0x03	; 3
    112e:	82 9f       	mul	r24, r18
    1130:	c0 01       	movw	r24, r0
    1132:	11 24       	eor	r1, r1
    1134:	08 95       	ret
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	08 95       	ret

0000113c <getDwellFrames()>:
getDwellFrames():
    113c:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    1140:	84 30       	cpi	r24, 0x04	; 4
    1142:	51 f0       	breq	.+20     	; 0x1158 <getDwellFrames()+0x1c>
    1144:	88 30       	cpi	r24, 0x08	; 8
    1146:	41 f0       	breq	.+16     	; 0x1158 <getDwellFrames()+0x1c>
    1148:	80 91 a1 4f 	lds	r24, 0x4FA1	; 0x804fa1 <currentValueRight+0x2>
    114c:	24 e0       	ldi	r18, 0x04	; 4
    114e:	82 9f       	mul	r24, r18
    1150:	c0 01       	movw	r24, r0
    1152:	11 24       	eor	r1, r1
    1154:	02 96       	adiw	r24, 0x02	; 2
    1156:	08 95       	ret
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	08 95       	ret

0000115e <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>:
getDrift2Colors():
    115e:	2f 92       	push	r2
    1160:	3f 92       	push	r3
    1162:	4f 92       	push	r4
    1164:	5f 92       	push	r5
    1166:	6f 92       	push	r6
    1168:	7f 92       	push	r7
    116a:	8f 92       	push	r8
    116c:	9f 92       	push	r9
    116e:	af 92       	push	r10
    1170:	bf 92       	push	r11
    1172:	cf 92       	push	r12
    1174:	df 92       	push	r13
    1176:	ef 92       	push	r14
    1178:	ff 92       	push	r15
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	1c 01       	movw	r2, r24
    1184:	3b 01       	movw	r6, r22
    1186:	2a 01       	movw	r4, r20
    1188:	48 01       	movw	r8, r16
    118a:	59 01       	movw	r10, r18
    118c:	d7 df       	rcall	.-82     	; 0x113c <getDwellFrames()>
    118e:	6c 01       	movw	r12, r24
    1190:	bd df       	rcall	.-134    	; 0x110c <getTransitionFrames()>
    1192:	7c 01       	movw	r14, r24
    1194:	b2 df       	rcall	.-156    	; 0x10fa <getPalleteNumber()>
    1196:	18 2f       	mov	r17, r24
    1198:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	09 f0       	breq	.+2      	; 0x11a2 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x44>
    11a0:	5d c0       	rjmp	.+186    	; 0x125c <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0xfe>
    11a2:	82 e0       	ldi	r24, 0x02	; 2
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	81 56       	subi	r24, 0x61	; 97
    11a8:	90 4b       	sbci	r25, 0xB0	; 176
    11aa:	ec 01       	movw	r28, r24
    11ac:	88 81       	ld	r24, Y
    11ae:	88 23       	and	r24, r24
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x56>
    11b2:	57 c0       	rjmp	.+174    	; 0x1262 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x104>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	dc 01       	movw	r26, r24
    11ba:	c1 2f       	mov	r28, r17
    11bc:	d0 e0       	ldi	r29, 0x00	; 0
    11be:	c0 5b       	subi	r28, 0xB0	; 176
    11c0:	d6 4f       	sbci	r29, 0xF6	; 246
    11c2:	fe 01       	movw	r30, r28
    11c4:	44 91       	lpm	r20, Z
    11c6:	ec 0c       	add	r14, r12
    11c8:	fd 1c       	adc	r15, r13
    11ca:	bc 01       	movw	r22, r24
    11cc:	cd 01       	movw	r24, r26
    11ce:	68 0d       	add	r22, r8
    11d0:	79 1d       	adc	r23, r9
    11d2:	8a 1d       	adc	r24, r10
    11d4:	9b 1d       	adc	r25, r11
    11d6:	4e 9d       	mul	r20, r14
    11d8:	90 01       	movw	r18, r0
    11da:	4f 9d       	mul	r20, r15
    11dc:	30 0d       	add	r19, r0
    11de:	11 24       	eor	r1, r1
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	40 e0       	ldi	r20, 0x00	; 0
    11e4:	0e 94 bf 21 	call	0x437e	; 0x437e <__udivmodsi4>
    11e8:	97 01       	movw	r18, r14
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	0e 94 bf 21 	call	0x437e	; 0x437e <__udivmodsi4>
    11f2:	e2 2e       	mov	r14, r18
    11f4:	f1 2c       	mov	r15, r1
    11f6:	f8 e1       	ldi	r31, 0x18	; 24
    11f8:	1f 9f       	mul	r17, r31
    11fa:	50 01       	movw	r10, r0
    11fc:	11 24       	eor	r1, r1
    11fe:	f5 01       	movw	r30, r10
    1200:	03 e0       	ldi	r16, 0x03	; 3
    1202:	20 9f       	mul	r18, r16
    1204:	e0 0d       	add	r30, r0
    1206:	f1 1d       	adc	r31, r1
    1208:	11 24       	eor	r1, r1
    120a:	df 01       	movw	r26, r30
    120c:	ac 5c       	subi	r26, 0xCC	; 204
    120e:	ba 4f       	sbci	r27, 0xFA	; 250
    1210:	af 01       	movw	r20, r30
    1212:	4b 5c       	subi	r20, 0xCB	; 203
    1214:	5a 4f       	sbci	r21, 0xFA	; 250
    1216:	6c 15       	cp	r22, r12
    1218:	7d 05       	cpc	r23, r13
    121a:	40 f5       	brcc	.+80     	; 0x126c <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x10e>
    121c:	ed 5c       	subi	r30, 0xCD	; 205
    121e:	fa 4f       	sbci	r31, 0xFA	; 250
    1220:	e4 91       	lpm	r30, Z
    1222:	e1 01       	movw	r28, r2
    1224:	e8 83       	st	Y, r30
    1226:	fd 01       	movw	r30, r26
    1228:	a4 91       	lpm	r26, Z
    122a:	e3 01       	movw	r28, r6
    122c:	a8 83       	st	Y, r26
    122e:	fa 01       	movw	r30, r20
    1230:	44 91       	lpm	r20, Z
    1232:	e2 01       	movw	r28, r4
    1234:	48 83       	st	Y, r20
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	df 90       	pop	r13
    1244:	cf 90       	pop	r12
    1246:	bf 90       	pop	r11
    1248:	af 90       	pop	r10
    124a:	9f 90       	pop	r9
    124c:	8f 90       	pop	r8
    124e:	7f 90       	pop	r7
    1250:	6f 90       	pop	r6
    1252:	5f 90       	pop	r5
    1254:	4f 90       	pop	r4
    1256:	3f 90       	pop	r3
    1258:	2f 90       	pop	r2
    125a:	08 95       	ret
    125c:	83 e0       	ldi	r24, 0x03	; 3
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	a2 cf       	rjmp	.-188    	; 0x11a6 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x48>
    1262:	80 eb       	ldi	r24, 0xB0	; 176
    1264:	94 e0       	ldi	r25, 0x04	; 4
    1266:	a0 e0       	ldi	r26, 0x00	; 0
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	a7 cf       	rjmp	.-178    	; 0x11ba <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x5c>
    126c:	e8 e0       	ldi	r30, 0x08	; 8
    126e:	f7 e0       	ldi	r31, 0x07	; 7
    1270:	8f 01       	movw	r16, r30
    1272:	0c 19       	sub	r16, r12
    1274:	1d 09       	sbc	r17, r13
    1276:	68 01       	movw	r12, r16
    1278:	fe 01       	movw	r30, r28
    127a:	c4 91       	lpm	r28, Z
    127c:	ff ef       	ldi	r31, 0xFF	; 255
    127e:	ef 1a       	sub	r14, r31
    1280:	ff 0a       	sbc	r15, r31
    1282:	2f 5f       	subi	r18, 0xFF	; 255
    1284:	ce 15       	cp	r28, r14
    1286:	1f 04       	cpc	r1, r15
    1288:	09 f0       	breq	.+2      	; 0x128c <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x12e>
    128a:	0c f4       	brge	.+2      	; 0x128e <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x130>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	8b 01       	movw	r16, r22
    1290:	0d 57       	subi	r16, 0x7D	; 125
    1292:	1e 4b       	sbci	r17, 0xBE	; 190
    1294:	48 01       	movw	r8, r16
    1296:	8c 0c       	add	r8, r12
    1298:	9d 1c       	adc	r9, r13
    129a:	f4 01       	movw	r30, r8
    129c:	c0 81       	ld	r28, Z
    129e:	c5 01       	movw	r24, r10
    12a0:	f3 e0       	ldi	r31, 0x03	; 3
    12a2:	2f 9f       	mul	r18, r31
    12a4:	80 0d       	add	r24, r0
    12a6:	91 1d       	adc	r25, r1
    12a8:	11 24       	eor	r1, r1
    12aa:	fc 01       	movw	r30, r24
    12ac:	ec 5c       	subi	r30, 0xCC	; 204
    12ae:	fa 4f       	sbci	r31, 0xFA	; 250
    12b0:	d4 91       	lpm	r29, Z
    12b2:	fd 01       	movw	r30, r26
    12b4:	a4 91       	lpm	r26, Z
    12b6:	2f ef       	ldi	r18, 0xFF	; 255
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	2c 1b       	sub	r18, r28
    12bc:	31 09       	sbc	r19, r1
    12be:	a2 9f       	mul	r26, r18
    12c0:	b0 01       	movw	r22, r0
    12c2:	a3 9f       	mul	r26, r19
    12c4:	70 0d       	add	r23, r0
    12c6:	11 24       	eor	r1, r1
    12c8:	dc 9f       	mul	r29, r28
    12ca:	60 0d       	add	r22, r0
    12cc:	71 1d       	adc	r23, r1
    12ce:	11 24       	eor	r1, r1
    12d0:	f3 01       	movw	r30, r6
    12d2:	70 83       	st	Z, r23
    12d4:	8b 5c       	subi	r24, 0xCB	; 203
    12d6:	9a 4f       	sbci	r25, 0xFA	; 250
    12d8:	fc 01       	movw	r30, r24
    12da:	84 91       	lpm	r24, Z
    12dc:	fa 01       	movw	r30, r20
    12de:	44 91       	lpm	r20, Z
    12e0:	42 9f       	mul	r20, r18
    12e2:	b0 01       	movw	r22, r0
    12e4:	43 9f       	mul	r20, r19
    12e6:	70 0d       	add	r23, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	c8 9f       	mul	r28, r24
    12ec:	60 0d       	add	r22, r0
    12ee:	71 1d       	adc	r23, r1
    12f0:	11 24       	eor	r1, r1
    12f2:	e2 01       	movw	r28, r4
    12f4:	78 83       	st	Y, r23
    12f6:	9f cf       	rjmp	.-194    	; 0x1236 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0xd8>

000012f8 <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)>:
pushPixel():
    12f8:	22 23       	and	r18, r18
    12fa:	81 f0       	breq	.+32     	; 0x131c <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)+0x24>
    12fc:	e3 e4       	ldi	r30, 0x43	; 67
    12fe:	f0 e5       	ldi	r31, 0x50	; 80
    1300:	20 e5       	ldi	r18, 0x50	; 80
    1302:	3e e5       	ldi	r19, 0x5E	; 94
    1304:	93 81       	ldd	r25, Z+3	; 0x03
    1306:	91 93       	st	Z+, r25
    1308:	2e 17       	cp	r18, r30
    130a:	3f 07       	cpc	r19, r31
    130c:	d9 f7       	brne	.-10     	; 0x1304 <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)+0xc>
    130e:	80 93 50 5e 	sts	0x5E50, r24	; 0x805e50 <pixels+0xe0d>
    1312:	60 93 51 5e 	sts	0x5E51, r22	; 0x805e51 <pixels+0xe0e>
    1316:	40 93 52 5e 	sts	0x5E52, r20	; 0x805e52 <pixels+0xe0f>
    131a:	08 95       	ret
    131c:	e0 e5       	ldi	r30, 0x50	; 80
    131e:	fe e5       	ldi	r31, 0x5E	; 94
    1320:	92 91       	ld	r25, -Z
    1322:	93 83       	std	Z+3, r25	; 0x03
    1324:	90 e5       	ldi	r25, 0x50	; 80
    1326:	e3 34       	cpi	r30, 0x43	; 67
    1328:	f9 07       	cpc	r31, r25
    132a:	d1 f7       	brne	.-12     	; 0x1320 <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)+0x28>
    132c:	80 93 43 50 	sts	0x5043, r24	; 0x805043 <pixels>
    1330:	60 93 44 50 	sts	0x5044, r22	; 0x805044 <pixels+0x1>
    1334:	40 93 45 50 	sts	0x5045, r20	; 0x805045 <pixels+0x2>
    1338:	08 95       	ret

0000133a <getLeftVal(unsigned char)>:
getLeftVal():
    133a:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    133e:	20 91 07 40 	lds	r18, 0x4007	; 0x804007 <currentMode>
    1342:	98 e0       	ldi	r25, 0x08	; 8
    1344:	29 9f       	mul	r18, r25
    1346:	90 01       	movw	r18, r0
    1348:	11 24       	eor	r1, r1
    134a:	e2 0f       	add	r30, r18
    134c:	f3 2f       	mov	r31, r19
    134e:	f1 1d       	adc	r31, r1
    1350:	e5 5c       	subi	r30, 0xC5	; 197
    1352:	f9 4f       	sbci	r31, 0xF9	; 249
    1354:	e4 91       	lpm	r30, Z
    1356:	ef 31       	cpi	r30, 0x1F	; 31
    1358:	41 f4       	brne	.+16     	; 0x136a <getLeftVal(unsigned char)+0x30>
    135a:	80 32       	cpi	r24, 0x20	; 32
    135c:	08 f0       	brcs	.+2      	; 0x1360 <getLeftVal(unsigned char)+0x26>
    135e:	8f e1       	ldi	r24, 0x1F	; 31
    1360:	e8 2f       	mov	r30, r24
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	e7 50       	subi	r30, 0x07	; 7
    1366:	fb 4f       	sbci	r31, 0xFB	; 251
    1368:	84 91       	lpm	r24, Z
    136a:	08 95       	ret

0000136c <EERef::operator=(unsigned char)>:
operator=():
    136c:	3f b7       	in	r19, 0x3f	; 63
    136e:	20 91 02 10 	lds	r18, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    1372:	42 2f       	mov	r20, r18
    1374:	42 70       	andi	r20, 0x02	; 2
    1376:	21 fd       	sbrc	r18, 1
    1378:	fa cf       	rjmp	.-12     	; 0x136e <EERef::operator=(unsigned char)+0x2>
    137a:	f8 94       	cli
    137c:	2d e9       	ldi	r18, 0x9D	; 157
    137e:	24 bf       	out	0x34, r18	; 52
    1380:	40 93 00 10 	sts	0x1000, r20	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    1384:	43 e1       	ldi	r20, 0x13	; 19
    1386:	24 bf       	out	0x34, r18	; 52
    1388:	40 93 00 10 	sts	0x1000, r20	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    138c:	dc 01       	movw	r26, r24
    138e:	ed 91       	ld	r30, X+
    1390:	fc 91       	ld	r31, X
    1392:	f1 70       	andi	r31, 0x01	; 1
    1394:	fc 5e       	subi	r31, 0xEC	; 236
    1396:	60 83       	st	Z, r22
    1398:	3f bf       	out	0x3f, r19	; 63
    139a:	08 95       	ret

0000139c <UartClass::begin(unsigned long)>:
begin():
    139c:	dc 01       	movw	r26, r24
    139e:	ed 91       	ld	r30, X+
    13a0:	fc 91       	ld	r31, X
    13a2:	00 88       	ldd	r0, Z+16	; 0x10
    13a4:	f1 89       	ldd	r31, Z+17	; 0x11
    13a6:	e0 2d       	mov	r30, r0
    13a8:	23 e0       	ldi	r18, 0x03	; 3
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	09 94       	ijmp

000013ae <Print::flush()>:
flush():
    13ae:	08 95       	ret

000013b0 <digitalRead>:
check_valid_digital_pin():
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
digitalRead():
    13b4:	89 32       	cpi	r24, 0x29	; 41
    13b6:	a8 f4       	brcc	.+42     	; 0x13e2 <digitalRead+0x32>
    13b8:	f9 01       	movw	r30, r18
    13ba:	e8 58       	subi	r30, 0x88	; 136
    13bc:	ff 4b       	sbci	r31, 0xBF	; 191
    13be:	80 81       	ld	r24, Z
    13c0:	8f 3f       	cpi	r24, 0xFF	; 255
    13c2:	79 f0       	breq	.+30     	; 0x13e2 <digitalRead+0x32>
    13c4:	2f 55       	subi	r18, 0x5F	; 95
    13c6:	3f 4b       	sbci	r19, 0xBF	; 191
    13c8:	d9 01       	movw	r26, r18
    13ca:	ec 91       	ld	r30, X
    13cc:	b0 e2       	ldi	r27, 0x20	; 32
    13ce:	eb 9f       	mul	r30, r27
    13d0:	f0 01       	movw	r30, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	fc 5f       	subi	r31, 0xFC	; 252
    13d6:	90 85       	ldd	r25, Z+8	; 0x08
    13d8:	98 23       	and	r25, r24
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	19 f4       	brne	.+6      	; 0x13e4 <digitalRead+0x34>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	08 95       	ret
    13e2:	8f ef       	ldi	r24, 0xFF	; 255
    13e4:	08 95       	ret

000013e6 <digitalWrite>:
digitalWrite():
    13e6:	0f 93       	push	r16
    13e8:	1f 93       	push	r17
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	89 32       	cpi	r24, 0x29	; 41
    13f0:	08 f0       	brcs	.+2      	; 0x13f4 <digitalWrite+0xe>
    13f2:	7c c0       	rjmp	.+248    	; 0x14ec <digitalWrite+0x106>
check_valid_digital_pin():
    13f4:	90 e0       	ldi	r25, 0x00	; 0
digitalWrite():
    13f6:	dc 01       	movw	r26, r24
    13f8:	a8 58       	subi	r26, 0x88	; 136
    13fa:	bf 4b       	sbci	r27, 0xBF	; 191
    13fc:	2c 91       	ld	r18, X
    13fe:	2f 3f       	cpi	r18, 0xFF	; 255
    1400:	09 f4       	brne	.+2      	; 0x1404 <digitalWrite+0x1e>
    1402:	74 c0       	rjmp	.+232    	; 0x14ec <digitalWrite+0x106>
    1404:	8c 01       	movw	r16, r24
    1406:	0f 55       	subi	r16, 0x5F	; 95
    1408:	1f 4b       	sbci	r17, 0xBF	; 191
    140a:	e8 01       	movw	r28, r16
    140c:	e8 81       	ld	r30, Y
    140e:	d0 e2       	ldi	r29, 0x20	; 32
    1410:	ed 9f       	mul	r30, r29
    1412:	f0 01       	movw	r30, r0
    1414:	11 24       	eor	r1, r1
    1416:	fc 5f       	subi	r31, 0xFC	; 252
    1418:	61 11       	cpse	r22, r1
    141a:	33 c0       	rjmp	.+102    	; 0x1482 <digitalWrite+0x9c>
    141c:	26 83       	std	Z+6, r18	; 0x06
    141e:	30 81       	ld	r19, Z
    1420:	23 23       	and	r18, r19
    1422:	ac 01       	movw	r20, r24
    1424:	4b 5c       	subi	r20, 0xCB	; 203
    1426:	5f 4b       	sbci	r21, 0xBF	; 191
    1428:	21 11       	cpse	r18, r1
    142a:	11 c0       	rjmp	.+34     	; 0x144e <digitalWrite+0x68>
    142c:	ea 01       	movw	r28, r20
    142e:	28 81       	ld	r18, Y
    1430:	30 97       	sbiw	r30, 0x00	; 0
    1432:	49 f1       	breq	.+82     	; 0x1486 <digitalWrite+0xa0>
    1434:	28 30       	cpi	r18, 0x08	; 8
    1436:	38 f5       	brcc	.+78     	; 0x1486 <digitalWrite+0xa0>
    1438:	70 96       	adiw	r30, 0x10	; 16
    143a:	e2 0f       	add	r30, r18
    143c:	f1 1d       	adc	r31, r1
    143e:	3f b7       	in	r19, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	20 81       	ld	r18, Z
    1444:	61 11       	cpse	r22, r1
    1446:	22 c0       	rjmp	.+68     	; 0x148c <digitalWrite+0xa6>
    1448:	27 7f       	andi	r18, 0xF7	; 247
    144a:	20 83       	st	Z, r18
    144c:	3f bf       	out	0x3f, r19	; 63
digitalPinToTimerNow():
    144e:	fa 01       	movw	r30, r20
    1450:	30 81       	ld	r19, Z
    1452:	3f 3f       	cpi	r19, 0xFF	; 255
    1454:	09 f4       	brne	.+2      	; 0x1458 <digitalWrite+0x72>
    1456:	4a c0       	rjmp	.+148    	; 0x14ec <digitalWrite+0x106>
    1458:	e8 01       	movw	r28, r16
    145a:	28 81       	ld	r18, Y
    145c:	36 30       	cpi	r19, 0x06	; 6
    145e:	58 f5       	brcc	.+86     	; 0x14b6 <digitalWrite+0xd0>
    1460:	30 91 e6 05 	lds	r19, 0x05E6	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
    1464:	43 2f       	mov	r20, r19
    1466:	47 70       	andi	r20, 0x07	; 7
    1468:	24 13       	cpse	r18, r20
    146a:	12 c0       	rjmp	.+36     	; 0x1490 <digitalWrite+0xaa>
turnOffPWM():
    146c:	ec 91       	ld	r30, X
    146e:	e5 30       	cpi	r30, 0x05	; 5
    1470:	08 f0       	brcs	.+2      	; 0x1474 <digitalWrite+0x8e>
    1472:	ee 0f       	add	r30, r30
    1474:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7e0a01>
    1478:	e0 95       	com	r30
    147a:	e8 23       	and	r30, r24
    147c:	e0 93 01 0a 	sts	0x0A01, r30	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7e0a01>
    1480:	35 c0       	rjmp	.+106    	; 0x14ec <digitalWrite+0x106>
digitalWrite():
    1482:	25 83       	std	Z+5, r18	; 0x05
    1484:	cc cf       	rjmp	.-104    	; 0x141e <digitalWrite+0x38>
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	e0 e0       	ldi	r30, 0x00	; 0
    148a:	d9 cf       	rjmp	.-78     	; 0x143e <digitalWrite+0x58>
    148c:	28 60       	ori	r18, 0x08	; 8
    148e:	dd cf       	rjmp	.-70     	; 0x144a <digitalWrite+0x64>
digitalPinToTimerNow():
    1490:	38 71       	andi	r19, 0x18	; 24
    1492:	69 f4       	brne	.+26     	; 0x14ae <digitalWrite+0xc8>
    1494:	21 30       	cpi	r18, 0x01	; 1
    1496:	79 f4       	brne	.+30     	; 0x14b6 <digitalWrite+0xd0>
turnOffPWM():
    1498:	ec 91       	ld	r30, X
    149a:	e5 30       	cpi	r30, 0x05	; 5
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <digitalWrite+0xba>
    149e:	ee 0f       	add	r30, r30
    14a0:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <__TEXT_REGION_LENGTH__+0x7e0a41>
    14a4:	e0 95       	com	r30
    14a6:	e8 23       	and	r30, r24
    14a8:	e0 93 41 0a 	sts	0x0A41, r30	; 0x800a41 <__TEXT_REGION_LENGTH__+0x7e0a41>
    14ac:	1f c0       	rjmp	.+62     	; 0x14ec <digitalWrite+0x106>
digitalPinToTimerNow():
    14ae:	38 31       	cpi	r19, 0x18	; 24
    14b0:	11 f4       	brne	.+4      	; 0x14b6 <digitalWrite+0xd0>
    14b2:	26 30       	cpi	r18, 0x06	; 6
    14b4:	89 f3       	breq	.-30     	; 0x1498 <digitalWrite+0xb2>
    14b6:	84 5f       	subi	r24, 0xF4	; 244
    14b8:	9f 4b       	sbci	r25, 0xBF	; 191
    14ba:	fc 01       	movw	r30, r24
    14bc:	80 81       	ld	r24, Z
    14be:	85 ff       	sbrs	r24, 5
    14c0:	13 c0       	rjmp	.+38     	; 0x14e8 <digitalWrite+0x102>
    14c2:	30 e1       	ldi	r19, 0x10	; 16
    14c4:	83 9f       	mul	r24, r19
    14c6:	f0 01       	movw	r30, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	f7 5f       	subi	r31, 0xF7	; 247
    14cc:	91 81       	ldd	r25, Z+1	; 0x01
    14ce:	97 70       	andi	r25, 0x07	; 7
    14d0:	97 30       	cpi	r25, 0x07	; 7
    14d2:	61 f4       	brne	.+24     	; 0x14ec <digitalWrite+0x106>
turnOffPWM():
    14d4:	ec 91       	ld	r30, X
    14d6:	85 32       	cpi	r24, 0x25	; 37
    14d8:	70 f4       	brcc	.+28     	; 0x14f6 <digitalWrite+0x110>
    14da:	80 32       	cpi	r24, 0x20	; 32
    14dc:	98 f4       	brcc	.+38     	; 0x1504 <digitalWrite+0x11e>
    14de:	88 30       	cpi	r24, 0x08	; 8
    14e0:	e1 f2       	breq	.-72     	; 0x149a <digitalWrite+0xb4>
    14e2:	80 31       	cpi	r24, 0x10	; 16
    14e4:	21 f2       	breq	.-120    	; 0x146e <digitalWrite+0x88>
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <digitalWrite+0x106>
    14e8:	81 11       	cpse	r24, r1
    14ea:	f4 cf       	rjmp	.-24     	; 0x14d4 <digitalWrite+0xee>
digitalWrite():
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret
turnOffPWM():
    14f6:	80 34       	cpi	r24, 0x40	; 64
    14f8:	71 f0       	breq	.+28     	; 0x1516 <digitalWrite+0x130>
    14fa:	80 38       	cpi	r24, 0x80	; 128
    14fc:	b9 f7       	brne	.-18     	; 0x14ec <digitalWrite+0x106>
    14fe:	10 92 a0 06 	sts	0x06A0, r1	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
    1502:	f4 cf       	rjmp	.-24     	; 0x14ec <digitalWrite+0x106>
    1504:	90 e1       	ldi	r25, 0x10	; 16
    1506:	89 9f       	mul	r24, r25
    1508:	f0 01       	movw	r30, r0
    150a:	11 24       	eor	r1, r1
    150c:	f7 5f       	subi	r31, 0xF7	; 247
    150e:	81 81       	ldd	r24, Z+1	; 0x01
    1510:	8f 7e       	andi	r24, 0xEF	; 239
    1512:	81 83       	std	Z+1, r24	; 0x01
    1514:	eb cf       	rjmp	.-42     	; 0x14ec <digitalWrite+0x106>
    1516:	80 91 92 0b 	lds	r24, 0x0B92	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    151a:	8e 23       	and	r24, r30
    151c:	39 f3       	breq	.-50     	; 0x14ec <digitalWrite+0x106>
    151e:	c0 e2       	ldi	r28, 0x20	; 32
    1520:	2c 9f       	mul	r18, r28
    1522:	90 01       	movw	r18, r0
    1524:	11 24       	eor	r1, r1
    1526:	3c 5f       	subi	r19, 0xFC	; 252
    1528:	e8 30       	cpi	r30, 0x08	; 8
    152a:	30 f5       	brcc	.+76     	; 0x1578 <digitalWrite+0x192>
    152c:	20 5f       	subi	r18, 0xF0	; 240
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	e2 0f       	add	r30, r18
    1532:	f3 2f       	mov	r31, r19
    1534:	f1 1d       	adc	r31, r1
    1536:	4f b7       	in	r20, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	90 91 80 0b 	lds	r25, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    153e:	9e 7f       	andi	r25, 0xFE	; 254
    1540:	90 93 80 0b 	sts	0x0B80, r25	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    1544:	90 91 8e 0b 	lds	r25, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
    1548:	90 ff       	sbrs	r25, 0
    154a:	fc cf       	rjmp	.-8      	; 0x1544 <digitalWrite+0x15e>
    154c:	20 91 92 0b 	lds	r18, 0x0B92	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	80 95       	com	r24
    1554:	90 95       	com	r25
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	82 23       	and	r24, r18
    155a:	93 23       	and	r25, r19
    155c:	28 ed       	ldi	r18, 0xD8	; 216
    155e:	24 bf       	out	0x34, r18	; 52
    1560:	80 93 92 0b 	sts	0x0B92, r24	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    1564:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    1568:	81 60       	ori	r24, 0x01	; 1
    156a:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    156e:	80 81       	ld	r24, Z
    1570:	8f 77       	andi	r24, 0x7F	; 127
    1572:	80 83       	st	Z, r24
    1574:	4f bf       	out	0x3f, r20	; 63
    1576:	ba cf       	rjmp	.-140    	; 0x14ec <digitalWrite+0x106>
digitalWrite():
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	e0 e0       	ldi	r30, 0x00	; 0
    157c:	dc cf       	rjmp	.-72     	; 0x1536 <digitalWrite+0x150>

0000157e <hd44780_pinIO::write4bits(unsigned char)>:
write4bits():
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	8c 01       	movw	r16, r24
    1586:	c6 2f       	mov	r28, r22
    1588:	fc 01       	movw	r30, r24
    158a:	83 a1       	ldd	r24, Z+35	; 0x23
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	c0 ff       	sbrs	r28, 0
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	29 df       	rcall	.-430    	; 0x13e6 <digitalWrite>
    1594:	f8 01       	movw	r30, r16
    1596:	84 a1       	ldd	r24, Z+36	; 0x24
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	c1 ff       	sbrs	r28, 1
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	23 df       	rcall	.-442    	; 0x13e6 <digitalWrite>
    15a0:	f8 01       	movw	r30, r16
    15a2:	85 a1       	ldd	r24, Z+37	; 0x25
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	c2 ff       	sbrs	r28, 2
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	1d df       	rcall	.-454    	; 0x13e6 <digitalWrite>
    15ac:	f8 01       	movw	r30, r16
    15ae:	86 a1       	ldd	r24, Z+38	; 0x26
    15b0:	61 e0       	ldi	r22, 0x01	; 1
    15b2:	c3 ff       	sbrs	r28, 3
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	14 cf       	rjmp	.-472    	; 0x13e6 <digitalWrite>

000015be <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)>:
iowrite():
    15be:	4f 92       	push	r4
    15c0:	5f 92       	push	r5
    15c2:	6f 92       	push	r6
    15c4:	7f 92       	push	r7
    15c6:	8f 92       	push	r8
    15c8:	9f 92       	push	r9
    15ca:	af 92       	push	r10
    15cc:	bf 92       	push	r11
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	ec 01       	movw	r28, r24
    15da:	7b 01       	movw	r14, r22
    15dc:	14 2f       	mov	r17, r20
    15de:	88 a1       	ldd	r24, Y+32	; 0x20
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	91 e0       	ldi	r25, 0x01	; 1
    15e4:	e9 16       	cp	r14, r25
    15e6:	f1 04       	cpc	r15, r1
    15e8:	09 f0       	breq	.+2      	; 0x15ec <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x2e>
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	fc de       	rcall	.-520    	; 0x13e6 <digitalWrite>
    15ee:	61 2f       	mov	r22, r17
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	84 e0       	ldi	r24, 0x04	; 4
    15f4:	75 95       	asr	r23
    15f6:	67 95       	ror	r22
    15f8:	8a 95       	dec	r24
    15fa:	e1 f7       	brne	.-8      	; 0x15f4 <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x36>
    15fc:	ce 01       	movw	r24, r28
    15fe:	bf df       	rcall	.-130    	; 0x157e <hd44780_pinIO::write4bits(unsigned char)>
waitReady():
    1600:	8c 8c       	ldd	r8, Y+28	; 0x1c
    1602:	9d 8c       	ldd	r9, Y+29	; 0x1d
    1604:	ae 8c       	ldd	r10, Y+30	; 0x1e
    1606:	bf 8c       	ldd	r11, Y+31	; 0x1f
    1608:	48 8c       	ldd	r4, Y+24	; 0x18
    160a:	59 8c       	ldd	r5, Y+25	; 0x19
    160c:	6a 8c       	ldd	r6, Y+26	; 0x1a
    160e:	7b 8c       	ldd	r7, Y+27	; 0x1b
_ZN7hd4478010_waitReadyEmm.isra.0():
    1610:	40 dc       	rcall	.-1920   	; 0xe92 <micros>
    1612:	64 19       	sub	r22, r4
    1614:	75 09       	sbc	r23, r5
    1616:	86 09       	sbc	r24, r6
    1618:	97 09       	sbc	r25, r7
    161a:	68 15       	cp	r22, r8
    161c:	79 05       	cpc	r23, r9
    161e:	8a 05       	cpc	r24, r10
    1620:	9b 05       	cpc	r25, r11
    1622:	b0 f3       	brcs	.-20     	; 0x1610 <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x52>
_ZN13hd44780_pinIO11pulseEnableEv.isra.2():
    1624:	61 e0       	ldi	r22, 0x01	; 1
    1626:	8a a1       	ldd	r24, Y+34	; 0x22
    1628:	de de       	rcall	.-580    	; 0x13e6 <digitalWrite>
_delay_us():
    162a:	88 e0       	ldi	r24, 0x08	; 8
    162c:	8a 95       	dec	r24
    162e:	f1 f7       	brne	.-4      	; 0x162c <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x6e>
_ZN13hd44780_pinIO11pulseEnableEv.isra.2():
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	8a a1       	ldd	r24, Y+34	; 0x22
    1634:	d8 de       	rcall	.-592    	; 0x13e6 <digitalWrite>
iowrite():
    1636:	92 e0       	ldi	r25, 0x02	; 2
    1638:	e9 16       	cp	r14, r25
    163a:	f1 04       	cpc	r15, r1
    163c:	69 f0       	breq	.+26     	; 0x1658 <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x9a>
    163e:	61 2f       	mov	r22, r17
    1640:	6f 70       	andi	r22, 0x0F	; 15
    1642:	ce 01       	movw	r24, r28
    1644:	9c df       	rcall	.-200    	; 0x157e <hd44780_pinIO::write4bits(unsigned char)>
_ZN13hd44780_pinIO11pulseEnableEv.isra.2():
    1646:	61 e0       	ldi	r22, 0x01	; 1
    1648:	8a a1       	ldd	r24, Y+34	; 0x22
    164a:	cd de       	rcall	.-614    	; 0x13e6 <digitalWrite>
_delay_us():
    164c:	88 e0       	ldi	r24, 0x08	; 8
    164e:	8a 95       	dec	r24
    1650:	f1 f7       	brne	.-4      	; 0x164e <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x90>
_ZN13hd44780_pinIO11pulseEnableEv.isra.2():
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	8a a1       	ldd	r24, Y+34	; 0x22
    1656:	c7 de       	rcall	.-626    	; 0x13e6 <digitalWrite>
iowrite():
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	1f 91       	pop	r17
    1662:	ff 90       	pop	r15
    1664:	ef 90       	pop	r14
    1666:	bf 90       	pop	r11
    1668:	af 90       	pop	r10
    166a:	9f 90       	pop	r9
    166c:	8f 90       	pop	r8
    166e:	7f 90       	pop	r7
    1670:	6f 90       	pop	r6
    1672:	5f 90       	pop	r5
    1674:	4f 90       	pop	r4
    1676:	08 95       	ret

00001678 <hd44780::command4bit(unsigned char) [clone .constprop.8]>:
command4bit():
    1678:	cf 92       	push	r12
    167a:	df 92       	push	r13
    167c:	ef 92       	push	r14
    167e:	ff 92       	push	r15
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	48 2f       	mov	r20, r24
    168a:	62 e0       	ldi	r22, 0x02	; 2
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	86 e6       	ldi	r24, 0x66	; 102
    1690:	9e e5       	ldi	r25, 0x5E	; 94
    1692:	95 df       	rcall	.-214    	; 0x15be <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)>
    1694:	8c 01       	movw	r16, r24
    1696:	c6 e6       	ldi	r28, 0x66	; 102
    1698:	de e5       	ldi	r29, 0x5E	; 94
    169a:	cc 88       	ldd	r12, Y+20	; 0x14
    169c:	dd 88       	ldd	r13, Y+21	; 0x15
    169e:	ee 88       	ldd	r14, Y+22	; 0x16
    16a0:	ff 88       	ldd	r15, Y+23	; 0x17
markStart():
    16a2:	f7 db       	rcall	.-2066   	; 0xe92 <micros>
    16a4:	68 8f       	std	Y+24, r22	; 0x18
    16a6:	79 8f       	std	Y+25, r23	; 0x19
    16a8:	8a 8f       	std	Y+26, r24	; 0x1a
    16aa:	9b 8f       	std	Y+27, r25	; 0x1b
    16ac:	cc 8e       	std	Y+28, r12	; 0x1c
    16ae:	dd 8e       	std	Y+29, r13	; 0x1d
    16b0:	ee 8e       	std	Y+30, r14	; 0x1e
    16b2:	ff 8e       	std	Y+31, r15	; 0x1f
command4bit():
    16b4:	c8 01       	movw	r24, r16
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	ff 90       	pop	r15
    16c0:	ef 90       	pop	r14
    16c2:	df 90       	pop	r13
    16c4:	cf 90       	pop	r12
    16c6:	08 95       	ret

000016c8 <hd44780_pinIO::ioread(hd44780::iotype)>:
ioread():
    16c8:	8f 92       	push	r8
    16ca:	9f 92       	push	r9
    16cc:	af 92       	push	r10
    16ce:	bf 92       	push	r11
    16d0:	cf 92       	push	r12
    16d2:	df 92       	push	r13
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	dc 01       	movw	r26, r24
    16e2:	91 96       	adiw	r26, 0x21	; 33
    16e4:	2c 91       	ld	r18, X
    16e6:	2f 3f       	cpi	r18, 0xFF	; 255
    16e8:	09 f4       	brne	.+2      	; 0x16ec <hd44780_pinIO::ioread(hd44780::iotype)+0x24>
    16ea:	5e c1       	rjmp	.+700    	; 0x19a8 <hd44780_pinIO::ioread(hd44780::iotype)+0x2e0>
    16ec:	8b 01       	movw	r16, r22
    16ee:	ec 01       	movw	r28, r24
waitReady():
    16f0:	cc 8c       	ldd	r12, Y+28	; 0x1c
    16f2:	dd 8c       	ldd	r13, Y+29	; 0x1d
    16f4:	ee 8c       	ldd	r14, Y+30	; 0x1e
    16f6:	ff 8c       	ldd	r15, Y+31	; 0x1f
    16f8:	88 8c       	ldd	r8, Y+24	; 0x18
    16fa:	99 8c       	ldd	r9, Y+25	; 0x19
    16fc:	aa 8c       	ldd	r10, Y+26	; 0x1a
    16fe:	bb 8c       	ldd	r11, Y+27	; 0x1b
_ZN7hd4478010_waitReadyEmm.isra.0():
    1700:	c8 db       	rcall	.-2160   	; 0xe92 <micros>
    1702:	68 19       	sub	r22, r8
    1704:	79 09       	sbc	r23, r9
    1706:	8a 09       	sbc	r24, r10
    1708:	9b 09       	sbc	r25, r11
    170a:	6c 15       	cp	r22, r12
    170c:	7d 05       	cpc	r23, r13
    170e:	8e 05       	cpc	r24, r14
    1710:	9f 05       	cpc	r25, r15
    1712:	b0 f3       	brcs	.-20     	; 0x1700 <hd44780_pinIO::ioread(hd44780::iotype)+0x38>
ioread():
    1714:	8b a1       	ldd	r24, Y+35	; 0x23
_pinMode():
    1716:	89 32       	cpi	r24, 0x29	; 41
    1718:	28 f5       	brcc	.+74     	; 0x1764 <hd44780_pinIO::ioread(hd44780::iotype)+0x9c>
check_valid_digital_pin():
    171a:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    171c:	fc 01       	movw	r30, r24
    171e:	e8 58       	subi	r30, 0x88	; 136
    1720:	ff 4b       	sbci	r31, 0xBF	; 191
    1722:	20 81       	ld	r18, Z
    1724:	2f 3f       	cpi	r18, 0xFF	; 255
    1726:	f1 f0       	breq	.+60     	; 0x1764 <hd44780_pinIO::ioread(hd44780::iotype)+0x9c>
    1728:	fc 01       	movw	r30, r24
    172a:	ef 55       	subi	r30, 0x5F	; 95
    172c:	ff 4b       	sbci	r31, 0xBF	; 191
    172e:	a0 81       	ld	r26, Z
    1730:	e0 e2       	ldi	r30, 0x20	; 32
    1732:	ae 9f       	mul	r26, r30
    1734:	d0 01       	movw	r26, r0
    1736:	11 24       	eor	r1, r1
    1738:	bc 5f       	subi	r27, 0xFC	; 252
    173a:	8b 5c       	subi	r24, 0xCB	; 203
    173c:	9f 4b       	sbci	r25, 0xBF	; 191
    173e:	fc 01       	movw	r30, r24
    1740:	30 81       	ld	r19, Z
ioread():
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	e0 e0       	ldi	r30, 0x00	; 0
_pinMode():
    1746:	38 30       	cpi	r19, 0x08	; 8
    1748:	28 f4       	brcc	.+10     	; 0x1754 <hd44780_pinIO::ioread(hd44780::iotype)+0x8c>
    174a:	cd 01       	movw	r24, r26
    174c:	40 96       	adiw	r24, 0x10	; 16
    174e:	fc 01       	movw	r30, r24
    1750:	e3 0f       	add	r30, r19
    1752:	f1 1d       	adc	r31, r1
    1754:	9f b7       	in	r25, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	12 96       	adiw	r26, 0x02	; 2
    175a:	2c 93       	st	X, r18
    175c:	80 81       	ld	r24, Z
    175e:	87 7f       	andi	r24, 0xF7	; 247
    1760:	80 83       	st	Z, r24
    1762:	9f bf       	out	0x3f, r25	; 63
ioread():
    1764:	8c a1       	ldd	r24, Y+36	; 0x24
_pinMode():
    1766:	89 32       	cpi	r24, 0x29	; 41
    1768:	28 f5       	brcc	.+74     	; 0x17b4 <hd44780_pinIO::ioread(hd44780::iotype)+0xec>
check_valid_digital_pin():
    176a:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    176c:	fc 01       	movw	r30, r24
    176e:	e8 58       	subi	r30, 0x88	; 136
    1770:	ff 4b       	sbci	r31, 0xBF	; 191
    1772:	20 81       	ld	r18, Z
    1774:	2f 3f       	cpi	r18, 0xFF	; 255
    1776:	f1 f0       	breq	.+60     	; 0x17b4 <hd44780_pinIO::ioread(hd44780::iotype)+0xec>
    1778:	fc 01       	movw	r30, r24
    177a:	ef 55       	subi	r30, 0x5F	; 95
    177c:	ff 4b       	sbci	r31, 0xBF	; 191
    177e:	a0 81       	ld	r26, Z
    1780:	f0 e2       	ldi	r31, 0x20	; 32
    1782:	af 9f       	mul	r26, r31
    1784:	d0 01       	movw	r26, r0
    1786:	11 24       	eor	r1, r1
    1788:	bc 5f       	subi	r27, 0xFC	; 252
    178a:	8b 5c       	subi	r24, 0xCB	; 203
    178c:	9f 4b       	sbci	r25, 0xBF	; 191
    178e:	fc 01       	movw	r30, r24
    1790:	30 81       	ld	r19, Z
ioread():
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	e0 e0       	ldi	r30, 0x00	; 0
_pinMode():
    1796:	38 30       	cpi	r19, 0x08	; 8
    1798:	28 f4       	brcc	.+10     	; 0x17a4 <hd44780_pinIO::ioread(hd44780::iotype)+0xdc>
    179a:	cd 01       	movw	r24, r26
    179c:	40 96       	adiw	r24, 0x10	; 16
    179e:	fc 01       	movw	r30, r24
    17a0:	e3 0f       	add	r30, r19
    17a2:	f1 1d       	adc	r31, r1
    17a4:	9f b7       	in	r25, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	12 96       	adiw	r26, 0x02	; 2
    17aa:	2c 93       	st	X, r18
    17ac:	80 81       	ld	r24, Z
    17ae:	87 7f       	andi	r24, 0xF7	; 247
    17b0:	80 83       	st	Z, r24
    17b2:	9f bf       	out	0x3f, r25	; 63
ioread():
    17b4:	8d a1       	ldd	r24, Y+37	; 0x25
_pinMode():
    17b6:	89 32       	cpi	r24, 0x29	; 41
    17b8:	28 f5       	brcc	.+74     	; 0x1804 <hd44780_pinIO::ioread(hd44780::iotype)+0x13c>
check_valid_digital_pin():
    17ba:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    17bc:	fc 01       	movw	r30, r24
    17be:	e8 58       	subi	r30, 0x88	; 136
    17c0:	ff 4b       	sbci	r31, 0xBF	; 191
    17c2:	20 81       	ld	r18, Z
    17c4:	2f 3f       	cpi	r18, 0xFF	; 255
    17c6:	f1 f0       	breq	.+60     	; 0x1804 <hd44780_pinIO::ioread(hd44780::iotype)+0x13c>
    17c8:	fc 01       	movw	r30, r24
    17ca:	ef 55       	subi	r30, 0x5F	; 95
    17cc:	ff 4b       	sbci	r31, 0xBF	; 191
    17ce:	a0 81       	ld	r26, Z
    17d0:	f0 e2       	ldi	r31, 0x20	; 32
    17d2:	af 9f       	mul	r26, r31
    17d4:	d0 01       	movw	r26, r0
    17d6:	11 24       	eor	r1, r1
    17d8:	bc 5f       	subi	r27, 0xFC	; 252
    17da:	8b 5c       	subi	r24, 0xCB	; 203
    17dc:	9f 4b       	sbci	r25, 0xBF	; 191
    17de:	fc 01       	movw	r30, r24
    17e0:	30 81       	ld	r19, Z
ioread():
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	e0 e0       	ldi	r30, 0x00	; 0
_pinMode():
    17e6:	38 30       	cpi	r19, 0x08	; 8
    17e8:	28 f4       	brcc	.+10     	; 0x17f4 <hd44780_pinIO::ioread(hd44780::iotype)+0x12c>
    17ea:	cd 01       	movw	r24, r26
    17ec:	40 96       	adiw	r24, 0x10	; 16
    17ee:	fc 01       	movw	r30, r24
    17f0:	e3 0f       	add	r30, r19
    17f2:	f1 1d       	adc	r31, r1
    17f4:	9f b7       	in	r25, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	12 96       	adiw	r26, 0x02	; 2
    17fa:	2c 93       	st	X, r18
    17fc:	80 81       	ld	r24, Z
    17fe:	87 7f       	andi	r24, 0xF7	; 247
    1800:	80 83       	st	Z, r24
    1802:	9f bf       	out	0x3f, r25	; 63
ioread():
    1804:	8e a1       	ldd	r24, Y+38	; 0x26
_pinMode():
    1806:	89 32       	cpi	r24, 0x29	; 41
    1808:	28 f5       	brcc	.+74     	; 0x1854 <hd44780_pinIO::ioread(hd44780::iotype)+0x18c>
check_valid_digital_pin():
    180a:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    180c:	fc 01       	movw	r30, r24
    180e:	e8 58       	subi	r30, 0x88	; 136
    1810:	ff 4b       	sbci	r31, 0xBF	; 191
    1812:	20 81       	ld	r18, Z
    1814:	2f 3f       	cpi	r18, 0xFF	; 255
    1816:	f1 f0       	breq	.+60     	; 0x1854 <hd44780_pinIO::ioread(hd44780::iotype)+0x18c>
    1818:	fc 01       	movw	r30, r24
    181a:	ef 55       	subi	r30, 0x5F	; 95
    181c:	ff 4b       	sbci	r31, 0xBF	; 191
    181e:	a0 81       	ld	r26, Z
    1820:	f0 e2       	ldi	r31, 0x20	; 32
    1822:	af 9f       	mul	r26, r31
    1824:	d0 01       	movw	r26, r0
    1826:	11 24       	eor	r1, r1
    1828:	bc 5f       	subi	r27, 0xFC	; 252
    182a:	8b 5c       	subi	r24, 0xCB	; 203
    182c:	9f 4b       	sbci	r25, 0xBF	; 191
    182e:	fc 01       	movw	r30, r24
    1830:	30 81       	ld	r19, Z
ioread():
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	e0 e0       	ldi	r30, 0x00	; 0
_pinMode():
    1836:	38 30       	cpi	r19, 0x08	; 8
    1838:	28 f4       	brcc	.+10     	; 0x1844 <hd44780_pinIO::ioread(hd44780::iotype)+0x17c>
    183a:	cd 01       	movw	r24, r26
    183c:	40 96       	adiw	r24, 0x10	; 16
    183e:	fc 01       	movw	r30, r24
    1840:	e3 0f       	add	r30, r19
    1842:	f1 1d       	adc	r31, r1
    1844:	9f b7       	in	r25, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	12 96       	adiw	r26, 0x02	; 2
    184a:	2c 93       	st	X, r18
    184c:	80 81       	ld	r24, Z
    184e:	87 7f       	andi	r24, 0xF7	; 247
    1850:	80 83       	st	Z, r24
    1852:	9f bf       	out	0x3f, r25	; 63
    1854:	88 a1       	ldd	r24, Y+32	; 0x20
ioread():
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	01 30       	cpi	r16, 0x01	; 1
    185a:	11 05       	cpc	r17, r1
    185c:	09 f0       	breq	.+2      	; 0x1860 <hd44780_pinIO::ioread(hd44780::iotype)+0x198>
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	c2 dd       	rcall	.-1148   	; 0x13e6 <digitalWrite>
    1862:	61 e0       	ldi	r22, 0x01	; 1
    1864:	89 a1       	ldd	r24, Y+33	; 0x21
    1866:	bf dd       	rcall	.-1154   	; 0x13e6 <digitalWrite>
    1868:	61 e0       	ldi	r22, 0x01	; 1
    186a:	8a a1       	ldd	r24, Y+34	; 0x22
    186c:	bc dd       	rcall	.-1160   	; 0x13e6 <digitalWrite>
_delay_us():
    186e:	f8 e0       	ldi	r31, 0x08	; 8
    1870:	fa 95       	dec	r31
    1872:	f1 f7       	brne	.-4      	; 0x1870 <hd44780_pinIO::ioread(hd44780::iotype)+0x1a8>
ioread():
    1874:	8b a1       	ldd	r24, Y+35	; 0x23
    1876:	9c dd       	rcall	.-1224   	; 0x13b0 <digitalRead>
    1878:	10 e0       	ldi	r17, 0x00	; 0
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	09 f4       	brne	.+2      	; 0x1880 <hd44780_pinIO::ioread(hd44780::iotype)+0x1b8>
    187e:	10 e1       	ldi	r17, 0x10	; 16
    1880:	8c a1       	ldd	r24, Y+36	; 0x24
    1882:	96 dd       	rcall	.-1236   	; 0x13b0 <digitalRead>
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	09 f4       	brne	.+2      	; 0x188a <hd44780_pinIO::ioread(hd44780::iotype)+0x1c2>
    1888:	10 62       	ori	r17, 0x20	; 32
    188a:	8d a1       	ldd	r24, Y+37	; 0x25
    188c:	91 dd       	rcall	.-1246   	; 0x13b0 <digitalRead>
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	09 f4       	brne	.+2      	; 0x1894 <hd44780_pinIO::ioread(hd44780::iotype)+0x1cc>
    1892:	10 64       	ori	r17, 0x40	; 64
    1894:	8e a1       	ldd	r24, Y+38	; 0x26
    1896:	8c dd       	rcall	.-1256   	; 0x13b0 <digitalRead>
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	09 f4       	brne	.+2      	; 0x189e <hd44780_pinIO::ioread(hd44780::iotype)+0x1d6>
    189c:	10 68       	ori	r17, 0x80	; 128
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	8a a1       	ldd	r24, Y+34	; 0x22
    18a2:	a1 dd       	rcall	.-1214   	; 0x13e6 <digitalWrite>
_delay_us():
    18a4:	38 e0       	ldi	r19, 0x08	; 8
    18a6:	3a 95       	dec	r19
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <hd44780_pinIO::ioread(hd44780::iotype)+0x1de>
ioread():
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	8a a1       	ldd	r24, Y+34	; 0x22
    18ae:	9b dd       	rcall	.-1226   	; 0x13e6 <digitalWrite>
_delay_us():
    18b0:	88 e0       	ldi	r24, 0x08	; 8
    18b2:	8a 95       	dec	r24
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <hd44780_pinIO::ioread(hd44780::iotype)+0x1ea>
ioread():
    18b6:	8b a1       	ldd	r24, Y+35	; 0x23
    18b8:	7b dd       	rcall	.-1290   	; 0x13b0 <digitalRead>
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <hd44780_pinIO::ioread(hd44780::iotype)+0x1f8>
    18be:	11 60       	ori	r17, 0x01	; 1
    18c0:	8c a1       	ldd	r24, Y+36	; 0x24
    18c2:	76 dd       	rcall	.-1300   	; 0x13b0 <digitalRead>
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	09 f4       	brne	.+2      	; 0x18ca <hd44780_pinIO::ioread(hd44780::iotype)+0x202>
    18c8:	12 60       	ori	r17, 0x02	; 2
    18ca:	8d a1       	ldd	r24, Y+37	; 0x25
    18cc:	71 dd       	rcall	.-1310   	; 0x13b0 <digitalRead>
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <hd44780_pinIO::ioread(hd44780::iotype)+0x20c>
    18d2:	14 60       	ori	r17, 0x04	; 4
    18d4:	8e a1       	ldd	r24, Y+38	; 0x26
    18d6:	6c dd       	rcall	.-1320   	; 0x13b0 <digitalRead>
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	09 f4       	brne	.+2      	; 0x18de <hd44780_pinIO::ioread(hd44780::iotype)+0x216>
    18dc:	18 60       	ori	r17, 0x08	; 8
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	8a a1       	ldd	r24, Y+34	; 0x22
    18e2:	81 dd       	rcall	.-1278   	; 0x13e6 <digitalWrite>
    18e4:	8b a1       	ldd	r24, Y+35	; 0x23
_pinMode():
    18e6:	89 32       	cpi	r24, 0x29	; 41
    18e8:	88 f4       	brcc	.+34     	; 0x190c <hd44780_pinIO::ioread(hd44780::iotype)+0x244>
check_valid_digital_pin():
    18ea:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    18ec:	fc 01       	movw	r30, r24
    18ee:	e8 58       	subi	r30, 0x88	; 136
    18f0:	ff 4b       	sbci	r31, 0xBF	; 191
    18f2:	20 81       	ld	r18, Z
    18f4:	2f 3f       	cpi	r18, 0xFF	; 255
    18f6:	51 f0       	breq	.+20     	; 0x190c <hd44780_pinIO::ioread(hd44780::iotype)+0x244>
    18f8:	8f 55       	subi	r24, 0x5F	; 95
    18fa:	9f 4b       	sbci	r25, 0xBF	; 191
    18fc:	dc 01       	movw	r26, r24
    18fe:	ec 91       	ld	r30, X
    1900:	b0 e2       	ldi	r27, 0x20	; 32
    1902:	eb 9f       	mul	r30, r27
    1904:	f0 01       	movw	r30, r0
    1906:	11 24       	eor	r1, r1
    1908:	fc 5f       	subi	r31, 0xFC	; 252
    190a:	21 83       	std	Z+1, r18	; 0x01
ioread():
    190c:	8c a1       	ldd	r24, Y+36	; 0x24
_pinMode():
    190e:	89 32       	cpi	r24, 0x29	; 41
    1910:	88 f4       	brcc	.+34     	; 0x1934 <hd44780_pinIO::ioread(hd44780::iotype)+0x26c>
check_valid_digital_pin():
    1912:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    1914:	fc 01       	movw	r30, r24
    1916:	e8 58       	subi	r30, 0x88	; 136
    1918:	ff 4b       	sbci	r31, 0xBF	; 191
    191a:	20 81       	ld	r18, Z
    191c:	2f 3f       	cpi	r18, 0xFF	; 255
    191e:	51 f0       	breq	.+20     	; 0x1934 <hd44780_pinIO::ioread(hd44780::iotype)+0x26c>
    1920:	8f 55       	subi	r24, 0x5F	; 95
    1922:	9f 4b       	sbci	r25, 0xBF	; 191
    1924:	dc 01       	movw	r26, r24
    1926:	ec 91       	ld	r30, X
    1928:	b0 e2       	ldi	r27, 0x20	; 32
    192a:	eb 9f       	mul	r30, r27
    192c:	f0 01       	movw	r30, r0
    192e:	11 24       	eor	r1, r1
    1930:	fc 5f       	subi	r31, 0xFC	; 252
    1932:	21 83       	std	Z+1, r18	; 0x01
ioread():
    1934:	8d a1       	ldd	r24, Y+37	; 0x25
_pinMode():
    1936:	89 32       	cpi	r24, 0x29	; 41
    1938:	88 f4       	brcc	.+34     	; 0x195c <hd44780_pinIO::ioread(hd44780::iotype)+0x294>
check_valid_digital_pin():
    193a:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    193c:	fc 01       	movw	r30, r24
    193e:	e8 58       	subi	r30, 0x88	; 136
    1940:	ff 4b       	sbci	r31, 0xBF	; 191
    1942:	20 81       	ld	r18, Z
    1944:	2f 3f       	cpi	r18, 0xFF	; 255
    1946:	51 f0       	breq	.+20     	; 0x195c <hd44780_pinIO::ioread(hd44780::iotype)+0x294>
    1948:	8f 55       	subi	r24, 0x5F	; 95
    194a:	9f 4b       	sbci	r25, 0xBF	; 191
    194c:	dc 01       	movw	r26, r24
    194e:	ec 91       	ld	r30, X
    1950:	b0 e2       	ldi	r27, 0x20	; 32
    1952:	eb 9f       	mul	r30, r27
    1954:	f0 01       	movw	r30, r0
    1956:	11 24       	eor	r1, r1
    1958:	fc 5f       	subi	r31, 0xFC	; 252
    195a:	21 83       	std	Z+1, r18	; 0x01
ioread():
    195c:	8e a1       	ldd	r24, Y+38	; 0x26
_pinMode():
    195e:	89 32       	cpi	r24, 0x29	; 41
    1960:	88 f4       	brcc	.+34     	; 0x1984 <hd44780_pinIO::ioread(hd44780::iotype)+0x2bc>
check_valid_digital_pin():
    1962:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    1964:	fc 01       	movw	r30, r24
    1966:	e8 58       	subi	r30, 0x88	; 136
    1968:	ff 4b       	sbci	r31, 0xBF	; 191
    196a:	20 81       	ld	r18, Z
    196c:	2f 3f       	cpi	r18, 0xFF	; 255
    196e:	51 f0       	breq	.+20     	; 0x1984 <hd44780_pinIO::ioread(hd44780::iotype)+0x2bc>
    1970:	8f 55       	subi	r24, 0x5F	; 95
    1972:	9f 4b       	sbci	r25, 0xBF	; 191
    1974:	dc 01       	movw	r26, r24
    1976:	ec 91       	ld	r30, X
    1978:	b0 e2       	ldi	r27, 0x20	; 32
    197a:	eb 9f       	mul	r30, r27
    197c:	f0 01       	movw	r30, r0
    197e:	11 24       	eor	r1, r1
    1980:	fc 5f       	subi	r31, 0xFC	; 252
    1982:	21 83       	std	Z+1, r18	; 0x01
ioread():
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	89 a1       	ldd	r24, Y+33	; 0x21
    1988:	2e dd       	rcall	.-1444   	; 0x13e6 <digitalWrite>
    198a:	81 2f       	mov	r24, r17
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	1f 91       	pop	r17
    1994:	0f 91       	pop	r16
    1996:	ff 90       	pop	r15
    1998:	ef 90       	pop	r14
    199a:	df 90       	pop	r13
    199c:	cf 90       	pop	r12
    199e:	bf 90       	pop	r11
    19a0:	af 90       	pop	r10
    19a2:	9f 90       	pop	r9
    19a4:	8f 90       	pop	r8
    19a6:	08 95       	ret
    19a8:	8d ef       	ldi	r24, 0xFD	; 253
    19aa:	9f ef       	ldi	r25, 0xFF	; 255
    19ac:	f0 cf       	rjmp	.-32     	; 0x198e <hd44780_pinIO::ioread(hd44780::iotype)+0x2c6>

000019ae <hd44780_pinIO::ioinit()>:
ioinit():
    19ae:	cf 92       	push	r12
    19b0:	df 92       	push	r13
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	8c 01       	movw	r16, r24
    19c0:	dc 01       	movw	r26, r24
    19c2:	90 96       	adiw	r26, 0x20	; 32
    19c4:	8c 91       	ld	r24, X
_pinMode():
    19c6:	89 32       	cpi	r24, 0x29	; 41
    19c8:	88 f4       	brcc	.+34     	; 0x19ec <hd44780_pinIO::ioinit()+0x3e>
check_valid_digital_pin():
    19ca:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    19cc:	fc 01       	movw	r30, r24
    19ce:	e8 58       	subi	r30, 0x88	; 136
    19d0:	ff 4b       	sbci	r31, 0xBF	; 191
    19d2:	20 81       	ld	r18, Z
    19d4:	2f 3f       	cpi	r18, 0xFF	; 255
    19d6:	51 f0       	breq	.+20     	; 0x19ec <hd44780_pinIO::ioinit()+0x3e>
    19d8:	8f 55       	subi	r24, 0x5F	; 95
    19da:	9f 4b       	sbci	r25, 0xBF	; 191
    19dc:	dc 01       	movw	r26, r24
    19de:	ec 91       	ld	r30, X
    19e0:	b0 e2       	ldi	r27, 0x20	; 32
    19e2:	eb 9f       	mul	r30, r27
    19e4:	f0 01       	movw	r30, r0
    19e6:	11 24       	eor	r1, r1
    19e8:	fc 5f       	subi	r31, 0xFC	; 252
    19ea:	21 83       	std	Z+1, r18	; 0x01
ioinit():
    19ec:	f8 01       	movw	r30, r16
    19ee:	81 a1       	ldd	r24, Z+33	; 0x21
    19f0:	8f 3f       	cpi	r24, 0xFF	; 255
    19f2:	b1 f0       	breq	.+44     	; 0x1a20 <hd44780_pinIO::ioinit()+0x72>
_pinMode():
    19f4:	89 32       	cpi	r24, 0x29	; 41
    19f6:	90 f4       	brcc	.+36     	; 0x1a1c <hd44780_pinIO::ioinit()+0x6e>
check_valid_digital_pin():
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
    19fc:	f9 01       	movw	r30, r18
    19fe:	e8 58       	subi	r30, 0x88	; 136
    1a00:	ff 4b       	sbci	r31, 0xBF	; 191
    1a02:	90 81       	ld	r25, Z
    1a04:	9f 3f       	cpi	r25, 0xFF	; 255
    1a06:	51 f0       	breq	.+20     	; 0x1a1c <hd44780_pinIO::ioinit()+0x6e>
    1a08:	2f 55       	subi	r18, 0x5F	; 95
    1a0a:	3f 4b       	sbci	r19, 0xBF	; 191
    1a0c:	d9 01       	movw	r26, r18
    1a0e:	ec 91       	ld	r30, X
    1a10:	b0 e2       	ldi	r27, 0x20	; 32
    1a12:	eb 9f       	mul	r30, r27
    1a14:	f0 01       	movw	r30, r0
    1a16:	11 24       	eor	r1, r1
    1a18:	fc 5f       	subi	r31, 0xFC	; 252
    1a1a:	91 83       	std	Z+1, r25	; 0x01
ioinit():
    1a1c:	60 e0       	ldi	r22, 0x00	; 0
    1a1e:	e3 dc       	rcall	.-1594   	; 0x13e6 <digitalWrite>
    1a20:	f8 01       	movw	r30, r16
    1a22:	82 a1       	ldd	r24, Z+34	; 0x22
_pinMode():
    1a24:	89 32       	cpi	r24, 0x29	; 41
    1a26:	90 f4       	brcc	.+36     	; 0x1a4c <hd44780_pinIO::ioinit()+0x9e>
check_valid_digital_pin():
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
    1a2c:	f9 01       	movw	r30, r18
    1a2e:	e8 58       	subi	r30, 0x88	; 136
    1a30:	ff 4b       	sbci	r31, 0xBF	; 191
    1a32:	90 81       	ld	r25, Z
    1a34:	9f 3f       	cpi	r25, 0xFF	; 255
    1a36:	51 f0       	breq	.+20     	; 0x1a4c <hd44780_pinIO::ioinit()+0x9e>
    1a38:	2f 55       	subi	r18, 0x5F	; 95
    1a3a:	3f 4b       	sbci	r19, 0xBF	; 191
    1a3c:	d9 01       	movw	r26, r18
    1a3e:	ec 91       	ld	r30, X
    1a40:	b0 e2       	ldi	r27, 0x20	; 32
    1a42:	eb 9f       	mul	r30, r27
    1a44:	f0 01       	movw	r30, r0
    1a46:	11 24       	eor	r1, r1
    1a48:	fc 5f       	subi	r31, 0xFC	; 252
    1a4a:	91 83       	std	Z+1, r25	; 0x01
ioinit():
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	cb dc       	rcall	.-1642   	; 0x13e6 <digitalWrite>
    1a50:	f8 01       	movw	r30, r16
    1a52:	83 a1       	ldd	r24, Z+35	; 0x23
_pinMode():
    1a54:	89 32       	cpi	r24, 0x29	; 41
    1a56:	88 f4       	brcc	.+34     	; 0x1a7a <hd44780_pinIO::ioinit()+0xcc>
check_valid_digital_pin():
    1a58:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	e8 58       	subi	r30, 0x88	; 136
    1a5e:	ff 4b       	sbci	r31, 0xBF	; 191
    1a60:	20 81       	ld	r18, Z
    1a62:	2f 3f       	cpi	r18, 0xFF	; 255
    1a64:	51 f0       	breq	.+20     	; 0x1a7a <hd44780_pinIO::ioinit()+0xcc>
    1a66:	8f 55       	subi	r24, 0x5F	; 95
    1a68:	9f 4b       	sbci	r25, 0xBF	; 191
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	ec 91       	ld	r30, X
    1a6e:	b0 e2       	ldi	r27, 0x20	; 32
    1a70:	eb 9f       	mul	r30, r27
    1a72:	f0 01       	movw	r30, r0
    1a74:	11 24       	eor	r1, r1
    1a76:	fc 5f       	subi	r31, 0xFC	; 252
    1a78:	21 83       	std	Z+1, r18	; 0x01
ioinit():
    1a7a:	f8 01       	movw	r30, r16
    1a7c:	84 a1       	ldd	r24, Z+36	; 0x24
_pinMode():
    1a7e:	89 32       	cpi	r24, 0x29	; 41
    1a80:	88 f4       	brcc	.+34     	; 0x1aa4 <hd44780_pinIO::ioinit()+0xf6>
check_valid_digital_pin():
    1a82:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    1a84:	fc 01       	movw	r30, r24
    1a86:	e8 58       	subi	r30, 0x88	; 136
    1a88:	ff 4b       	sbci	r31, 0xBF	; 191
    1a8a:	20 81       	ld	r18, Z
    1a8c:	2f 3f       	cpi	r18, 0xFF	; 255
    1a8e:	51 f0       	breq	.+20     	; 0x1aa4 <hd44780_pinIO::ioinit()+0xf6>
    1a90:	8f 55       	subi	r24, 0x5F	; 95
    1a92:	9f 4b       	sbci	r25, 0xBF	; 191
    1a94:	dc 01       	movw	r26, r24
    1a96:	ec 91       	ld	r30, X
    1a98:	b0 e2       	ldi	r27, 0x20	; 32
    1a9a:	eb 9f       	mul	r30, r27
    1a9c:	f0 01       	movw	r30, r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	fc 5f       	subi	r31, 0xFC	; 252
    1aa2:	21 83       	std	Z+1, r18	; 0x01
ioinit():
    1aa4:	f8 01       	movw	r30, r16
    1aa6:	85 a1       	ldd	r24, Z+37	; 0x25
_pinMode():
    1aa8:	89 32       	cpi	r24, 0x29	; 41
    1aaa:	88 f4       	brcc	.+34     	; 0x1ace <hd44780_pinIO::ioinit()+0x120>
check_valid_digital_pin():
    1aac:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    1aae:	fc 01       	movw	r30, r24
    1ab0:	e8 58       	subi	r30, 0x88	; 136
    1ab2:	ff 4b       	sbci	r31, 0xBF	; 191
    1ab4:	20 81       	ld	r18, Z
    1ab6:	2f 3f       	cpi	r18, 0xFF	; 255
    1ab8:	51 f0       	breq	.+20     	; 0x1ace <hd44780_pinIO::ioinit()+0x120>
    1aba:	8f 55       	subi	r24, 0x5F	; 95
    1abc:	9f 4b       	sbci	r25, 0xBF	; 191
    1abe:	dc 01       	movw	r26, r24
    1ac0:	ec 91       	ld	r30, X
    1ac2:	b0 e2       	ldi	r27, 0x20	; 32
    1ac4:	eb 9f       	mul	r30, r27
    1ac6:	f0 01       	movw	r30, r0
    1ac8:	11 24       	eor	r1, r1
    1aca:	fc 5f       	subi	r31, 0xFC	; 252
    1acc:	21 83       	std	Z+1, r18	; 0x01
ioinit():
    1ace:	f8 01       	movw	r30, r16
    1ad0:	86 a1       	ldd	r24, Z+38	; 0x26
_pinMode():
    1ad2:	89 32       	cpi	r24, 0x29	; 41
    1ad4:	88 f4       	brcc	.+34     	; 0x1af8 <hd44780_pinIO::ioinit()+0x14a>
check_valid_digital_pin():
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    1ad8:	fc 01       	movw	r30, r24
    1ada:	e8 58       	subi	r30, 0x88	; 136
    1adc:	ff 4b       	sbci	r31, 0xBF	; 191
    1ade:	20 81       	ld	r18, Z
    1ae0:	2f 3f       	cpi	r18, 0xFF	; 255
    1ae2:	51 f0       	breq	.+20     	; 0x1af8 <hd44780_pinIO::ioinit()+0x14a>
    1ae4:	8f 55       	subi	r24, 0x5F	; 95
    1ae6:	9f 4b       	sbci	r25, 0xBF	; 191
    1ae8:	dc 01       	movw	r26, r24
    1aea:	ec 91       	ld	r30, X
    1aec:	b0 e2       	ldi	r27, 0x20	; 32
    1aee:	eb 9f       	mul	r30, r27
    1af0:	f0 01       	movw	r30, r0
    1af2:	11 24       	eor	r1, r1
    1af4:	fc 5f       	subi	r31, 0xFC	; 252
    1af6:	21 83       	std	Z+1, r18	; 0x01
ioinit():
    1af8:	f8 01       	movw	r30, r16
    1afa:	c7 a1       	ldd	r28, Z+39	; 0x27
    1afc:	cf 3f       	cpi	r28, 0xFF	; 255
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <hd44780_pinIO::ioinit()+0x154>
    1b00:	8a c0       	rjmp	.+276    	; 0x1c16 <hd44780_pinIO::ioinit()+0x268>
    1b02:	80 a5       	ldd	r24, Z+40	; 0x28
    1b04:	81 30       	cpi	r24, 0x01	; 1
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <hd44780_pinIO::ioinit()+0x15c>
    1b08:	71 c0       	rjmp	.+226    	; 0x1bec <hd44780_pinIO::ioinit()+0x23e>
    1b0a:	ec 2e       	mov	r14, r28
    1b0c:	f1 2c       	mov	r15, r1
_ZN13hd44780_pinIO9blPinTestEi.isra.3():
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	8c 2f       	mov	r24, r28
    1b12:	69 dc       	rcall	.-1838   	; 0x13e6 <digitalWrite>
_pinMode():
    1b14:	c9 32       	cpi	r28, 0x29	; 41
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <hd44780_pinIO::ioinit()+0x16c>
    1b18:	8f c0       	rjmp	.+286    	; 0x1c38 <hd44780_pinIO::ioinit()+0x28a>
    1b1a:	c7 01       	movw	r24, r14
    1b1c:	88 58       	subi	r24, 0x88	; 136
    1b1e:	9f 4b       	sbci	r25, 0xBF	; 191
    1b20:	6c 01       	movw	r12, r24
    1b22:	dc 01       	movw	r26, r24
    1b24:	8c 91       	ld	r24, X
    1b26:	8f 3f       	cpi	r24, 0xFF	; 255
    1b28:	f1 f0       	breq	.+60     	; 0x1b66 <hd44780_pinIO::ioinit()+0x1b8>
    1b2a:	f7 01       	movw	r30, r14
    1b2c:	ef 55       	subi	r30, 0x5F	; 95
    1b2e:	ff 4b       	sbci	r31, 0xBF	; 191
    1b30:	a0 81       	ld	r26, Z
    1b32:	e0 e2       	ldi	r30, 0x20	; 32
    1b34:	ae 9f       	mul	r26, r30
    1b36:	d0 01       	movw	r26, r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	bc 5f       	subi	r27, 0xFC	; 252
    1b3c:	f7 01       	movw	r30, r14
    1b3e:	eb 5c       	subi	r30, 0xCB	; 203
    1b40:	ff 4b       	sbci	r31, 0xBF	; 191
    1b42:	e0 81       	ld	r30, Z
    1b44:	e8 30       	cpi	r30, 0x08	; 8
    1b46:	08 f0       	brcs	.+2      	; 0x1b4a <hd44780_pinIO::ioinit()+0x19c>
    1b48:	71 c0       	rjmp	.+226    	; 0x1c2c <hd44780_pinIO::ioinit()+0x27e>
    1b4a:	9d 01       	movw	r18, r26
    1b4c:	20 5f       	subi	r18, 0xF0	; 240
    1b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b50:	e2 0f       	add	r30, r18
    1b52:	f3 2f       	mov	r31, r19
    1b54:	f1 1d       	adc	r31, r1
    1b56:	9f b7       	in	r25, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	12 96       	adiw	r26, 0x02	; 2
    1b5c:	8c 93       	st	X, r24
    1b5e:	80 81       	ld	r24, Z
    1b60:	87 7f       	andi	r24, 0xF7	; 247
    1b62:	80 83       	st	Z, r24
    1b64:	9f bf       	out	0x3f, r25	; 63
    1b66:	f6 01       	movw	r30, r12
    1b68:	80 81       	ld	r24, Z
    1b6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b6c:	51 f0       	breq	.+20     	; 0x1b82 <hd44780_pinIO::ioinit()+0x1d4>
    1b6e:	f7 01       	movw	r30, r14
    1b70:	ef 55       	subi	r30, 0x5F	; 95
    1b72:	ff 4b       	sbci	r31, 0xBF	; 191
    1b74:	e0 81       	ld	r30, Z
    1b76:	20 e2       	ldi	r18, 0x20	; 32
    1b78:	e2 9f       	mul	r30, r18
    1b7a:	f0 01       	movw	r30, r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	fc 5f       	subi	r31, 0xFC	; 252
    1b80:	81 83       	std	Z+1, r24	; 0x01
_ZN13hd44780_pinIO9blPinTestEi.isra.3():
    1b82:	61 e0       	ldi	r22, 0x01	; 1
    1b84:	8c 2f       	mov	r24, r28
    1b86:	2f dc       	rcall	.-1954   	; 0x13e6 <digitalWrite>
_delay_us():
    1b88:	88 e2       	ldi	r24, 0x28	; 40
    1b8a:	8a 95       	dec	r24
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <hd44780_pinIO::ioinit()+0x1dc>
_ZN13hd44780_pinIO9blPinTestEi.isra.3():
    1b8e:	8c 2f       	mov	r24, r28
    1b90:	0f dc       	rcall	.-2018   	; 0x13b0 <digitalRead>
    1b92:	d8 2f       	mov	r29, r24
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	8c 2f       	mov	r24, r28
    1b98:	26 dc       	rcall	.-1972   	; 0x13e6 <digitalWrite>
_pinMode():
    1b9a:	c9 32       	cpi	r28, 0x29	; 41
    1b9c:	08 f5       	brcc	.+66     	; 0x1be0 <hd44780_pinIO::ioinit()+0x232>
    1b9e:	d6 01       	movw	r26, r12
    1ba0:	8c 91       	ld	r24, X
    1ba2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ba4:	e9 f0       	breq	.+58     	; 0x1be0 <hd44780_pinIO::ioinit()+0x232>
    1ba6:	f7 01       	movw	r30, r14
    1ba8:	ef 55       	subi	r30, 0x5F	; 95
    1baa:	ff 4b       	sbci	r31, 0xBF	; 191
    1bac:	a0 81       	ld	r26, Z
    1bae:	e0 e2       	ldi	r30, 0x20	; 32
    1bb0:	ae 9f       	mul	r26, r30
    1bb2:	d0 01       	movw	r26, r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	bc 5f       	subi	r27, 0xFC	; 252
    1bb8:	f7 01       	movw	r30, r14
    1bba:	eb 5c       	subi	r30, 0xCB	; 203
    1bbc:	ff 4b       	sbci	r31, 0xBF	; 191
    1bbe:	e0 81       	ld	r30, Z
    1bc0:	e8 30       	cpi	r30, 0x08	; 8
    1bc2:	b8 f5       	brcc	.+110    	; 0x1c32 <hd44780_pinIO::ioinit()+0x284>
    1bc4:	9d 01       	movw	r18, r26
    1bc6:	20 5f       	subi	r18, 0xF0	; 240
    1bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bca:	e2 0f       	add	r30, r18
    1bcc:	f3 2f       	mov	r31, r19
    1bce:	f1 1d       	adc	r31, r1
    1bd0:	9f b7       	in	r25, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	12 96       	adiw	r26, 0x02	; 2
    1bd6:	8c 93       	st	X, r24
    1bd8:	80 81       	ld	r24, Z
    1bda:	87 7f       	andi	r24, 0xF7	; 247
    1bdc:	80 83       	st	Z, r24
    1bde:	9f bf       	out	0x3f, r25	; 63
_ZN13hd44780_pinIO9blPinTestEi.isra.3():
    1be0:	d1 30       	cpi	r29, 0x01	; 1
    1be2:	21 f0       	breq	.+8      	; 0x1bec <hd44780_pinIO::ioinit()+0x23e>
ioinit():
    1be4:	8e ef       	ldi	r24, 0xFE	; 254
    1be6:	d8 01       	movw	r26, r16
    1be8:	98 96       	adiw	r26, 0x28	; 40
    1bea:	8c 93       	st	X, r24
    1bec:	f8 01       	movw	r30, r16
    1bee:	87 a1       	ldd	r24, Z+39	; 0x27
_pinMode():
    1bf0:	89 32       	cpi	r24, 0x29	; 41
    1bf2:	88 f4       	brcc	.+34     	; 0x1c16 <hd44780_pinIO::ioinit()+0x268>
check_valid_digital_pin():
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	e8 58       	subi	r30, 0x88	; 136
    1bfa:	ff 4b       	sbci	r31, 0xBF	; 191
    1bfc:	20 81       	ld	r18, Z
    1bfe:	2f 3f       	cpi	r18, 0xFF	; 255
    1c00:	51 f0       	breq	.+20     	; 0x1c16 <hd44780_pinIO::ioinit()+0x268>
    1c02:	8f 55       	subi	r24, 0x5F	; 95
    1c04:	9f 4b       	sbci	r25, 0xBF	; 191
    1c06:	dc 01       	movw	r26, r24
    1c08:	ec 91       	ld	r30, X
    1c0a:	b0 e2       	ldi	r27, 0x20	; 32
    1c0c:	eb 9f       	mul	r30, r27
    1c0e:	f0 01       	movw	r30, r0
    1c10:	11 24       	eor	r1, r1
    1c12:	fc 5f       	subi	r31, 0xFC	; 252
    1c14:	21 83       	std	Z+1, r18	; 0x01
ioinit():
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	1f 91       	pop	r17
    1c20:	0f 91       	pop	r16
    1c22:	ff 90       	pop	r15
    1c24:	ef 90       	pop	r14
    1c26:	df 90       	pop	r13
    1c28:	cf 90       	pop	r12
    1c2a:	08 95       	ret
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	e0 e0       	ldi	r30, 0x00	; 0
    1c30:	92 cf       	rjmp	.-220    	; 0x1b56 <hd44780_pinIO::ioinit()+0x1a8>
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	e0 e0       	ldi	r30, 0x00	; 0
    1c36:	cc cf       	rjmp	.-104    	; 0x1bd0 <hd44780_pinIO::ioinit()+0x222>
_ZN13hd44780_pinIO9blPinTestEi.isra.3():
    1c38:	61 e0       	ldi	r22, 0x01	; 1
    1c3a:	8c 2f       	mov	r24, r28
    1c3c:	d4 db       	rcall	.-2136   	; 0x13e6 <digitalWrite>
_delay_us():
    1c3e:	f8 e2       	ldi	r31, 0x28	; 40
    1c40:	fa 95       	dec	r31
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <hd44780_pinIO::ioinit()+0x292>
_ZN13hd44780_pinIO9blPinTestEi.isra.3():
    1c44:	8c 2f       	mov	r24, r28
    1c46:	b4 db       	rcall	.-2200   	; 0x13b0 <digitalRead>
    1c48:	d8 2f       	mov	r29, r24
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	8c 2f       	mov	r24, r28
    1c4e:	cb db       	rcall	.-2154   	; 0x13e6 <digitalWrite>
    1c50:	c7 cf       	rjmp	.-114    	; 0x1be0 <hd44780_pinIO::ioinit()+0x232>

00001c52 <analogWrite>:
analogWrite():
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	89 32       	cpi	r24, 0x29	; 41
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <analogWrite+0xa>
    1c5a:	42 c0       	rjmp	.+132    	; 0x1ce0 <analogWrite+0x8e>
check_valid_digital_pin():
    1c5c:	48 2f       	mov	r20, r24
    1c5e:	50 e0       	ldi	r21, 0x00	; 0
analogWrite():
    1c60:	fa 01       	movw	r30, r20
    1c62:	e8 58       	subi	r30, 0x88	; 136
    1c64:	ff 4b       	sbci	r31, 0xBF	; 191
    1c66:	90 81       	ld	r25, Z
    1c68:	9f 3f       	cpi	r25, 0xFF	; 255
    1c6a:	d1 f1       	breq	.+116    	; 0x1ce0 <analogWrite+0x8e>
_pinMode():
    1c6c:	fa 01       	movw	r30, r20
    1c6e:	ef 55       	subi	r30, 0x5F	; 95
    1c70:	ff 4b       	sbci	r31, 0xBF	; 191
    1c72:	30 81       	ld	r19, Z
    1c74:	20 e2       	ldi	r18, 0x20	; 32
    1c76:	32 9f       	mul	r19, r18
    1c78:	d0 01       	movw	r26, r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	bc 5f       	subi	r27, 0xFC	; 252
    1c7e:	11 96       	adiw	r26, 0x01	; 1
    1c80:	9c 93       	st	X, r25
    1c82:	11 97       	sbiw	r26, 0x01	; 1
analogWrite():
    1c84:	fa 01       	movw	r30, r20
    1c86:	e4 5f       	subi	r30, 0xF4	; 244
    1c88:	ff 4b       	sbci	r31, 0xBF	; 191
    1c8a:	e0 81       	ld	r30, Z
    1c8c:	e0 38       	cpi	r30, 0x80	; 128
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <analogWrite+0x40>
    1c90:	d6 c0       	rjmp	.+428    	; 0x1e3e <analogWrite+0x1ec>
    1c92:	61 15       	cp	r22, r1
    1c94:	71 05       	cpc	r23, r1
    1c96:	21 f4       	brne	.+8      	; 0x1ca0 <analogWrite+0x4e>
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	a3 cb       	rjmp	.-2234   	; 0x13e6 <digitalWrite>
    1ca0:	6f 3f       	cpi	r22, 0xFF	; 255
    1ca2:	71 05       	cpc	r23, r1
    1ca4:	11 f4       	brne	.+4      	; 0x1caa <analogWrite+0x58>
    1ca6:	61 e0       	ldi	r22, 0x01	; 1
    1ca8:	f8 cf       	rjmp	.-16     	; 0x1c9a <analogWrite+0x48>
    1caa:	90 34       	cpi	r25, 0x40	; 64
    1cac:	08 f0       	brcs	.+2      	; 0x1cb0 <analogWrite+0x5e>
    1cae:	cb c0       	rjmp	.+406    	; 0x1e46 <analogWrite+0x1f4>
    1cb0:	20 91 e6 05 	lds	r18, 0x05E6	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
    1cb4:	f2 2f       	mov	r31, r18
    1cb6:	f7 70       	andi	r31, 0x07	; 7
    1cb8:	f3 13       	cpse	r31, r19
    1cba:	1a c0       	rjmp	.+52     	; 0x1cf0 <analogWrite+0x9e>
    1cbc:	e0 e0       	ldi	r30, 0x00	; 0
    1cbe:	95 30       	cpi	r25, 0x05	; 5
    1cc0:	10 f0       	brcs	.+4      	; 0x1cc6 <analogWrite+0x74>
    1cc2:	99 0f       	add	r25, r25
    1cc4:	e1 e0       	ldi	r30, 0x01	; 1
    1cc6:	89 2f       	mov	r24, r25
    1cc8:	84 74       	andi	r24, 0x44	; 68
    1cca:	69 f0       	breq	.+26     	; 0x1ce6 <analogWrite+0x94>
    1ccc:	ec 5f       	subi	r30, 0xFC	; 252
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	e8 5d       	subi	r30, 0xD8	; 216
    1cd2:	f5 4f       	sbci	r31, 0xF5	; 245
    1cd4:	60 83       	st	Z, r22
    1cd6:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7e0a01>
    1cda:	98 2b       	or	r25, r24
    1cdc:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7e0a01>
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	08 95       	ret
    1ce6:	89 2f       	mov	r24, r25
    1ce8:	82 72       	andi	r24, 0x22	; 34
    1cea:	89 f3       	breq	.-30     	; 0x1cce <analogWrite+0x7c>
    1cec:	ee 5f       	subi	r30, 0xFE	; 254
    1cee:	ef cf       	rjmp	.-34     	; 0x1cce <analogWrite+0x7c>
    1cf0:	28 71       	andi	r18, 0x18	; 24
    1cf2:	36 30       	cpi	r19, 0x06	; 6
    1cf4:	a9 f4       	brne	.+42     	; 0x1d20 <analogWrite+0xce>
    1cf6:	28 31       	cpi	r18, 0x18	; 24
    1cf8:	b9 f4       	brne	.+46     	; 0x1d28 <analogWrite+0xd6>
    1cfa:	e0 e0       	ldi	r30, 0x00	; 0
    1cfc:	95 30       	cpi	r25, 0x05	; 5
    1cfe:	10 f0       	brcs	.+4      	; 0x1d04 <analogWrite+0xb2>
    1d00:	99 0f       	add	r25, r25
    1d02:	e1 e0       	ldi	r30, 0x01	; 1
    1d04:	89 2f       	mov	r24, r25
    1d06:	84 74       	andi	r24, 0x44	; 68
    1d08:	d9 f0       	breq	.+54     	; 0x1d40 <analogWrite+0xee>
    1d0a:	ec 5f       	subi	r30, 0xFC	; 252
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	e8 59       	subi	r30, 0x98	; 152
    1d10:	f5 4f       	sbci	r31, 0xF5	; 245
    1d12:	60 83       	st	Z, r22
    1d14:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <__TEXT_REGION_LENGTH__+0x7e0a41>
    1d18:	98 2b       	or	r25, r24
    1d1a:	90 93 41 0a 	sts	0x0A41, r25	; 0x800a41 <__TEXT_REGION_LENGTH__+0x7e0a41>
    1d1e:	e0 cf       	rjmp	.-64     	; 0x1ce0 <analogWrite+0x8e>
    1d20:	31 30       	cpi	r19, 0x01	; 1
    1d22:	11 f4       	brne	.+4      	; 0x1d28 <analogWrite+0xd6>
    1d24:	22 23       	and	r18, r18
    1d26:	49 f3       	breq	.-46     	; 0x1cfa <analogWrite+0xa8>
    1d28:	e0 34       	cpi	r30, 0x40	; 64
    1d2a:	39 f1       	breq	.+78     	; 0x1d7a <analogWrite+0x128>
    1d2c:	70 f4       	brcc	.+28     	; 0x1d4a <analogWrite+0xf8>
    1d2e:	90 ee       	ldi	r25, 0xE0	; 224
    1d30:	9e 0f       	add	r25, r30
    1d32:	95 30       	cpi	r25, 0x05	; 5
    1d34:	90 f0       	brcs	.+36     	; 0x1d5a <analogWrite+0x108>
    1d36:	60 38       	cpi	r22, 0x80	; 128
    1d38:	71 05       	cpc	r23, r1
    1d3a:	0c f0       	brlt	.+2      	; 0x1d3e <analogWrite+0xec>
    1d3c:	b4 cf       	rjmp	.-152    	; 0x1ca6 <analogWrite+0x54>
    1d3e:	ac cf       	rjmp	.-168    	; 0x1c98 <analogWrite+0x46>
    1d40:	89 2f       	mov	r24, r25
    1d42:	82 72       	andi	r24, 0x22	; 34
    1d44:	19 f3       	breq	.-58     	; 0x1d0c <analogWrite+0xba>
    1d46:	ee 5f       	subi	r30, 0xFE	; 254
    1d48:	e1 cf       	rjmp	.-62     	; 0x1d0c <analogWrite+0xba>
    1d4a:	e0 38       	cpi	r30, 0x80	; 128
    1d4c:	a1 f7       	brne	.-24     	; 0x1d36 <analogWrite+0xe4>
    1d4e:	60 93 a3 06 	sts	0x06A3, r22	; 0x8006a3 <__TEXT_REGION_LENGTH__+0x7e06a3>
    1d52:	81 e4       	ldi	r24, 0x41	; 65
    1d54:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
    1d58:	c3 cf       	rjmp	.-122    	; 0x1ce0 <analogWrite+0x8e>
    1d5a:	90 e1       	ldi	r25, 0x10	; 16
    1d5c:	e9 9f       	mul	r30, r25
    1d5e:	f0 01       	movw	r30, r0
    1d60:	11 24       	eor	r1, r1
    1d62:	f7 5f       	subi	r31, 0xF7	; 247
    1d64:	91 81       	ldd	r25, Z+1	; 0x01
    1d66:	97 70       	andi	r25, 0x07	; 7
    1d68:	97 30       	cpi	r25, 0x07	; 7
    1d6a:	29 f7       	brne	.-54     	; 0x1d36 <analogWrite+0xe4>
    1d6c:	84 85       	ldd	r24, Z+12	; 0x0c
    1d6e:	84 87       	std	Z+12, r24	; 0x0c
    1d70:	65 87       	std	Z+13, r22	; 0x0d
    1d72:	81 81       	ldd	r24, Z+1	; 0x01
    1d74:	80 61       	ori	r24, 0x10	; 16
    1d76:	81 83       	std	Z+1, r24	; 0x01
    1d78:	b3 cf       	rjmp	.-154    	; 0x1ce0 <analogWrite+0x8e>
    1d7a:	61 15       	cp	r22, r1
    1d7c:	71 05       	cpc	r23, r1
    1d7e:	19 f0       	breq	.+6      	; 0x1d86 <analogWrite+0x134>
    1d80:	6f 3f       	cpi	r22, 0xFF	; 255
    1d82:	71 05       	cpc	r23, r1
    1d84:	11 f0       	breq	.+4      	; 0x1d8a <analogWrite+0x138>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	03 c0       	rjmp	.+6      	; 0x1d90 <analogWrite+0x13e>
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	70 e0       	ldi	r23, 0x00	; 0
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	2f ef       	ldi	r18, 0xFF	; 255
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	26 1b       	sub	r18, r22
    1d96:	37 0b       	sbc	r19, r23
    1d98:	60 91 ae 0b 	lds	r22, 0x0BAE	; 0x800bae <__TEXT_REGION_LENGTH__+0x7e0bae>
    1d9c:	60 91 af 0b 	lds	r22, 0x0BAF	; 0x800baf <__TEXT_REGION_LENGTH__+0x7e0baf>
    1da0:	66 23       	and	r22, r22
    1da2:	21 f0       	breq	.+8      	; 0x1dac <analogWrite+0x15a>
    1da4:	63 30       	cpi	r22, 0x03	; 3
    1da6:	b8 f5       	brcc	.+110    	; 0x1e16 <analogWrite+0x1c4>
    1da8:	22 0f       	add	r18, r18
    1daa:	33 1f       	adc	r19, r19
    1dac:	10 97       	sbiw	r26, 0x00	; 0
    1dae:	c1 f1       	breq	.+112    	; 0x1e20 <analogWrite+0x1ce>
    1db0:	4b 5c       	subi	r20, 0xCB	; 203
    1db2:	5f 4b       	sbci	r21, 0xBF	; 191
    1db4:	ea 01       	movw	r28, r20
    1db6:	e8 81       	ld	r30, Y
    1db8:	e8 30       	cpi	r30, 0x08	; 8
    1dba:	90 f5       	brcc	.+100    	; 0x1e20 <analogWrite+0x1ce>
    1dbc:	50 96       	adiw	r26, 0x10	; 16
    1dbe:	ea 0f       	add	r30, r26
    1dc0:	fb 2f       	mov	r31, r27
    1dc2:	f1 1d       	adc	r31, r1
    1dc4:	4f b7       	in	r20, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	21 50       	subi	r18, 0x01	; 1
    1dca:	31 09       	sbc	r19, r1
    1dcc:	59 2f       	mov	r21, r25
    1dce:	5a 7a       	andi	r21, 0xAA	; 170
    1dd0:	51 f1       	breq	.+84     	; 0x1e26 <analogWrite+0x1d4>
    1dd2:	20 93 ac 0b 	sts	0x0BAC, r18	; 0x800bac <__TEXT_REGION_LENGTH__+0x7e0bac>
    1dd6:	30 93 ad 0b 	sts	0x0BAD, r19	; 0x800bad <__TEXT_REGION_LENGTH__+0x7e0bad>
    1dda:	20 91 92 0b 	lds	r18, 0x0B92	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    1dde:	29 23       	and	r18, r25
    1de0:	39 f5       	brne	.+78     	; 0x1e30 <analogWrite+0x1de>
    1de2:	30 91 80 0b 	lds	r19, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    1de6:	23 2f       	mov	r18, r19
    1de8:	2e 7f       	andi	r18, 0xFE	; 254
    1dea:	20 93 80 0b 	sts	0x0B80, r18	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    1dee:	20 91 8e 0b 	lds	r18, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
    1df2:	20 ff       	sbrs	r18, 0
    1df4:	fc cf       	rjmp	.-8      	; 0x1dee <analogWrite+0x19c>
    1df6:	20 91 92 0b 	lds	r18, 0x0B92	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    1dfa:	92 2b       	or	r25, r18
    1dfc:	28 ed       	ldi	r18, 0xD8	; 216
    1dfe:	24 bf       	out	0x34, r18	; 52
    1e00:	90 93 92 0b 	sts	0x0B92, r25	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    1e04:	30 93 80 0b 	sts	0x0B80, r19	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    1e08:	81 11       	cpse	r24, r1
    1e0a:	16 c0       	rjmp	.+44     	; 0x1e38 <analogWrite+0x1e6>
    1e0c:	80 81       	ld	r24, Z
    1e0e:	8f 77       	andi	r24, 0x7F	; 127
    1e10:	80 83       	st	Z, r24
    1e12:	4f bf       	out	0x3f, r20	; 63
    1e14:	65 cf       	rjmp	.-310    	; 0x1ce0 <analogWrite+0x8e>
    1e16:	22 0f       	add	r18, r18
    1e18:	33 1f       	adc	r19, r19
    1e1a:	22 0f       	add	r18, r18
    1e1c:	33 1f       	adc	r19, r19
    1e1e:	c6 cf       	rjmp	.-116    	; 0x1dac <analogWrite+0x15a>
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	e0 e0       	ldi	r30, 0x00	; 0
    1e24:	cf cf       	rjmp	.-98     	; 0x1dc4 <analogWrite+0x172>
    1e26:	20 93 a8 0b 	sts	0x0BA8, r18	; 0x800ba8 <__TEXT_REGION_LENGTH__+0x7e0ba8>
    1e2a:	30 93 a9 0b 	sts	0x0BA9, r19	; 0x800ba9 <__TEXT_REGION_LENGTH__+0x7e0ba9>
    1e2e:	d5 cf       	rjmp	.-86     	; 0x1dda <analogWrite+0x188>
    1e30:	91 e0       	ldi	r25, 0x01	; 1
    1e32:	90 93 84 0b 	sts	0x0B84, r25	; 0x800b84 <__TEXT_REGION_LENGTH__+0x7e0b84>
    1e36:	e8 cf       	rjmp	.-48     	; 0x1e08 <analogWrite+0x1b6>
    1e38:	80 81       	ld	r24, Z
    1e3a:	80 68       	ori	r24, 0x80	; 128
    1e3c:	e9 cf       	rjmp	.-46     	; 0x1e10 <analogWrite+0x1be>
    1e3e:	90 34       	cpi	r25, 0x40	; 64
    1e40:	08 f4       	brcc	.+2      	; 0x1e44 <analogWrite+0x1f2>
    1e42:	36 cf       	rjmp	.-404    	; 0x1cb0 <analogWrite+0x5e>
    1e44:	84 cf       	rjmp	.-248    	; 0x1d4e <analogWrite+0xfc>
    1e46:	e0 32       	cpi	r30, 0x20	; 32
    1e48:	08 f4       	brcc	.+2      	; 0x1e4c <analogWrite+0x1fa>
    1e4a:	75 cf       	rjmp	.-278    	; 0x1d36 <analogWrite+0xe4>
    1e4c:	e5 32       	cpi	r30, 0x25	; 37
    1e4e:	08 f4       	brcc	.+2      	; 0x1e52 <analogWrite+0x200>
    1e50:	84 cf       	rjmp	.-248    	; 0x1d5a <analogWrite+0x108>
    1e52:	e0 34       	cpi	r30, 0x40	; 64
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <analogWrite+0x206>
    1e56:	97 cf       	rjmp	.-210    	; 0x1d86 <analogWrite+0x134>
    1e58:	6e cf       	rjmp	.-292    	; 0x1d36 <analogWrite+0xe4>

00001e5a <hd44780_pinIO::iosetBacklight(unsigned char)>:
iosetBacklight():
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	fc 01       	movw	r30, r24
    1e60:	87 a1       	ldd	r24, Z+39	; 0x27
    1e62:	8f 3f       	cpi	r24, 0xFF	; 255
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <hd44780_pinIO::iosetBacklight(unsigned char)+0xe>
    1e66:	65 c0       	rjmp	.+202    	; 0x1f32 <hd44780_pinIO::iosetBacklight(unsigned char)+0xd8>
    1e68:	90 a5       	ldd	r25, Z+40	; 0x28
    1e6a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e6c:	09 f0       	breq	.+2      	; 0x1e70 <hd44780_pinIO::iosetBacklight(unsigned char)+0x16>
    1e6e:	42 c0       	rjmp	.+132    	; 0x1ef4 <hd44780_pinIO::iosetBacklight(unsigned char)+0x9a>
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	66 23       	and	r22, r22
    1e76:	59 f1       	breq	.+86     	; 0x1ece <hd44780_pinIO::iosetBacklight(unsigned char)+0x74>
_pinMode():
    1e78:	89 32       	cpi	r24, 0x29	; 41
    1e7a:	18 f5       	brcc	.+70     	; 0x1ec2 <hd44780_pinIO::iosetBacklight(unsigned char)+0x68>
    1e7c:	f9 01       	movw	r30, r18
    1e7e:	e8 58       	subi	r30, 0x88	; 136
    1e80:	ff 4b       	sbci	r31, 0xBF	; 191
    1e82:	80 81       	ld	r24, Z
    1e84:	8f 3f       	cpi	r24, 0xFF	; 255
    1e86:	e9 f0       	breq	.+58     	; 0x1ec2 <hd44780_pinIO::iosetBacklight(unsigned char)+0x68>
    1e88:	f9 01       	movw	r30, r18
    1e8a:	ef 55       	subi	r30, 0x5F	; 95
    1e8c:	ff 4b       	sbci	r31, 0xBF	; 191
    1e8e:	a0 81       	ld	r26, Z
    1e90:	40 e2       	ldi	r20, 0x20	; 32
    1e92:	a4 9f       	mul	r26, r20
    1e94:	d0 01       	movw	r26, r0
    1e96:	11 24       	eor	r1, r1
    1e98:	bc 5f       	subi	r27, 0xFC	; 252
    1e9a:	2b 5c       	subi	r18, 0xCB	; 203
    1e9c:	3f 4b       	sbci	r19, 0xBF	; 191
    1e9e:	e9 01       	movw	r28, r18
    1ea0:	e8 81       	ld	r30, Y
    1ea2:	e8 30       	cpi	r30, 0x08	; 8
    1ea4:	88 f4       	brcc	.+34     	; 0x1ec8 <hd44780_pinIO::iosetBacklight(unsigned char)+0x6e>
    1ea6:	9d 01       	movw	r18, r26
    1ea8:	20 5f       	subi	r18, 0xF0	; 240
    1eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1eac:	e2 0f       	add	r30, r18
    1eae:	f3 2f       	mov	r31, r19
    1eb0:	f1 1d       	adc	r31, r1
    1eb2:	9f b7       	in	r25, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	12 96       	adiw	r26, 0x02	; 2
    1eb8:	8c 93       	st	X, r24
    1eba:	80 81       	ld	r24, Z
    1ebc:	87 7f       	andi	r24, 0xF7	; 247
    1ebe:	80 83       	st	Z, r24
    1ec0:	9f bf       	out	0x3f, r25	; 63
iosetBacklight():
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	37 c0       	rjmp	.+110    	; 0x1f36 <hd44780_pinIO::iosetBacklight(unsigned char)+0xdc>
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	e0 e0       	ldi	r30, 0x00	; 0
    1ecc:	f2 cf       	rjmp	.-28     	; 0x1eb2 <hd44780_pinIO::iosetBacklight(unsigned char)+0x58>
_pinMode():
    1ece:	89 32       	cpi	r24, 0x29	; 41
    1ed0:	c0 f7       	brcc	.-16     	; 0x1ec2 <hd44780_pinIO::iosetBacklight(unsigned char)+0x68>
    1ed2:	f9 01       	movw	r30, r18
    1ed4:	e8 58       	subi	r30, 0x88	; 136
    1ed6:	ff 4b       	sbci	r31, 0xBF	; 191
    1ed8:	80 81       	ld	r24, Z
    1eda:	8f 3f       	cpi	r24, 0xFF	; 255
    1edc:	91 f3       	breq	.-28     	; 0x1ec2 <hd44780_pinIO::iosetBacklight(unsigned char)+0x68>
    1ede:	2f 55       	subi	r18, 0x5F	; 95
    1ee0:	3f 4b       	sbci	r19, 0xBF	; 191
    1ee2:	d9 01       	movw	r26, r18
    1ee4:	ec 91       	ld	r30, X
    1ee6:	b0 e2       	ldi	r27, 0x20	; 32
    1ee8:	eb 9f       	mul	r30, r27
    1eea:	f0 01       	movw	r30, r0
    1eec:	11 24       	eor	r1, r1
    1eee:	fc 5f       	subi	r31, 0xFC	; 252
    1ef0:	81 83       	std	Z+1, r24	; 0x01
    1ef2:	e7 cf       	rjmp	.-50     	; 0x1ec2 <hd44780_pinIO::iosetBacklight(unsigned char)+0x68>
iosetBacklight():
    1ef4:	2a ed       	ldi	r18, 0xDA	; 218
    1ef6:	28 0f       	add	r18, r24
    1ef8:	22 30       	cpi	r18, 0x02	; 2
    1efa:	20 f0       	brcs	.+8      	; 0x1f04 <hd44780_pinIO::iosetBacklight(unsigned char)+0xaa>
    1efc:	2c ef       	ldi	r18, 0xFC	; 252
    1efe:	28 0f       	add	r18, r24
    1f00:	20 31       	cpi	r18, 0x10	; 16
    1f02:	60 f4       	brcc	.+24     	; 0x1f1c <hd44780_pinIO::iosetBacklight(unsigned char)+0xc2>
    1f04:	70 e0       	ldi	r23, 0x00	; 0
    1f06:	91 30       	cpi	r25, 0x01	; 1
    1f08:	11 f4       	brne	.+4      	; 0x1f0e <hd44780_pinIO::iosetBacklight(unsigned char)+0xb4>
    1f0a:	a3 de       	rcall	.-698    	; 0x1c52 <analogWrite>
    1f0c:	da cf       	rjmp	.-76     	; 0x1ec2 <hd44780_pinIO::iosetBacklight(unsigned char)+0x68>
    1f0e:	2f ef       	ldi	r18, 0xFF	; 255
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	e9 01       	movw	r28, r18
    1f14:	c6 1b       	sub	r28, r22
    1f16:	d7 0b       	sbc	r29, r23
    1f18:	be 01       	movw	r22, r28
    1f1a:	f7 cf       	rjmp	.-18     	; 0x1f0a <hd44780_pinIO::iosetBacklight(unsigned char)+0xb0>
    1f1c:	66 23       	and	r22, r22
    1f1e:	29 f0       	breq	.+10     	; 0x1f2a <hd44780_pinIO::iosetBacklight(unsigned char)+0xd0>
    1f20:	91 30       	cpi	r25, 0x01	; 1
    1f22:	29 f4       	brne	.+10     	; 0x1f2e <hd44780_pinIO::iosetBacklight(unsigned char)+0xd4>
    1f24:	61 e0       	ldi	r22, 0x01	; 1
    1f26:	5f da       	rcall	.-2882   	; 0x13e6 <digitalWrite>
    1f28:	cc cf       	rjmp	.-104    	; 0x1ec2 <hd44780_pinIO::iosetBacklight(unsigned char)+0x68>
    1f2a:	99 23       	and	r25, r25
    1f2c:	d9 f3       	breq	.-10     	; 0x1f24 <hd44780_pinIO::iosetBacklight(unsigned char)+0xca>
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	fa cf       	rjmp	.-12     	; 0x1f26 <hd44780_pinIO::iosetBacklight(unsigned char)+0xcc>
    1f32:	8d ef       	ldi	r24, 0xFD	; 253
    1f34:	9f ef       	ldi	r25, 0xFF	; 255
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	08 95       	ret

00001f3c <random(long, long)>:
random():
    1f3c:	8f 92       	push	r8
    1f3e:	9f 92       	push	r9
    1f40:	af 92       	push	r10
    1f42:	bf 92       	push	r11
    1f44:	cf 92       	push	r12
    1f46:	df 92       	push	r13
    1f48:	ef 92       	push	r14
    1f4a:	ff 92       	push	r15
    1f4c:	4b 01       	movw	r8, r22
    1f4e:	5c 01       	movw	r10, r24
    1f50:	82 16       	cp	r8, r18
    1f52:	93 06       	cpc	r9, r19
    1f54:	a4 06       	cpc	r10, r20
    1f56:	b5 06       	cpc	r11, r21
    1f58:	9c f4       	brge	.+38     	; 0x1f80 <random(long, long)+0x44>
    1f5a:	69 01       	movw	r12, r18
    1f5c:	7a 01       	movw	r14, r20
    1f5e:	c8 18       	sub	r12, r8
    1f60:	d9 08       	sbc	r13, r9
    1f62:	ea 08       	sbc	r14, r10
    1f64:	fb 08       	sbc	r15, r11
    1f66:	41 f0       	breq	.+16     	; 0x1f78 <random(long, long)+0x3c>
    1f68:	0e 94 3e 21 	call	0x427c	; 0x427c <random>
    1f6c:	a7 01       	movw	r20, r14
    1f6e:	96 01       	movw	r18, r12
    1f70:	0e 94 93 21 	call	0x4326	; 0x4326 <__divmodsi4>
    1f74:	6b 01       	movw	r12, r22
    1f76:	7c 01       	movw	r14, r24
    1f78:	8c 0c       	add	r8, r12
    1f7a:	9d 1c       	adc	r9, r13
    1f7c:	ae 1c       	adc	r10, r14
    1f7e:	bf 1c       	adc	r11, r15
    1f80:	c5 01       	movw	r24, r10
    1f82:	b4 01       	movw	r22, r8
    1f84:	ff 90       	pop	r15
    1f86:	ef 90       	pop	r14
    1f88:	df 90       	pop	r13
    1f8a:	cf 90       	pop	r12
    1f8c:	bf 90       	pop	r11
    1f8e:	af 90       	pop	r10
    1f90:	9f 90       	pop	r9
    1f92:	8f 90       	pop	r8
    1f94:	08 95       	ret

00001f96 <initColorsDrift2()>:
initColorsDrift2():
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	a9 d8       	rcall	.-3758   	; 0x10fa <getPalleteNumber()>
    1fa8:	e8 2f       	mov	r30, r24
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	e0 5b       	subi	r30, 0xB0	; 176
    1fae:	f6 4f       	sbci	r31, 0xF6	; 246
    1fb0:	c4 91       	lpm	r28, Z
    1fb2:	c4 d8       	rcall	.-3704   	; 0x113c <getDwellFrames()>
    1fb4:	8c 01       	movw	r16, r24
    1fb6:	aa d8       	rcall	.-3756   	; 0x110c <getTransitionFrames()>
    1fb8:	80 0f       	add	r24, r16
    1fba:	91 1f       	adc	r25, r17
    1fbc:	c8 9f       	mul	r28, r24
    1fbe:	60 01       	movw	r12, r0
    1fc0:	c9 9f       	mul	r28, r25
    1fc2:	d0 0c       	add	r13, r0
    1fc4:	11 24       	eor	r1, r1
    1fc6:	10 e0       	ldi	r17, 0x00	; 0
    1fc8:	00 e0       	ldi	r16, 0x00	; 0
    1fca:	d0 e0       	ldi	r29, 0x00	; 0
    1fcc:	c0 e0       	ldi	r28, 0x00	; 0
    1fce:	0d 2c       	mov	r0, r13
    1fd0:	00 0c       	add	r0, r0
    1fd2:	ee 08       	sbc	r14, r14
    1fd4:	ff 08       	sbc	r15, r15
    1fd6:	a7 01       	movw	r20, r14
    1fd8:	96 01       	movw	r18, r12
    1fda:	60 e0       	ldi	r22, 0x00	; 0
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	cb 01       	movw	r24, r22
    1fe0:	ad df       	rcall	.-166    	; 0x1f3c <random(long, long)>
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	f8 01       	movw	r30, r16
    1fe6:	f5 95       	asr	r31
    1fe8:	e7 95       	ror	r30
    1fea:	ed 57       	subi	r30, 0x7D	; 125
    1fec:	fe 4b       	sbci	r31, 0xBE	; 190
    1fee:	60 83       	st	Z, r22
    1ff0:	9e 01       	movw	r18, r28
    1ff2:	35 95       	asr	r19
    1ff4:	27 95       	ror	r18
    1ff6:	f9 01       	movw	r30, r18
    1ff8:	ee 0f       	add	r30, r30
    1ffa:	ff 1f       	adc	r31, r31
    1ffc:	e2 0f       	add	r30, r18
    1ffe:	f3 1f       	adc	r31, r19
    2000:	eb 57       	subi	r30, 0x7B	; 123
    2002:	fe 4b       	sbci	r31, 0xBE	; 190
    2004:	c0 ff       	sbrs	r28, 0
    2006:	19 c0       	rjmp	.+50     	; 0x203a <initColorsDrift2()+0xa4>
    2008:	24 e0       	ldi	r18, 0x04	; 4
    200a:	96 95       	lsr	r25
    200c:	87 95       	ror	r24
    200e:	2a 95       	dec	r18
    2010:	e1 f7       	brne	.-8      	; 0x200a <initColorsDrift2()+0x74>
    2012:	80 7f       	andi	r24, 0xF0	; 240
    2014:	90 81       	ld	r25, Z
    2016:	89 23       	and	r24, r25
    2018:	80 83       	st	Z, r24
    201a:	21 96       	adiw	r28, 0x01	; 1
    201c:	0d 5f       	subi	r16, 0xFD	; 253
    201e:	1f 4f       	sbci	r17, 0xFF	; 255
    2020:	c0 3b       	cpi	r28, 0xB0	; 176
    2022:	84 e0       	ldi	r24, 0x04	; 4
    2024:	d8 07       	cpc	r29, r24
    2026:	b9 f6       	brne	.-82     	; 0x1fd6 <initColorsDrift2()+0x40>
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	ff 90       	pop	r15
    2032:	ef 90       	pop	r14
    2034:	df 90       	pop	r13
    2036:	cf 90       	pop	r12
    2038:	08 95       	ret
    203a:	70 83       	st	Z, r23
    203c:	ee cf       	rjmp	.-36     	; 0x201a <initColorsDrift2()+0x84>

0000203e <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc.part.2():
    203e:	fb 01       	movw	r30, r22
    2040:	01 90       	ld	r0, Z+
    2042:	00 20       	and	r0, r0
    2044:	e9 f7       	brne	.-6      	; 0x2040 <Print::write(char const*) [clone .part.2]+0x2>
    2046:	31 97       	sbiw	r30, 0x01	; 1
    2048:	af 01       	movw	r20, r30
    204a:	46 1b       	sub	r20, r22
    204c:	57 0b       	sbc	r21, r23
    204e:	dc 01       	movw	r26, r24
    2050:	ed 91       	ld	r30, X+
    2052:	fc 91       	ld	r31, X
    2054:	02 80       	ldd	r0, Z+2	; 0x02
    2056:	f3 81       	ldd	r31, Z+3	; 0x03
    2058:	e0 2d       	mov	r30, r0
    205a:	09 94       	ijmp

0000205c <Print::printNumber(unsigned long, unsigned char)>:
printNumber():
    205c:	8f 92       	push	r8
    205e:	9f 92       	push	r9
    2060:	af 92       	push	r10
    2062:	bf 92       	push	r11
    2064:	ef 92       	push	r14
    2066:	ff 92       	push	r15
    2068:	0f 93       	push	r16
    206a:	1f 93       	push	r17
    206c:	cf 93       	push	r28
    206e:	df 93       	push	r29
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	a1 97       	sbiw	r28, 0x21	; 33
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	7c 01       	movw	r14, r24
    207c:	fa 01       	movw	r30, r20
    207e:	cb 01       	movw	r24, r22
    2080:	19 a2       	std	Y+33, r1	; 0x21
    2082:	22 30       	cpi	r18, 0x02	; 2
    2084:	08 f4       	brcc	.+2      	; 0x2088 <Print::printNumber(unsigned long, unsigned char)+0x2c>
    2086:	2a e0       	ldi	r18, 0x0A	; 10
    2088:	8e 01       	movw	r16, r28
    208a:	0f 5d       	subi	r16, 0xDF	; 223
    208c:	1f 4f       	sbci	r17, 0xFF	; 255
    208e:	82 2e       	mov	r8, r18
    2090:	91 2c       	mov	r9, r1
    2092:	b1 2c       	mov	r11, r1
    2094:	a1 2c       	mov	r10, r1
    2096:	bf 01       	movw	r22, r30
    2098:	a5 01       	movw	r20, r10
    209a:	94 01       	movw	r18, r8
    209c:	0e 94 bf 21 	call	0x437e	; 0x437e <__udivmodsi4>
    20a0:	f9 01       	movw	r30, r18
    20a2:	ca 01       	movw	r24, r20
    20a4:	6a 30       	cpi	r22, 0x0A	; 10
    20a6:	ec f4       	brge	.+58     	; 0x20e2 <Print::printNumber(unsigned long, unsigned char)+0x86>
    20a8:	60 5d       	subi	r22, 0xD0	; 208
    20aa:	d8 01       	movw	r26, r16
    20ac:	6e 93       	st	-X, r22
    20ae:	8d 01       	movw	r16, r26
    20b0:	23 2b       	or	r18, r19
    20b2:	24 2b       	or	r18, r20
    20b4:	25 2b       	or	r18, r21
    20b6:	79 f7       	brne	.-34     	; 0x2096 <Print::printNumber(unsigned long, unsigned char)+0x3a>
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	80 e0       	ldi	r24, 0x00	; 0
write():
    20bc:	10 97       	sbiw	r26, 0x00	; 0
    20be:	19 f0       	breq	.+6      	; 0x20c6 <Print::printNumber(unsigned long, unsigned char)+0x6a>
    20c0:	bd 01       	movw	r22, r26
    20c2:	c7 01       	movw	r24, r14
    20c4:	bc df       	rcall	.-136    	; 0x203e <Print::write(char const*) [clone .part.2]>
printNumber():
    20c6:	a1 96       	adiw	r28, 0x21	; 33
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	df 91       	pop	r29
    20ce:	cf 91       	pop	r28
    20d0:	1f 91       	pop	r17
    20d2:	0f 91       	pop	r16
    20d4:	ff 90       	pop	r15
    20d6:	ef 90       	pop	r14
    20d8:	bf 90       	pop	r11
    20da:	af 90       	pop	r10
    20dc:	9f 90       	pop	r9
    20de:	8f 90       	pop	r8
    20e0:	08 95       	ret
    20e2:	69 5c       	subi	r22, 0xC9	; 201
    20e4:	e2 cf       	rjmp	.-60     	; 0x20aa <Print::printNumber(unsigned long, unsigned char)+0x4e>

000020e6 <Print::printFloat(double, unsigned char) [clone .constprop.12]>:
printFloat():
    20e6:	4f 92       	push	r4
    20e8:	5f 92       	push	r5
    20ea:	6f 92       	push	r6
    20ec:	7f 92       	push	r7
    20ee:	8f 92       	push	r8
    20f0:	9f 92       	push	r9
    20f2:	af 92       	push	r10
    20f4:	bf 92       	push	r11
    20f6:	cf 92       	push	r12
    20f8:	df 92       	push	r13
    20fa:	ef 92       	push	r14
    20fc:	ff 92       	push	r15
    20fe:	0f 93       	push	r16
    2100:	1f 93       	push	r17
    2102:	cf 93       	push	r28
    2104:	6b 01       	movw	r12, r22
    2106:	7c 01       	movw	r14, r24
    2108:	74 2e       	mov	r7, r20
    210a:	ac 01       	movw	r20, r24
    210c:	9b 01       	movw	r18, r22
    210e:	0e 94 06 24 	call	0x480c	; 0x480c <__unordsf2>
write():
    2112:	66 ef       	ldi	r22, 0xF6	; 246
    2114:	70 e4       	ldi	r23, 0x40	; 64
printFloat():
    2116:	81 11       	cpse	r24, r1
    2118:	26 c0       	rjmp	.+76     	; 0x2166 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x80>
    211a:	46 01       	movw	r8, r12
    211c:	57 01       	movw	r10, r14
    211e:	e8 94       	clt
    2120:	b7 f8       	bld	r11, 7
    2122:	2f ef       	ldi	r18, 0xFF	; 255
    2124:	3f ef       	ldi	r19, 0xFF	; 255
    2126:	4f e7       	ldi	r20, 0x7F	; 127
    2128:	5f e7       	ldi	r21, 0x7F	; 127
    212a:	c5 01       	movw	r24, r10
    212c:	b4 01       	movw	r22, r8
    212e:	0e 94 06 24 	call	0x480c	; 0x480c <__unordsf2>
    2132:	81 11       	cpse	r24, r1
    2134:	0c c0       	rjmp	.+24     	; 0x214e <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x68>
    2136:	2f ef       	ldi	r18, 0xFF	; 255
    2138:	3f ef       	ldi	r19, 0xFF	; 255
    213a:	4f e7       	ldi	r20, 0x7F	; 127
    213c:	5f e7       	ldi	r21, 0x7F	; 127
    213e:	c5 01       	movw	r24, r10
    2140:	b4 01       	movw	r22, r8
    2142:	0e 94 55 22 	call	0x44aa	; 0x44aa <__cmpsf2>
write():
    2146:	6a ef       	ldi	r22, 0xFA	; 250
    2148:	70 e4       	ldi	r23, 0x40	; 64
printFloat():
    214a:	18 16       	cp	r1, r24
    214c:	64 f0       	brlt	.+24     	; 0x2166 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x80>
    214e:	2f ef       	ldi	r18, 0xFF	; 255
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	5f e4       	ldi	r21, 0x4F	; 79
    2156:	c7 01       	movw	r24, r14
    2158:	b6 01       	movw	r22, r12
    215a:	0e 94 9f 23 	call	0x473e	; 0x473e <__gesf2>
    215e:	18 16       	cp	r1, r24
    2160:	a4 f4       	brge	.+40     	; 0x218a <Print::printFloat(double, unsigned char) [clone .constprop.12]+0xa4>
write():
    2162:	6e ef       	ldi	r22, 0xFE	; 254
    2164:	70 e4       	ldi	r23, 0x40	; 64
    2166:	8c ea       	ldi	r24, 0xAC	; 172
    2168:	9f e4       	ldi	r25, 0x4F	; 79
printFloat():
    216a:	cf 91       	pop	r28
    216c:	1f 91       	pop	r17
    216e:	0f 91       	pop	r16
    2170:	ff 90       	pop	r15
    2172:	ef 90       	pop	r14
    2174:	df 90       	pop	r13
    2176:	cf 90       	pop	r12
    2178:	bf 90       	pop	r11
    217a:	af 90       	pop	r10
    217c:	9f 90       	pop	r9
    217e:	8f 90       	pop	r8
    2180:	7f 90       	pop	r7
    2182:	6f 90       	pop	r6
    2184:	5f 90       	pop	r5
    2186:	4f 90       	pop	r4
write():
    2188:	5a cf       	rjmp	.-332    	; 0x203e <Print::write(char const*) [clone .part.2]>
printFloat():
    218a:	2f ef       	ldi	r18, 0xFF	; 255
    218c:	3f ef       	ldi	r19, 0xFF	; 255
    218e:	4f e7       	ldi	r20, 0x7F	; 127
    2190:	5f ec       	ldi	r21, 0xCF	; 207
    2192:	c7 01       	movw	r24, r14
    2194:	b6 01       	movw	r22, r12
    2196:	0e 94 55 22 	call	0x44aa	; 0x44aa <__cmpsf2>
    219a:	87 fd       	sbrc	r24, 7
    219c:	e2 cf       	rjmp	.-60     	; 0x2162 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x7c>
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	a9 01       	movw	r20, r18
    21a4:	c7 01       	movw	r24, r14
    21a6:	b6 01       	movw	r22, r12
    21a8:	0e 94 55 22 	call	0x44aa	; 0x44aa <__cmpsf2>
    21ac:	10 e0       	ldi	r17, 0x00	; 0
    21ae:	00 e0       	ldi	r16, 0x00	; 0
    21b0:	87 ff       	sbrs	r24, 7
    21b2:	0a c0       	rjmp	.+20     	; 0x21c8 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0xe2>
    21b4:	6d e2       	ldi	r22, 0x2D	; 45
    21b6:	8c ea       	ldi	r24, 0xAC	; 172
    21b8:	9f e4       	ldi	r25, 0x4F	; 79
    21ba:	0e 94 0a 05 	call	0xa14	; 0xa14 <Print::print(char)>
    21be:	8c 01       	movw	r16, r24
    21c0:	f7 fa       	bst	r15, 7
    21c2:	f0 94       	com	r15
    21c4:	f7 f8       	bld	r15, 7
    21c6:	f0 94       	com	r15
    21c8:	c0 e0       	ldi	r28, 0x00	; 0
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	9f e3       	ldi	r25, 0x3F	; 63
    21d2:	7c 16       	cp	r7, r28
    21d4:	41 f0       	breq	.+16     	; 0x21e6 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x100>
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e2       	ldi	r20, 0x20	; 32
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__divsf3>
    21e2:	cf 5f       	subi	r28, 0xFF	; 255
    21e4:	f6 cf       	rjmp	.-20     	; 0x21d2 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0xec>
    21e6:	a7 01       	movw	r20, r14
    21e8:	96 01       	movw	r18, r12
    21ea:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__addsf3>
    21ee:	2b 01       	movw	r4, r22
    21f0:	3c 01       	movw	r6, r24
    21f2:	0e 94 c1 22 	call	0x4582	; 0x4582 <__fixunssfsi>
    21f6:	4b 01       	movw	r8, r22
    21f8:	5c 01       	movw	r10, r24
print():
    21fa:	2a e0       	ldi	r18, 0x0A	; 10
    21fc:	bc 01       	movw	r22, r24
    21fe:	a4 01       	movw	r20, r8
    2200:	8c ea       	ldi	r24, 0xAC	; 172
    2202:	9f e4       	ldi	r25, 0x4F	; 79
    2204:	2b df       	rcall	.-426    	; 0x205c <Print::printNumber(unsigned long, unsigned char)>
printFloat():
    2206:	7c 01       	movw	r14, r24
    2208:	e0 0e       	add	r14, r16
    220a:	f1 1e       	adc	r15, r17
    220c:	cc 23       	and	r28, r28
    220e:	c9 f1       	breq	.+114    	; 0x2282 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x19c>
    2210:	c5 01       	movw	r24, r10
    2212:	b4 01       	movw	r22, r8
    2214:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatunsisf>
    2218:	9b 01       	movw	r18, r22
    221a:	ac 01       	movw	r20, r24
    221c:	c3 01       	movw	r24, r6
    221e:	b2 01       	movw	r22, r4
    2220:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <__subsf3>
    2224:	4b 01       	movw	r8, r22
    2226:	5c 01       	movw	r10, r24
write():
    2228:	62 e0       	ldi	r22, 0x02	; 2
    222a:	71 e4       	ldi	r23, 0x41	; 65
    222c:	8c ea       	ldi	r24, 0xAC	; 172
    222e:	9f e4       	ldi	r25, 0x4F	; 79
    2230:	06 df       	rcall	.-500    	; 0x203e <Print::write(char const*) [clone .part.2]>
printFloat():
    2232:	e8 0e       	add	r14, r24
    2234:	f9 1e       	adc	r15, r25
    2236:	c1 50       	subi	r28, 0x01	; 1
    2238:	20 f1       	brcs	.+72     	; 0x2282 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x19c>
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e2       	ldi	r20, 0x20	; 32
    2240:	51 e4       	ldi	r21, 0x41	; 65
    2242:	c5 01       	movw	r24, r10
    2244:	b4 01       	movw	r22, r8
    2246:	0e 94 a3 23 	call	0x4746	; 0x4746 <__mulsf3>
    224a:	2b 01       	movw	r4, r22
    224c:	3c 01       	movw	r6, r24
    224e:	0e 94 c1 22 	call	0x4582	; 0x4582 <__fixunssfsi>
print():
    2252:	4b 01       	movw	r8, r22
    2254:	b1 2c       	mov	r11, r1
    2256:	a1 2c       	mov	r10, r1
    2258:	2a e0       	ldi	r18, 0x0A	; 10
    225a:	b5 01       	movw	r22, r10
    225c:	a4 01       	movw	r20, r8
    225e:	8c ea       	ldi	r24, 0xAC	; 172
    2260:	9f e4       	ldi	r25, 0x4F	; 79
    2262:	fc de       	rcall	.-520    	; 0x205c <Print::printNumber(unsigned long, unsigned char)>
printFloat():
    2264:	e8 0e       	add	r14, r24
    2266:	f9 1e       	adc	r15, r25
    2268:	c5 01       	movw	r24, r10
    226a:	b4 01       	movw	r22, r8
    226c:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatunsisf>
    2270:	9b 01       	movw	r18, r22
    2272:	ac 01       	movw	r20, r24
    2274:	c3 01       	movw	r24, r6
    2276:	b2 01       	movw	r22, r4
    2278:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <__subsf3>
    227c:	4b 01       	movw	r8, r22
    227e:	5c 01       	movw	r10, r24
    2280:	da cf       	rjmp	.-76     	; 0x2236 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x150>
    2282:	c7 01       	movw	r24, r14
    2284:	cf 91       	pop	r28
    2286:	1f 91       	pop	r17
    2288:	0f 91       	pop	r16
    228a:	ff 90       	pop	r15
    228c:	ef 90       	pop	r14
    228e:	df 90       	pop	r13
    2290:	cf 90       	pop	r12
    2292:	bf 90       	pop	r11
    2294:	af 90       	pop	r10
    2296:	9f 90       	pop	r9
    2298:	8f 90       	pop	r8
    229a:	7f 90       	pop	r7
    229c:	6f 90       	pop	r6
    229e:	5f 90       	pop	r5
    22a0:	4f 90       	pop	r4
    22a2:	08 95       	ret

000022a4 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>:
getModeColors():
    22a4:	2f 92       	push	r2
    22a6:	3f 92       	push	r3
    22a8:	4f 92       	push	r4
    22aa:	5f 92       	push	r5
    22ac:	6f 92       	push	r6
    22ae:	7f 92       	push	r7
    22b0:	8f 92       	push	r8
    22b2:	9f 92       	push	r9
    22b4:	af 92       	push	r10
    22b6:	bf 92       	push	r11
    22b8:	cf 92       	push	r12
    22ba:	df 92       	push	r13
    22bc:	ef 92       	push	r14
    22be:	ff 92       	push	r15
    22c0:	0f 93       	push	r16
    22c2:	1f 93       	push	r17
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	2a 97       	sbiw	r28, 0x0a	; 10
    22ce:	cd bf       	out	0x3d, r28	; 61
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	1c 01       	movw	r2, r24
    22d4:	6d 83       	std	Y+5, r22	; 0x05
    22d6:	7e 83       	std	Y+6, r23	; 0x06
    22d8:	4f 83       	std	Y+7, r20	; 0x07
    22da:	58 87       	std	Y+8, r21	; 0x08
    22dc:	28 01       	movw	r4, r16
    22de:	39 01       	movw	r6, r18
    22e0:	0e 94 9e 08 	call	0x113c	; 0x113c <getDwellFrames()>
    22e4:	5c 01       	movw	r10, r24
    22e6:	0e 94 86 08 	call	0x110c	; 0x110c <getTransitionFrames()>
    22ea:	6c 01       	movw	r12, r24
    22ec:	0e 94 7d 08 	call	0x10fa	; 0x10fa <getPalleteNumber()>
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    22f6:	84 30       	cpi	r24, 0x04	; 4
    22f8:	09 f0       	breq	.+2      	; 0x22fc <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x58>
    22fa:	70 c0       	rjmp	.+224    	; 0x23dc <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x138>
    22fc:	82 e0       	ldi	r24, 0x02	; 2
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	81 56       	subi	r24, 0x61	; 97
    2302:	90 4b       	sbci	r25, 0xB0	; 176
    2304:	fc 01       	movw	r30, r24
    2306:	80 81       	ld	r24, Z
    2308:	88 23       	and	r24, r24
    230a:	09 f4       	brne	.+2      	; 0x230e <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x6a>
    230c:	6a c0       	rjmp	.+212    	; 0x23e2 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x13e>
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	dc 01       	movw	r26, r24
    2314:	f9 81       	ldd	r31, Y+1	; 0x01
    2316:	2f 2f       	mov	r18, r31
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	a9 01       	movw	r20, r18
    231c:	40 5b       	subi	r20, 0xB0	; 176
    231e:	56 4f       	sbci	r21, 0xF6	; 246
    2320:	7a 01       	movw	r14, r20
    2322:	fa 01       	movw	r30, r20
    2324:	44 91       	lpm	r20, Z
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	64 0d       	add	r22, r4
    232c:	75 1d       	adc	r23, r5
    232e:	86 1d       	adc	r24, r6
    2330:	97 1d       	adc	r25, r7
    2332:	85 01       	movw	r16, r10
    2334:	0c 0d       	add	r16, r12
    2336:	1d 1d       	adc	r17, r13
    2338:	40 9f       	mul	r20, r16
    233a:	90 01       	movw	r18, r0
    233c:	41 9f       	mul	r20, r17
    233e:	30 0d       	add	r19, r0
    2340:	11 24       	eor	r1, r1
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 bf 21 	call	0x437e	; 0x437e <__udivmodsi4>
    234a:	98 01       	movw	r18, r16
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	40 e0       	ldi	r20, 0x00	; 0
    2350:	0e 94 bf 21 	call	0x437e	; 0x437e <__udivmodsi4>
    2354:	a2 2f       	mov	r26, r18
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	49 81       	ldd	r20, Y+1	; 0x01
    235a:	e8 e1       	ldi	r30, 0x18	; 24
    235c:	4e 9f       	mul	r20, r30
    235e:	a0 01       	movw	r20, r0
    2360:	11 24       	eor	r1, r1
    2362:	49 87       	std	Y+9, r20	; 0x09
    2364:	5a 87       	std	Y+10, r21	; 0x0a
    2366:	fa 01       	movw	r30, r20
    2368:	53 e0       	ldi	r21, 0x03	; 3
    236a:	25 9f       	mul	r18, r21
    236c:	e0 0d       	add	r30, r0
    236e:	f1 1d       	adc	r31, r1
    2370:	11 24       	eor	r1, r1
    2372:	8f 01       	movw	r16, r30
    2374:	0d 5c       	subi	r16, 0xCD	; 205
    2376:	1a 4f       	sbci	r17, 0xFA	; 250
    2378:	af 01       	movw	r20, r30
    237a:	4c 5c       	subi	r20, 0xCC	; 204
    237c:	5a 4f       	sbci	r21, 0xFA	; 250
    237e:	49 83       	std	Y+1, r20	; 0x01
    2380:	5a 83       	std	Y+2, r21	; 0x02
    2382:	af 01       	movw	r20, r30
    2384:	4b 5c       	subi	r20, 0xCB	; 203
    2386:	5a 4f       	sbci	r21, 0xFA	; 250
    2388:	4b 83       	std	Y+3, r20	; 0x03
    238a:	5c 83       	std	Y+4, r21	; 0x04
    238c:	6a 15       	cp	r22, r10
    238e:	7b 05       	cpc	r23, r11
    2390:	68 f5       	brcc	.+90     	; 0x23ec <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x148>
    2392:	f8 01       	movw	r30, r16
    2394:	04 91       	lpm	r16, Z
    2396:	f1 01       	movw	r30, r2
    2398:	00 83       	st	Z, r16
    239a:	e9 81       	ldd	r30, Y+1	; 0x01
    239c:	fa 81       	ldd	r31, Y+2	; 0x02
    239e:	14 91       	lpm	r17, Z
    23a0:	ed 81       	ldd	r30, Y+5	; 0x05
    23a2:	fe 81       	ldd	r31, Y+6	; 0x06
    23a4:	10 83       	st	Z, r17
    23a6:	fa 01       	movw	r30, r20
    23a8:	64 91       	lpm	r22, Z
    23aa:	ef 81       	ldd	r30, Y+7	; 0x07
    23ac:	f8 85       	ldd	r31, Y+8	; 0x08
    23ae:	60 83       	st	Z, r22
    23b0:	2a 96       	adiw	r28, 0x0a	; 10
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	df 91       	pop	r29
    23b8:	cf 91       	pop	r28
    23ba:	1f 91       	pop	r17
    23bc:	0f 91       	pop	r16
    23be:	ff 90       	pop	r15
    23c0:	ef 90       	pop	r14
    23c2:	df 90       	pop	r13
    23c4:	cf 90       	pop	r12
    23c6:	bf 90       	pop	r11
    23c8:	af 90       	pop	r10
    23ca:	9f 90       	pop	r9
    23cc:	8f 90       	pop	r8
    23ce:	7f 90       	pop	r7
    23d0:	6f 90       	pop	r6
    23d2:	5f 90       	pop	r5
    23d4:	4f 90       	pop	r4
    23d6:	3f 90       	pop	r3
    23d8:	2f 90       	pop	r2
    23da:	08 95       	ret
    23dc:	83 e0       	ldi	r24, 0x03	; 3
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	8f cf       	rjmp	.-226    	; 0x2300 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x5c>
    23e2:	80 eb       	ldi	r24, 0xB0	; 176
    23e4:	94 e0       	ldi	r25, 0x04	; 4
    23e6:	a0 e0       	ldi	r26, 0x00	; 0
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	94 cf       	rjmp	.-216    	; 0x2314 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x70>
    23ec:	ab 01       	movw	r20, r22
    23ee:	4a 19       	sub	r20, r10
    23f0:	5b 09       	sbc	r21, r11
    23f2:	f7 01       	movw	r30, r14
    23f4:	e4 90       	lpm	r14, Z
    23f6:	cd 01       	movw	r24, r26
    23f8:	01 96       	adiw	r24, 0x01	; 1
    23fa:	bb 24       	eor	r11, r11
    23fc:	b3 94       	inc	r11
    23fe:	b2 0e       	add	r11, r18
    2400:	e8 16       	cp	r14, r24
    2402:	19 06       	cpc	r1, r25
    2404:	09 f0       	breq	.+2      	; 0x2408 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x164>
    2406:	0c f4       	brge	.+2      	; 0x240a <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x166>
    2408:	b1 2c       	mov	r11, r1
    240a:	ba 01       	movw	r22, r20
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatunsisf>
    2414:	2b 01       	movw	r4, r22
    2416:	3c 01       	movw	r6, r24
    2418:	b6 01       	movw	r22, r12
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatunsisf>
    2422:	9b 01       	movw	r18, r22
    2424:	ac 01       	movw	r20, r24
    2426:	c3 01       	movw	r24, r6
    2428:	b2 01       	movw	r22, r4
    242a:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__divsf3>
    242e:	6b 01       	movw	r12, r22
    2430:	7c 01       	movw	r14, r24
    2432:	25 ec       	ldi	r18, 0xC5	; 197
    2434:	30 e2       	ldi	r19, 0x20	; 32
    2436:	40 e8       	ldi	r20, 0x80	; 128
    2438:	5f e3       	ldi	r21, 0x3F	; 63
    243a:	0e 94 9f 23 	call	0x473e	; 0x473e <__gesf2>
    243e:	18 16       	cp	r1, r24
    2440:	9c f4       	brge	.+38     	; 0x2468 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x1c4>
    2442:	69 e1       	ldi	r22, 0x19	; 25
    2444:	75 e0       	ldi	r23, 0x05	; 5
    2446:	8c ea       	ldi	r24, 0xAC	; 172
    2448:	9f e4       	ldi	r25, 0x4F	; 79
    244a:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
print():
    244e:	42 e0       	ldi	r20, 0x02	; 2
    2450:	c7 01       	movw	r24, r14
    2452:	b6 01       	movw	r22, r12
    2454:	48 de       	rcall	.-880    	; 0x20e6 <Print::printFloat(double, unsigned char) [clone .constprop.12]>
write():
    2456:	64 e0       	ldi	r22, 0x04	; 4
    2458:	71 e4       	ldi	r23, 0x41	; 65
    245a:	8c ea       	ldi	r24, 0xAC	; 172
    245c:	9f e4       	ldi	r25, 0x4F	; 79
    245e:	ef dd       	rcall	.-1058   	; 0x203e <Print::write(char const*) [clone .part.2]>
getModeColors():
    2460:	8c ea       	ldi	r24, 0xAC	; 172
    2462:	9f e4       	ldi	r25, 0x4F	; 79
    2464:	0e 94 33 07 	call	0xe66	; 0xe66 <UartClass::flush()>
    2468:	29 85       	ldd	r18, Y+9	; 0x09
    246a:	3a 85       	ldd	r19, Y+10	; 0x0a
    246c:	43 e0       	ldi	r20, 0x03	; 3
    246e:	b4 9e       	mul	r11, r20
    2470:	20 0d       	add	r18, r0
    2472:	31 1d       	adc	r19, r1
    2474:	11 24       	eor	r1, r1
    2476:	29 87       	std	Y+9, r18	; 0x09
    2478:	3a 87       	std	Y+10, r19	; 0x0a
    247a:	f9 01       	movw	r30, r18
    247c:	ed 5c       	subi	r30, 0xCD	; 205
    247e:	fa 4f       	sbci	r31, 0xFA	; 250
    2480:	74 90       	lpm	r7, Z
    2482:	f8 01       	movw	r30, r16
    2484:	04 91       	lpm	r16, Z
    2486:	a7 01       	movw	r20, r14
    2488:	96 01       	movw	r18, r12
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	70 e0       	ldi	r23, 0x00	; 0
    248e:	80 e8       	ldi	r24, 0x80	; 128
    2490:	9f e3       	ldi	r25, 0x3F	; 63
    2492:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <__subsf3>
    2496:	4b 01       	movw	r8, r22
    2498:	5c 01       	movw	r10, r24
    249a:	67 2d       	mov	r22, r7
    249c:	70 e0       	ldi	r23, 0x00	; 0
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	0e 94 ef 22 	call	0x45de	; 0x45de <__floatsisf>
    24a6:	a7 01       	movw	r20, r14
    24a8:	96 01       	movw	r18, r12
    24aa:	0e 94 a3 23 	call	0x4746	; 0x4746 <__mulsf3>
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e0       	ldi	r20, 0x00	; 0
    24b4:	5f e3       	ldi	r21, 0x3F	; 63
    24b6:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__addsf3>
    24ba:	2b 01       	movw	r4, r22
    24bc:	3c 01       	movw	r6, r24
    24be:	60 2f       	mov	r22, r16
    24c0:	70 e0       	ldi	r23, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	0e 94 ef 22 	call	0x45de	; 0x45de <__floatsisf>
    24ca:	a5 01       	movw	r20, r10
    24cc:	94 01       	movw	r18, r8
    24ce:	0e 94 a3 23 	call	0x4746	; 0x4746 <__mulsf3>
    24d2:	9b 01       	movw	r18, r22
    24d4:	ac 01       	movw	r20, r24
    24d6:	c3 01       	movw	r24, r6
    24d8:	b2 01       	movw	r22, r4
    24da:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__addsf3>
    24de:	0e 94 c1 22 	call	0x4582	; 0x4582 <__fixunssfsi>
    24e2:	f1 01       	movw	r30, r2
    24e4:	60 83       	st	Z, r22
    24e6:	e9 85       	ldd	r30, Y+9	; 0x09
    24e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    24ea:	ec 5c       	subi	r30, 0xCC	; 204
    24ec:	fa 4f       	sbci	r31, 0xFA	; 250
    24ee:	64 91       	lpm	r22, Z
    24f0:	e9 81       	ldd	r30, Y+1	; 0x01
    24f2:	fa 81       	ldd	r31, Y+2	; 0x02
    24f4:	14 91       	lpm	r17, Z
    24f6:	70 e0       	ldi	r23, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	0e 94 ef 22 	call	0x45de	; 0x45de <__floatsisf>
    2500:	a7 01       	movw	r20, r14
    2502:	96 01       	movw	r18, r12
    2504:	0e 94 a3 23 	call	0x4746	; 0x4746 <__mulsf3>
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	5f e3       	ldi	r21, 0x3F	; 63
    2510:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__addsf3>
    2514:	2b 01       	movw	r4, r22
    2516:	3c 01       	movw	r6, r24
    2518:	61 2f       	mov	r22, r17
    251a:	70 e0       	ldi	r23, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	0e 94 ef 22 	call	0x45de	; 0x45de <__floatsisf>
    2524:	a5 01       	movw	r20, r10
    2526:	94 01       	movw	r18, r8
    2528:	0e 94 a3 23 	call	0x4746	; 0x4746 <__mulsf3>
    252c:	9b 01       	movw	r18, r22
    252e:	ac 01       	movw	r20, r24
    2530:	c3 01       	movw	r24, r6
    2532:	b2 01       	movw	r22, r4
    2534:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__addsf3>
    2538:	0e 94 c1 22 	call	0x4582	; 0x4582 <__fixunssfsi>
    253c:	ed 81       	ldd	r30, Y+5	; 0x05
    253e:	fe 81       	ldd	r31, Y+6	; 0x06
    2540:	60 83       	st	Z, r22
    2542:	29 85       	ldd	r18, Y+9	; 0x09
    2544:	3a 85       	ldd	r19, Y+10	; 0x0a
    2546:	2b 5c       	subi	r18, 0xCB	; 203
    2548:	3a 4f       	sbci	r19, 0xFA	; 250
    254a:	f9 01       	movw	r30, r18
    254c:	f4 91       	lpm	r31, Z
    254e:	f9 83       	std	Y+1, r31	; 0x01
    2550:	eb 81       	ldd	r30, Y+3	; 0x03
    2552:	fc 81       	ldd	r31, Y+4	; 0x04
    2554:	f4 91       	lpm	r31, Z
    2556:	fb 83       	std	Y+3, r31	; 0x03
    2558:	29 81       	ldd	r18, Y+1	; 0x01
    255a:	62 2f       	mov	r22, r18
    255c:	70 e0       	ldi	r23, 0x00	; 0
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	0e 94 ef 22 	call	0x45de	; 0x45de <__floatsisf>
    2566:	a7 01       	movw	r20, r14
    2568:	96 01       	movw	r18, r12
    256a:	0e 94 a3 23 	call	0x4746	; 0x4746 <__mulsf3>
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e0       	ldi	r20, 0x00	; 0
    2574:	5f e3       	ldi	r21, 0x3F	; 63
    2576:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__addsf3>
    257a:	6b 01       	movw	r12, r22
    257c:	7c 01       	movw	r14, r24
    257e:	3b 81       	ldd	r19, Y+3	; 0x03
    2580:	63 2f       	mov	r22, r19
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	0e 94 ef 22 	call	0x45de	; 0x45de <__floatsisf>
    258c:	a5 01       	movw	r20, r10
    258e:	94 01       	movw	r18, r8
    2590:	0e 94 a3 23 	call	0x4746	; 0x4746 <__mulsf3>
    2594:	9b 01       	movw	r18, r22
    2596:	ac 01       	movw	r20, r24
    2598:	c7 01       	movw	r24, r14
    259a:	b6 01       	movw	r22, r12
    259c:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__addsf3>
    25a0:	0e 94 c1 22 	call	0x4582	; 0x4582 <__fixunssfsi>
    25a4:	02 cf       	rjmp	.-508    	; 0x23aa <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x106>

000025a6 <updatePatternWave()>:
updatePatternWave():
    25a6:	0f 93       	push	r16
    25a8:	1f 93       	push	r17
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <updatePatternWave()+0xa>
    25b0:	1f 92       	push	r1
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
    25b6:	00 91 93 4f 	lds	r16, 0x4F93	; 0x804f93 <frameNumber>
    25ba:	10 91 94 4f 	lds	r17, 0x4F94	; 0x804f94 <frameNumber+0x1>
    25be:	20 91 95 4f 	lds	r18, 0x4F95	; 0x804f95 <frameNumber+0x2>
    25c2:	30 91 96 4f 	lds	r19, 0x4F96	; 0x804f96 <frameNumber+0x3>
    25c6:	ae 01       	movw	r20, r28
    25c8:	4d 5f       	subi	r20, 0xFD	; 253
    25ca:	5f 4f       	sbci	r21, 0xFF	; 255
    25cc:	be 01       	movw	r22, r28
    25ce:	6e 5f       	subi	r22, 0xFE	; 254
    25d0:	7f 4f       	sbci	r23, 0xFF	; 255
    25d2:	ce 01       	movw	r24, r28
    25d4:	01 96       	adiw	r24, 0x01	; 1
    25d6:	66 de       	rcall	.-820    	; 0x22a4 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>
    25d8:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    25dc:	84 30       	cpi	r24, 0x04	; 4
    25de:	99 f0       	breq	.+38     	; 0x2606 <updatePatternWave()+0x60>
    25e0:	83 e0       	ldi	r24, 0x03	; 3
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	81 56       	subi	r24, 0x61	; 97
    25e6:	90 4b       	sbci	r25, 0xB0	; 176
    25e8:	fc 01       	movw	r30, r24
    25ea:	20 81       	ld	r18, Z
    25ec:	4b 81       	ldd	r20, Y+3	; 0x03
    25ee:	6a 81       	ldd	r22, Y+2	; 0x02
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)>
    25f6:	23 96       	adiw	r28, 0x03	; 3
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	df 91       	pop	r29
    25fe:	cf 91       	pop	r28
    2600:	1f 91       	pop	r17
    2602:	0f 91       	pop	r16
    2604:	08 95       	ret
    2606:	82 e0       	ldi	r24, 0x02	; 2
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	ec cf       	rjmp	.-40     	; 0x25e4 <updatePatternWave()+0x3e>

0000260c <initLookupDrift2()>:
initLookupDrift2():
    260c:	8f 92       	push	r8
    260e:	9f 92       	push	r9
    2610:	af 92       	push	r10
    2612:	bf 92       	push	r11
    2614:	cf 92       	push	r12
    2616:	df 92       	push	r13
    2618:	ef 92       	push	r14
    261a:	ff 92       	push	r15
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	0b e8       	ldi	r16, 0x8B	; 139
    2626:	18 e4       	ldi	r17, 0x48	; 72
    2628:	d0 e0       	ldi	r29, 0x00	; 0
    262a:	c0 e0       	ldi	r28, 0x00	; 0
    262c:	0e 94 86 08 	call	0x110c	; 0x110c <getTransitionFrames()>
    2630:	c8 17       	cp	r28, r24
    2632:	d9 07       	cpc	r29, r25
    2634:	08 f0       	brcs	.+2      	; 0x2638 <initLookupDrift2()+0x2c>
    2636:	41 c0       	rjmp	.+130    	; 0x26ba <initLookupDrift2()+0xae>
getModeRatio():
    2638:	0e 94 86 08 	call	0x110c	; 0x110c <getTransitionFrames()>
    263c:	7c 01       	movw	r14, r24
    263e:	be 01       	movw	r22, r28
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatunsisf>
    2648:	4b 01       	movw	r8, r22
    264a:	5c 01       	movw	r10, r24
    264c:	b7 01       	movw	r22, r14
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	0e 94 ed 22 	call	0x45da	; 0x45da <__floatunsisf>
    2656:	9b 01       	movw	r18, r22
    2658:	ac 01       	movw	r20, r24
    265a:	c5 01       	movw	r24, r10
    265c:	b4 01       	movw	r22, r8
    265e:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__divsf3>
    2662:	6b 01       	movw	r12, r22
    2664:	7c 01       	movw	r14, r24
    2666:	25 ec       	ldi	r18, 0xC5	; 197
    2668:	30 e2       	ldi	r19, 0x20	; 32
    266a:	40 e8       	ldi	r20, 0x80	; 128
    266c:	5f e3       	ldi	r21, 0x3F	; 63
    266e:	0e 94 9f 23 	call	0x473e	; 0x473e <__gesf2>
    2672:	18 16       	cp	r1, r24
    2674:	9c f4       	brge	.+38     	; 0x269c <initLookupDrift2()+0x90>
    2676:	6f ed       	ldi	r22, 0xDF	; 223
    2678:	74 e0       	ldi	r23, 0x04	; 4
    267a:	8c ea       	ldi	r24, 0xAC	; 172
    267c:	9f e4       	ldi	r25, 0x4F	; 79
    267e:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
print():
    2682:	42 e0       	ldi	r20, 0x02	; 2
    2684:	c7 01       	movw	r24, r14
    2686:	b6 01       	movw	r22, r12
    2688:	2e dd       	rcall	.-1444   	; 0x20e6 <Print::printFloat(double, unsigned char) [clone .constprop.12]>
write():
    268a:	64 e0       	ldi	r22, 0x04	; 4
    268c:	71 e4       	ldi	r23, 0x41	; 65
    268e:	8c ea       	ldi	r24, 0xAC	; 172
    2690:	9f e4       	ldi	r25, 0x4F	; 79
    2692:	d5 dc       	rcall	.-1622   	; 0x203e <Print::write(char const*) [clone .part.2]>
getModeRatio():
    2694:	8c ea       	ldi	r24, 0xAC	; 172
    2696:	9f e4       	ldi	r25, 0x4F	; 79
    2698:	0e 94 33 07 	call	0xe66	; 0xe66 <UartClass::flush()>
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e8       	ldi	r19, 0x80	; 128
    26a0:	4f e7       	ldi	r20, 0x7F	; 127
    26a2:	53 e4       	ldi	r21, 0x43	; 67
    26a4:	c7 01       	movw	r24, r14
    26a6:	b6 01       	movw	r22, r12
    26a8:	0e 94 a3 23 	call	0x4746	; 0x4746 <__mulsf3>
    26ac:	0e 94 c1 22 	call	0x4582	; 0x4582 <__fixunssfsi>
    26b0:	f8 01       	movw	r30, r16
    26b2:	61 93       	st	Z+, r22
    26b4:	8f 01       	movw	r16, r30
initLookupDrift2():
    26b6:	21 96       	adiw	r28, 0x01	; 1
    26b8:	b9 cf       	rjmp	.-142    	; 0x262c <initLookupDrift2()+0x20>
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	1f 91       	pop	r17
    26c0:	0f 91       	pop	r16
    26c2:	ff 90       	pop	r15
    26c4:	ef 90       	pop	r14
    26c6:	df 90       	pop	r13
    26c8:	cf 90       	pop	r12
    26ca:	bf 90       	pop	r11
    26cc:	af 90       	pop	r10
    26ce:	9f 90       	pop	r9
    26d0:	8f 90       	pop	r8
    26d2:	08 95       	ret

000026d4 <__cxa_pure_virtual>:
__cxa_pure_virtual():
    26d4:	0e 94 36 24 	call	0x486c	; 0x486c <abort>

000026d8 <setMode(unsigned char)>:
setMode():
    26d8:	af 92       	push	r10
    26da:	bf 92       	push	r11
    26dc:	cf 92       	push	r12
    26de:	df 92       	push	r13
    26e0:	ef 92       	push	r14
    26e2:	ff 92       	push	r15
    26e4:	0f 93       	push	r16
    26e6:	1f 93       	push	r17
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <currentMode>
    26f0:	80 e1       	ldi	r24, 0x10	; 16
    26f2:	9e e0       	ldi	r25, 0x0E	; 14
    26f4:	e3 e8       	ldi	r30, 0x83	; 131
    26f6:	f1 e4       	ldi	r31, 0x41	; 65
    26f8:	df 01       	movw	r26, r30
    26fa:	9c 01       	movw	r18, r24
    26fc:	1d 92       	st	X+, r1
    26fe:	21 50       	subi	r18, 0x01	; 1
    2700:	30 40       	sbci	r19, 0x00	; 0
    2702:	e1 f7       	brne	.-8      	; 0x26fc <setMode(unsigned char)+0x24>
    2704:	e3 e4       	ldi	r30, 0x43	; 67
    2706:	f0 e5       	ldi	r31, 0x50	; 80
    2708:	df 01       	movw	r26, r30
    270a:	9c 01       	movw	r18, r24
    270c:	1d 92       	st	X+, r1
    270e:	21 50       	subi	r18, 0x01	; 1
    2710:	30 40       	sbci	r19, 0x00	; 0
    2712:	e1 f7       	brne	.-8      	; 0x270c <setMode(unsigned char)+0x34>
    2714:	8f e9       	ldi	r24, 0x9F	; 159
    2716:	a8 2e       	mov	r10, r24
    2718:	8f e4       	ldi	r24, 0x4F	; 79
    271a:	b8 2e       	mov	r11, r24
    271c:	07 e9       	ldi	r16, 0x97	; 151
    271e:	1f e4       	ldi	r17, 0x4F	; 79
    2720:	d0 e0       	ldi	r29, 0x00	; 0
    2722:	c0 e0       	ldi	r28, 0x00	; 0
    2724:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    2728:	38 e0       	ldi	r19, 0x08	; 8
    272a:	83 9f       	mul	r24, r19
    272c:	c0 01       	movw	r24, r0
    272e:	11 24       	eor	r1, r1
    2730:	8c 0f       	add	r24, r28
    2732:	9d 1f       	adc	r25, r29
    2734:	fc 01       	movw	r30, r24
    2736:	e9 57       	subi	r30, 0x79	; 121
    2738:	fb 4f       	sbci	r31, 0xFB	; 251
    273a:	24 91       	lpm	r18, Z
    273c:	2f 3f       	cpi	r18, 0xFF	; 255
    273e:	09 f0       	breq	.+2      	; 0x2742 <setMode(unsigned char)+0x6a>
    2740:	66 c0       	rjmp	.+204    	; 0x280e <setMode(unsigned char)+0x136>
    2742:	fc 01       	movw	r30, r24
    2744:	e5 5c       	subi	r30, 0xC5	; 197
    2746:	f9 4f       	sbci	r31, 0xF9	; 249
    2748:	e4 91       	lpm	r30, Z
    274a:	ce 2e       	mov	r12, r30
    274c:	d1 2c       	mov	r13, r1
    274e:	f1 2c       	mov	r15, r1
    2750:	e1 2c       	mov	r14, r1
random():
    2752:	c1 14       	cp	r12, r1
    2754:	d1 04       	cpc	r13, r1
    2756:	e1 04       	cpc	r14, r1
    2758:	f1 04       	cpc	r15, r1
    275a:	39 f0       	breq	.+14     	; 0x276a <setMode(unsigned char)+0x92>
    275c:	0e 94 3e 21 	call	0x427c	; 0x427c <random>
    2760:	a7 01       	movw	r20, r14
    2762:	96 01       	movw	r18, r12
    2764:	0e 94 93 21 	call	0x4326	; 0x4326 <__divmodsi4>
    2768:	6b 01       	movw	r12, r22
setMode():
    276a:	fe 01       	movw	r30, r28
    276c:	e9 56       	subi	r30, 0x69	; 105
    276e:	f0 4b       	sbci	r31, 0xB0	; 176
    2770:	c0 82       	st	Z, r12
    2772:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    2776:	b8 e0       	ldi	r27, 0x08	; 8
    2778:	8b 9f       	mul	r24, r27
    277a:	c0 01       	movw	r24, r0
    277c:	11 24       	eor	r1, r1
    277e:	8c 0f       	add	r24, r28
    2780:	9d 1f       	adc	r25, r29
    2782:	fc 01       	movw	r30, r24
    2784:	e9 57       	subi	r30, 0x79	; 121
    2786:	fb 4f       	sbci	r31, 0xFB	; 251
    2788:	e4 91       	lpm	r30, Z
    278a:	ef 3f       	cpi	r30, 0xFF	; 255
    278c:	09 f0       	breq	.+2      	; 0x2790 <setMode(unsigned char)+0xb8>
    278e:	43 c0       	rjmp	.+134    	; 0x2816 <setMode(unsigned char)+0x13e>
    2790:	fc 01       	movw	r30, r24
    2792:	e5 5a       	subi	r30, 0xA5	; 165
    2794:	f6 4f       	sbci	r31, 0xF6	; 246
    2796:	e4 91       	lpm	r30, Z
    2798:	ce 2e       	mov	r12, r30
    279a:	d1 2c       	mov	r13, r1
    279c:	f1 2c       	mov	r15, r1
    279e:	e1 2c       	mov	r14, r1
random():
    27a0:	c1 14       	cp	r12, r1
    27a2:	d1 04       	cpc	r13, r1
    27a4:	e1 04       	cpc	r14, r1
    27a6:	f1 04       	cpc	r15, r1
    27a8:	39 f0       	breq	.+14     	; 0x27b8 <setMode(unsigned char)+0xe0>
    27aa:	0e 94 3e 21 	call	0x427c	; 0x427c <random>
    27ae:	a7 01       	movw	r20, r14
    27b0:	96 01       	movw	r18, r12
    27b2:	0e 94 93 21 	call	0x4326	; 0x4326 <__divmodsi4>
    27b6:	6b 01       	movw	r12, r22
setMode():
    27b8:	fe 01       	movw	r30, r28
    27ba:	e1 56       	subi	r30, 0x61	; 97
    27bc:	f0 4b       	sbci	r31, 0xB0	; 176
    27be:	c0 82       	st	Z, r12
    27c0:	21 96       	adiw	r28, 0x01	; 1
    27c2:	bf ef       	ldi	r27, 0xFF	; 255
    27c4:	ab 1a       	sub	r10, r27
    27c6:	bb 0a       	sbc	r11, r27
    27c8:	0f 5f       	subi	r16, 0xFF	; 255
    27ca:	1f 4f       	sbci	r17, 0xFF	; 255
    27cc:	c8 30       	cpi	r28, 0x08	; 8
    27ce:	d1 05       	cpc	r29, r1
    27d0:	09 f0       	breq	.+2      	; 0x27d4 <setMode(unsigned char)+0xfc>
    27d2:	a8 cf       	rjmp	.-176    	; 0x2724 <setMode(unsigned char)+0x4c>
    27d4:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    27d8:	8a 30       	cpi	r24, 0x0A	; 10
    27da:	11 f4       	brne	.+4      	; 0x27e0 <setMode(unsigned char)+0x108>
    27dc:	17 df       	rcall	.-466    	; 0x260c <initLookupDrift2()>
    27de:	db db       	rcall	.-2122   	; 0x1f96 <initColorsDrift2()>
    27e0:	10 92 93 4f 	sts	0x4F93, r1	; 0x804f93 <frameNumber>
    27e4:	10 92 94 4f 	sts	0x4F94, r1	; 0x804f94 <frameNumber+0x1>
    27e8:	10 92 95 4f 	sts	0x4F95, r1	; 0x804f95 <frameNumber+0x2>
    27ec:	10 92 96 4f 	sts	0x4F96, r1	; 0x804f96 <frameNumber+0x3>
    27f0:	10 92 75 41 	sts	0x4175, r1	; 0x804175 <currentSettingLeft>
    27f4:	10 92 74 41 	sts	0x4174, r1	; 0x804174 <currentSettingRight>
    27f8:	df 91       	pop	r29
    27fa:	cf 91       	pop	r28
    27fc:	1f 91       	pop	r17
    27fe:	0f 91       	pop	r16
    2800:	ff 90       	pop	r15
    2802:	ef 90       	pop	r14
    2804:	df 90       	pop	r13
    2806:	cf 90       	pop	r12
    2808:	bf 90       	pop	r11
    280a:	af 90       	pop	r10
    280c:	08 95       	ret
    280e:	e4 91       	lpm	r30, Z
    2810:	d8 01       	movw	r26, r16
    2812:	ec 93       	st	X, r30
    2814:	ae cf       	rjmp	.-164    	; 0x2772 <setMode(unsigned char)+0x9a>
    2816:	fc 01       	movw	r30, r24
    2818:	e1 5d       	subi	r30, 0xD1	; 209
    281a:	fb 4f       	sbci	r31, 0xFB	; 251
    281c:	e4 91       	lpm	r30, Z
    281e:	d5 01       	movw	r26, r10
    2820:	ec 93       	st	X, r30
    2822:	ce cf       	rjmp	.-100    	; 0x27c0 <setMode(unsigned char)+0xe8>

00002824 <__vector_22>:
__vector_22():
    2824:	ef 93       	push	r30
    2826:	ff 93       	push	r31
    2828:	ec ea       	ldi	r30, 0xAC	; 172
    282a:	ff e4       	ldi	r31, 0x4F	; 79
    282c:	08 c0       	rjmp	.+16     	; 0x283e <_do_dre()>

0000282e <__vector_21>:
__vector_21():
    282e:	ef 93       	push	r30
    2830:	ff 93       	push	r31
    2832:	ec ea       	ldi	r30, 0xAC	; 172
    2834:	ff e4       	ldi	r31, 0x4F	; 79
    2836:	32 c0       	rjmp	.+100    	; 0x289c <_do_rxc()>

00002838 <__vector_23>:
__vector_23():
    2838:	ef 93       	push	r30
    283a:	e0 e0       	ldi	r30, 0x00	; 0
    283c:	53 c0       	rjmp	.+166    	; 0x28e4 <_do_txc()>

0000283e <_do_dre()>:
_Z7_do_drev():
    283e:	2f 93       	push	r18
    2840:	2f b7       	in	r18, 0x3f	; 63
    2842:	2f 93       	push	r18
    2844:	8f 93       	push	r24
    2846:	9f 93       	push	r25
    2848:	af 93       	push	r26
    284a:	bf 93       	push	r27
    284c:	68 94       	set

0000284e <_poll_dre>:
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	c4 85       	ldd	r28, Z+12	; 0x0c
    2856:	d8 e0       	ldi	r29, 0x08	; 8
    2858:	96 89       	ldd	r25, Z+22	; 0x16
    285a:	df 01       	movw	r26, r30
    285c:	a9 0f       	add	r26, r25
    285e:	b2 1f       	adc	r27, r18
    2860:	a9 5a       	subi	r26, 0xA9	; 169
    2862:	bf 4f       	sbci	r27, 0xFF	; 255
    2864:	8c 91       	ld	r24, X
    2866:	20 e4       	ldi	r18, 0x40	; 64
    2868:	2c 83       	std	Y+4, r18	; 0x04
    286a:	8a 83       	std	Y+2, r24	; 0x02
    286c:	9f 5f       	subi	r25, 0xFF	; 255
    286e:	9f 73       	andi	r25, 0x3F	; 63
    2870:	8d 81       	ldd	r24, Y+5	; 0x05
    2872:	25 89       	ldd	r18, Z+21	; 0x15
    2874:	29 13       	cpse	r18, r25
    2876:	02 c0       	rjmp	.+4      	; 0x287c <_done_dre_irq>
    2878:	8f 7d       	andi	r24, 0xDF	; 223
    287a:	8d 83       	std	Y+5, r24	; 0x05

0000287c <_done_dre_irq>:
    287c:	96 8b       	std	Z+22, r25	; 0x16
    287e:	df 91       	pop	r29
    2880:	cf 91       	pop	r28
    2882:	16 f0       	brts	.+4      	; 0x2888 <_done_dre_irq+0xc>
    2884:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <_poll_dre_done>
    2888:	bf 91       	pop	r27
    288a:	af 91       	pop	r26
    288c:	9f 91       	pop	r25
    288e:	8f 91       	pop	r24
    2890:	2f 91       	pop	r18
    2892:	2f bf       	out	0x3f, r18	; 63
    2894:	2f 91       	pop	r18
    2896:	ff 91       	pop	r31
    2898:	ef 91       	pop	r30
    289a:	18 95       	reti

0000289c <_do_rxc()>:
_Z7_do_rxcv():
    289c:	2f 93       	push	r18
    289e:	2f b7       	in	r18, 0x3f	; 63
    28a0:	2f 93       	push	r18
    28a2:	8f 93       	push	r24
    28a4:	9f 93       	push	r25
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	c4 85       	ldd	r28, Z+12	; 0x0c
    28ac:	d8 e0       	ldi	r29, 0x08	; 8
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	98 81       	ld	r25, Y
    28b2:	81 fd       	sbrc	r24, 1
    28b4:	0d c0       	rjmp	.+26     	; 0x28d0 <_end_rxc>
    28b6:	c3 89       	ldd	r28, Z+19	; 0x13
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	8c 0f       	add	r24, r28
    28bc:	8f 73       	andi	r24, 0x3F	; 63
    28be:	24 89       	ldd	r18, Z+20	; 0x14
    28c0:	28 17       	cp	r18, r24
    28c2:	31 f0       	breq	.+12     	; 0x28d0 <_end_rxc>
    28c4:	ce 0f       	add	r28, r30
    28c6:	df 2f       	mov	r29, r31
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	d2 1f       	adc	r29, r18
    28cc:	9f 8b       	std	Y+23, r25	; 0x17
    28ce:	83 8b       	std	Z+19, r24	; 0x13

000028d0 <_end_rxc>:
    28d0:	df 91       	pop	r29
    28d2:	cf 91       	pop	r28
    28d4:	9f 91       	pop	r25
    28d6:	8f 91       	pop	r24
    28d8:	2f 91       	pop	r18
    28da:	2f bf       	out	0x3f, r18	; 63
    28dc:	2f 91       	pop	r18
    28de:	ff 91       	pop	r31
    28e0:	ef 91       	pop	r30
    28e2:	18 95       	reti

000028e4 <_do_txc()>:
_Z7_do_txcv():
    28e4:	ff 93       	push	r31
    28e6:	8f 93       	push	r24
    28e8:	8f b7       	in	r24, 0x3f	; 63
    28ea:	8f 93       	push	r24
    28ec:	f8 e0       	ldi	r31, 0x08	; 8

000028ee <_txc_flush_rx>:
    28ee:	80 81       	ld	r24, Z
    28f0:	84 81       	ldd	r24, Z+4	; 0x04
    28f2:	87 ff       	sbrs	r24, 7
    28f4:	fc cf       	rjmp	.-8      	; 0x28ee <_txc_flush_rx>
    28f6:	85 81       	ldd	r24, Z+5	; 0x05
    28f8:	8f 7b       	andi	r24, 0xBF	; 191
    28fa:	80 68       	ori	r24, 0x80	; 128
    28fc:	85 83       	std	Z+5, r24	; 0x05
    28fe:	8f 91       	pop	r24
    2900:	8f bf       	out	0x3f, r24	; 63
    2902:	8f 91       	pop	r24
    2904:	ff 91       	pop	r31
    2906:	ef 91       	pop	r30
    2908:	18 95       	reti

0000290a <__vector_31>:
__vector_31():
    290a:	1f 92       	push	r1
    290c:	0f 92       	push	r0
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	0f 92       	push	r0
    2912:	11 24       	eor	r1, r1
    2914:	8f 93       	push	r24
    2916:	9f 93       	push	r25
    2918:	af 93       	push	r26
    291a:	bf 93       	push	r27
    291c:	80 91 68 41 	lds	r24, 0x4168	; 0x804168 <timer_millis>
    2920:	90 91 69 41 	lds	r25, 0x4169	; 0x804169 <timer_millis+0x1>
    2924:	a0 91 6a 41 	lds	r26, 0x416A	; 0x80416a <timer_millis+0x2>
    2928:	b0 91 6b 41 	lds	r27, 0x416B	; 0x80416b <timer_millis+0x3>
    292c:	01 96       	adiw	r24, 0x01	; 1
    292e:	a1 1d       	adc	r26, r1
    2930:	b1 1d       	adc	r27, r1
    2932:	80 93 68 41 	sts	0x4168, r24	; 0x804168 <timer_millis>
    2936:	90 93 69 41 	sts	0x4169, r25	; 0x804169 <timer_millis+0x1>
    293a:	a0 93 6a 41 	sts	0x416A, r26	; 0x80416a <timer_millis+0x2>
    293e:	b0 93 6b 41 	sts	0x416B, r27	; 0x80416b <timer_millis+0x3>
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    2948:	bf 91       	pop	r27
    294a:	af 91       	pop	r26
    294c:	9f 91       	pop	r25
    294e:	8f 91       	pop	r24
    2950:	0f 90       	pop	r0
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	0f 90       	pop	r0
    2956:	1f 90       	pop	r1
    2958:	18 95       	reti

0000295a <__vector_44>:
__vector_44():
    295a:	1f 92       	push	r1
    295c:	0f 92       	push	r0
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	0f 92       	push	r0
    2962:	11 24       	eor	r1, r1
    2964:	0b b6       	in	r0, 0x3b	; 59
    2966:	0f 92       	push	r0
    2968:	2f 93       	push	r18
    296a:	3f 93       	push	r19
    296c:	4f 93       	push	r20
    296e:	5f 93       	push	r21
    2970:	6f 93       	push	r22
    2972:	7f 93       	push	r23
    2974:	8f 93       	push	r24
    2976:	9f 93       	push	r25
    2978:	af 93       	push	r26
    297a:	bf 93       	push	r27
    297c:	ef 93       	push	r30
    297e:	ff 93       	push	r31
    2980:	40 91 3c 0b 	lds	r20, 0x0B3C	; 0x800b3c <__TEXT_REGION_LENGTH__+0x7e0b3c>
    2984:	50 91 3d 0b 	lds	r21, 0x0B3D	; 0x800b3d <__TEXT_REGION_LENGTH__+0x7e0b3d>
digitalReadFast():
    2988:	86 b3       	in	r24, 0x16	; 22
__vector_44():
    298a:	28 2f       	mov	r18, r24
    298c:	28 70       	andi	r18, 0x08	; 8
    298e:	83 fd       	sbrc	r24, 3
    2990:	27 c0       	rjmp	.+78     	; 0x29e0 <__vector_44+0x86>
    2992:	81 e4       	ldi	r24, 0x41	; 65
    2994:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <__TEXT_REGION_LENGTH__+0x7e0b34>
    2998:	80 91 64 41 	lds	r24, 0x4164	; 0x804164 <__vector_44::lasttime>
    299c:	90 91 65 41 	lds	r25, 0x4165	; 0x804165 <__vector_44::lasttime+0x1>
    29a0:	ba 01       	movw	r22, r20
    29a2:	68 1b       	sub	r22, r24
    29a4:	79 0b       	sbc	r23, r25
    29a6:	cb 01       	movw	r24, r22
    29a8:	70 e0       	ldi	r23, 0x00	; 0
    29aa:	60 e0       	ldi	r22, 0x00	; 0
    29ac:	40 93 64 41 	sts	0x4164, r20	; 0x804164 <__vector_44::lasttime>
    29b0:	50 93 65 41 	sts	0x4165, r21	; 0x804165 <__vector_44::lasttime+0x1>
    29b4:	60 93 66 41 	sts	0x4166, r22	; 0x804166 <__vector_44::lasttime+0x2>
    29b8:	70 93 67 41 	sts	0x4167, r23	; 0x804167 <__vector_44::lasttime+0x3>
    29bc:	22 23       	and	r18, r18
    29be:	59 f1       	breq	.+86     	; 0x2a16 <__vector_44+0xbc>
    29c0:	f8 9b       	sbis	0x1f, 0	; 31
    29c2:	10 c0       	rjmp	.+32     	; 0x29e4 <__vector_44+0x8a>
    29c4:	89 30       	cpi	r24, 0x09	; 9
    29c6:	97 40       	sbci	r25, 0x07	; 7
    29c8:	98 f0       	brcs	.+38     	; 0x29f0 <__vector_44+0x96>
    29ca:	f8 98       	cbi	0x1f, 0	; 31
    29cc:	10 92 63 41 	sts	0x4163, r1	; 0x804163 <bitnum>
    29d0:	e3 e4       	ldi	r30, 0x43	; 67
    29d2:	f1 e4       	ldi	r31, 0x41	; 65
    29d4:	80 e2       	ldi	r24, 0x20	; 32
    29d6:	df 01       	movw	r26, r30
    29d8:	1d 92       	st	X+, r1
    29da:	8a 95       	dec	r24
    29dc:	e9 f7       	brne	.-6      	; 0x29d8 <__vector_44+0x7e>
    29de:	08 c0       	rjmp	.+16     	; 0x29f0 <__vector_44+0x96>
    29e0:	81 e5       	ldi	r24, 0x51	; 81
    29e2:	d8 cf       	rjmp	.-80     	; 0x2994 <__vector_44+0x3a>
    29e4:	83 58       	subi	r24, 0x83	; 131
    29e6:	94 41       	sbci	r25, 0x14	; 20
    29e8:	8b 3d       	cpi	r24, 0xDB	; 219
    29ea:	95 40       	sbci	r25, 0x05	; 5
    29ec:	08 f4       	brcc	.+2      	; 0x29f0 <__vector_44+0x96>
    29ee:	f8 9a       	sbi	0x1f, 0	; 31
    29f0:	ff 91       	pop	r31
    29f2:	ef 91       	pop	r30
    29f4:	bf 91       	pop	r27
    29f6:	af 91       	pop	r26
    29f8:	9f 91       	pop	r25
    29fa:	8f 91       	pop	r24
    29fc:	7f 91       	pop	r23
    29fe:	6f 91       	pop	r22
    2a00:	5f 91       	pop	r21
    2a02:	4f 91       	pop	r20
    2a04:	3f 91       	pop	r19
    2a06:	2f 91       	pop	r18
    2a08:	0f 90       	pop	r0
    2a0a:	0b be       	out	0x3b, r0	; 59
    2a0c:	0f 90       	pop	r0
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	0f 90       	pop	r0
    2a12:	1f 90       	pop	r1
    2a14:	18 95       	reti
    2a16:	f8 9b       	sbis	0x1f, 0	; 31
    2a18:	eb cf       	rjmp	.-42     	; 0x29f0 <__vector_44+0x96>
    2a1a:	9c 01       	movw	r18, r24
    2a1c:	2d 52       	subi	r18, 0x2D	; 45
    2a1e:	31 40       	sbci	r19, 0x01	; 1
    2a20:	25 36       	cpi	r18, 0x65	; 101
    2a22:	33 40       	sbci	r19, 0x03	; 3
    2a24:	c0 f5       	brcc	.+112    	; 0x2a96 <__vector_44+0x13c>
    2a26:	80 91 42 41 	lds	r24, 0x4142	; 0x804142 <dataIn>
    2a2a:	88 0f       	add	r24, r24
    2a2c:	80 93 42 41 	sts	0x4142, r24	; 0x804142 <dataIn>
    2a30:	80 91 63 41 	lds	r24, 0x4163	; 0x804163 <bitnum>
    2a34:	87 70       	andi	r24, 0x07	; 7
    2a36:	87 30       	cpi	r24, 0x07	; 7
    2a38:	09 f5       	brne	.+66     	; 0x2a7c <__vector_44+0x122>
    2a3a:	80 91 42 41 	lds	r24, 0x4142	; 0x804142 <dataIn>
    2a3e:	e0 91 63 41 	lds	r30, 0x4163	; 0x804163 <bitnum>
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	93 e0       	ldi	r25, 0x03	; 3
    2a46:	f5 95       	asr	r31
    2a48:	e7 95       	ror	r30
    2a4a:	9a 95       	dec	r25
    2a4c:	e1 f7       	brne	.-8      	; 0x2a46 <__vector_44+0xec>
    2a4e:	ed 5b       	subi	r30, 0xBD	; 189
    2a50:	fe 4b       	sbci	r31, 0xBE	; 190
    2a52:	80 83       	st	Z, r24
    2a54:	80 91 63 41 	lds	r24, 0x4163	; 0x804163 <bitnum>
    2a58:	87 30       	cpi	r24, 0x07	; 7
    2a5a:	71 f4       	brne	.+28     	; 0x2a78 <__vector_44+0x11e>
    2a5c:	80 91 42 41 	lds	r24, 0x4142	; 0x804142 <dataIn>
    2a60:	82 95       	swap	r24
    2a62:	86 95       	lsr	r24
    2a64:	86 95       	lsr	r24
    2a66:	83 70       	andi	r24, 0x03	; 3
    2a68:	09 f1       	breq	.+66     	; 0x2aac <__vector_44+0x152>
    2a6a:	81 30       	cpi	r24, 0x01	; 1
    2a6c:	09 f1       	breq	.+66     	; 0x2ab0 <__vector_44+0x156>
    2a6e:	82 30       	cpi	r24, 0x02	; 2
    2a70:	09 f1       	breq	.+66     	; 0x2ab4 <__vector_44+0x15a>
    2a72:	8f ef       	ldi	r24, 0xFF	; 255
    2a74:	80 93 02 40 	sts	0x4002, r24	; 0x804002 <pktLength>
    2a78:	10 92 42 41 	sts	0x4142, r1	; 0x804142 <dataIn>
    2a7c:	90 91 63 41 	lds	r25, 0x4163	; 0x804163 <bitnum>
    2a80:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <pktLength>
    2a84:	98 17       	cp	r25, r24
    2a86:	c0 f0       	brcs	.+48     	; 0x2ab8 <__vector_44+0x15e>
    2a88:	10 92 63 41 	sts	0x4163, r1	; 0x804163 <bitnum>
    2a8c:	f8 98       	cbi	0x1f, 0	; 31
    2a8e:	f9 9a       	sbi	0x1f, 1	; 31
    2a90:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <__TEXT_REGION_LENGTH__+0x7e0b35>
    2a94:	ad cf       	rjmp	.-166    	; 0x29f0 <__vector_44+0x96>
    2a96:	8f 5c       	subi	r24, 0xCF	; 207
    2a98:	94 40       	sbci	r25, 0x04	; 4
    2a9a:	85 36       	cpi	r24, 0x65	; 101
    2a9c:	93 40       	sbci	r25, 0x03	; 3
    2a9e:	08 f0       	brcs	.+2      	; 0x2aa2 <__vector_44+0x148>
    2aa0:	94 cf       	rjmp	.-216    	; 0x29ca <__vector_44+0x70>
    2aa2:	80 91 42 41 	lds	r24, 0x4142	; 0x804142 <dataIn>
    2aa6:	88 0f       	add	r24, r24
    2aa8:	8f 5f       	subi	r24, 0xFF	; 255
    2aaa:	c0 cf       	rjmp	.-128    	; 0x2a2c <__vector_44+0xd2>
    2aac:	8f e1       	ldi	r24, 0x1F	; 31
    2aae:	e2 cf       	rjmp	.-60     	; 0x2a74 <__vector_44+0x11a>
    2ab0:	8f e3       	ldi	r24, 0x3F	; 63
    2ab2:	e0 cf       	rjmp	.-64     	; 0x2a74 <__vector_44+0x11a>
    2ab4:	8f e7       	ldi	r24, 0x7F	; 127
    2ab6:	de cf       	rjmp	.-68     	; 0x2a74 <__vector_44+0x11a>
    2ab8:	80 91 63 41 	lds	r24, 0x4163	; 0x804163 <bitnum>
    2abc:	8f 5f       	subi	r24, 0xFF	; 255
    2abe:	80 93 63 41 	sts	0x4163, r24	; 0x804163 <bitnum>
    2ac2:	96 cf       	rjmp	.-212    	; 0x29f0 <__vector_44+0x96>

00002ac4 <__vector_30>:
__vector_30():
    2ac4:	1f 92       	push	r1
    2ac6:	0f 92       	push	r0
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	0f 92       	push	r0
    2acc:	11 24       	eor	r1, r1
    2ace:	0b b6       	in	r0, 0x3b	; 59
    2ad0:	0f 92       	push	r0
    2ad2:	2f 93       	push	r18
    2ad4:	3f 93       	push	r19
    2ad6:	4f 93       	push	r20
    2ad8:	5f 93       	push	r21
    2ada:	8f 93       	push	r24
    2adc:	9f 93       	push	r25
    2ade:	ef 93       	push	r30
    2ae0:	ff 93       	push	r31
    2ae2:	8a b1       	in	r24, 0x0a	; 10
    2ae4:	9b b1       	in	r25, 0x0b	; 11
    2ae6:	9b b9       	out	0x0b, r25	; 11
    2ae8:	90 91 00 40 	lds	r25, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    2aec:	99 0f       	add	r25, r25
    2aee:	99 0f       	add	r25, r25
    2af0:	e8 2f       	mov	r30, r24
    2af2:	ef 70       	andi	r30, 0x0F	; 15
    2af4:	e6 95       	lsr	r30
    2af6:	e6 95       	lsr	r30
    2af8:	20 91 01 40 	lds	r18, 0x4001	; 0x804001 <__vector_30::EncL_Prev>
    2afc:	22 0f       	add	r18, r18
    2afe:	22 0f       	add	r18, r18
    2b00:	e2 2b       	or	r30, r18
    2b02:	e0 93 01 40 	sts	0x4001, r30	; 0x804001 <__vector_30::EncL_Prev>
    2b06:	83 70       	andi	r24, 0x03	; 3
    2b08:	98 2b       	or	r25, r24
    2b0a:	90 93 00 40 	sts	0x4000, r25	; 0x804000 <__DATA_REGION_ORIGIN__>
    2b0e:	ef 70       	andi	r30, 0x0F	; 15
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	ed 56       	subi	r30, 0x6D	; 109
    2b14:	f9 4f       	sbci	r31, 0xF9	; 249
    2b16:	84 91       	lpm	r24, Z
    2b18:	e0 91 41 41 	lds	r30, 0x4141	; 0x804141 <__vector_30::EncL_Val>
    2b1c:	8e 0f       	add	r24, r30
    2b1e:	80 93 41 41 	sts	0x4141, r24	; 0x804141 <__vector_30::EncL_Val>
    2b22:	9f 70       	andi	r25, 0x0F	; 15
    2b24:	e9 2f       	mov	r30, r25
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	ed 56       	subi	r30, 0x6D	; 109
    2b2a:	f9 4f       	sbci	r31, 0xF9	; 249
    2b2c:	94 91       	lpm	r25, Z
    2b2e:	e0 91 40 41 	lds	r30, 0x4140	; 0x804140 <__vector_30::EncR_Val>
    2b32:	9e 0f       	add	r25, r30
    2b34:	90 93 40 41 	sts	0x4140, r25	; 0x804140 <__vector_30::EncR_Val>
    2b38:	84 30       	cpi	r24, 0x04	; 4
    2b3a:	0c f4       	brge	.+2      	; 0x2b3e <__vector_30+0x7a>
    2b3c:	81 c0       	rjmp	.+258    	; 0x2c40 <__vector_30+0x17c>
    2b3e:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	e9 56       	subi	r30, 0x69	; 105
    2b46:	f0 4b       	sbci	r31, 0xB0	; 176
    2b48:	20 81       	ld	r18, Z
    2b4a:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    2b4e:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    2b52:	38 e0       	ldi	r19, 0x08	; 8
    2b54:	83 9f       	mul	r24, r19
    2b56:	a0 01       	movw	r20, r0
    2b58:	11 24       	eor	r1, r1
    2b5a:	e4 0f       	add	r30, r20
    2b5c:	f5 2f       	mov	r31, r21
    2b5e:	f1 1d       	adc	r31, r1
    2b60:	e5 5c       	subi	r30, 0xC5	; 197
    2b62:	f9 4f       	sbci	r31, 0xF9	; 249
    2b64:	e4 91       	lpm	r30, Z
    2b66:	2e 17       	cp	r18, r30
    2b68:	40 f4       	brcc	.+16     	; 0x2b7a <__vector_30+0xb6>
    2b6a:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	e9 56       	subi	r30, 0x69	; 105
    2b72:	f0 4b       	sbci	r31, 0xB0	; 176
    2b74:	20 81       	ld	r18, Z
    2b76:	2f 5f       	subi	r18, 0xFF	; 255
    2b78:	20 83       	st	Z, r18
    2b7a:	81 50       	subi	r24, 0x01	; 1
    2b7c:	85 30       	cpi	r24, 0x05	; 5
    2b7e:	10 f5       	brcc	.+68     	; 0x2bc4 <__vector_30+0x100>
    2b80:	80 91 75 41 	lds	r24, 0x4175	; 0x804175 <currentSettingLeft>
    2b84:	86 30       	cpi	r24, 0x06	; 6
    2b86:	f0 f4       	brcc	.+60     	; 0x2bc4 <__vector_30+0x100>
    2b88:	80 91 75 41 	lds	r24, 0x4175	; 0x804175 <currentSettingLeft>
    2b8c:	80 fd       	sbrc	r24, 0
    2b8e:	1a c0       	rjmp	.+52     	; 0x2bc4 <__vector_30+0x100>
    2b90:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	e9 56       	subi	r30, 0x69	; 105
    2b98:	f0 4b       	sbci	r31, 0xB0	; 176
    2b9a:	20 81       	ld	r18, Z
    2b9c:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	e8 56       	subi	r30, 0x68	; 104
    2ba4:	f0 4b       	sbci	r31, 0xB0	; 176
    2ba6:	80 81       	ld	r24, Z
    2ba8:	82 17       	cp	r24, r18
    2baa:	60 f4       	brcc	.+24     	; 0x2bc4 <__vector_30+0x100>
    2bac:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	e9 56       	subi	r30, 0x69	; 105
    2bb4:	f0 4b       	sbci	r31, 0xB0	; 176
    2bb6:	80 81       	ld	r24, Z
    2bb8:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	e8 56       	subi	r30, 0x68	; 104
    2bc0:	f0 4b       	sbci	r31, 0xB0	; 176
    2bc2:	80 83       	st	Z, r24
    2bc4:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <UIChanged>
    2bc8:	81 60       	ori	r24, 0x01	; 1
    2bca:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <UIChanged>
    2bce:	10 92 41 41 	sts	0x4141, r1	; 0x804141 <__vector_30::EncL_Val>
    2bd2:	94 30       	cpi	r25, 0x04	; 4
    2bd4:	0c f4       	brge	.+2      	; 0x2bd8 <__vector_30+0x114>
    2bd6:	72 c0       	rjmp	.+228    	; 0x2cbc <__vector_30+0x1f8>
    2bd8:	e0 91 74 41 	lds	r30, 0x4174	; 0x804174 <currentSettingRight>
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	e1 56       	subi	r30, 0x61	; 97
    2be0:	f0 4b       	sbci	r31, 0xB0	; 176
    2be2:	20 81       	ld	r18, Z
    2be4:	e0 91 74 41 	lds	r30, 0x4174	; 0x804174 <currentSettingRight>
    2be8:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    2bec:	38 e0       	ldi	r19, 0x08	; 8
    2bee:	83 9f       	mul	r24, r19
    2bf0:	c0 01       	movw	r24, r0
    2bf2:	11 24       	eor	r1, r1
    2bf4:	e8 0f       	add	r30, r24
    2bf6:	f9 2f       	mov	r31, r25
    2bf8:	f1 1d       	adc	r31, r1
    2bfa:	e5 5a       	subi	r30, 0xA5	; 165
    2bfc:	f6 4f       	sbci	r31, 0xF6	; 246
    2bfe:	e4 91       	lpm	r30, Z
    2c00:	2e 17       	cp	r18, r30
    2c02:	40 f4       	brcc	.+16     	; 0x2c14 <__vector_30+0x150>
    2c04:	e0 91 74 41 	lds	r30, 0x4174	; 0x804174 <currentSettingRight>
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	e1 56       	subi	r30, 0x61	; 97
    2c0c:	f0 4b       	sbci	r31, 0xB0	; 176
    2c0e:	80 81       	ld	r24, Z
    2c10:	8f 5f       	subi	r24, 0xFF	; 255
    2c12:	80 83       	st	Z, r24
    2c14:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <UIChanged>
    2c18:	81 60       	ori	r24, 0x01	; 1
    2c1a:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <UIChanged>
    2c1e:	10 92 40 41 	sts	0x4140, r1	; 0x804140 <__vector_30::EncR_Val>
    2c22:	ff 91       	pop	r31
    2c24:	ef 91       	pop	r30
    2c26:	9f 91       	pop	r25
    2c28:	8f 91       	pop	r24
    2c2a:	5f 91       	pop	r21
    2c2c:	4f 91       	pop	r20
    2c2e:	3f 91       	pop	r19
    2c30:	2f 91       	pop	r18
    2c32:	0f 90       	pop	r0
    2c34:	0b be       	out	0x3b, r0	; 59
    2c36:	0f 90       	pop	r0
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	0f 90       	pop	r0
    2c3c:	1f 90       	pop	r1
    2c3e:	18 95       	reti
    2c40:	8d 3f       	cpi	r24, 0xFD	; 253
    2c42:	3c f6       	brge	.-114    	; 0x2bd2 <__vector_30+0x10e>
    2c44:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	e9 56       	subi	r30, 0x69	; 105
    2c4c:	f0 4b       	sbci	r31, 0xB0	; 176
    2c4e:	80 81       	ld	r24, Z
    2c50:	88 23       	and	r24, r24
    2c52:	41 f0       	breq	.+16     	; 0x2c64 <__vector_30+0x1a0>
    2c54:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	e9 56       	subi	r30, 0x69	; 105
    2c5c:	f0 4b       	sbci	r31, 0xB0	; 176
    2c5e:	80 81       	ld	r24, Z
    2c60:	81 50       	subi	r24, 0x01	; 1
    2c62:	80 83       	st	Z, r24
    2c64:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    2c68:	81 50       	subi	r24, 0x01	; 1
    2c6a:	82 30       	cpi	r24, 0x02	; 2
    2c6c:	08 f0       	brcs	.+2      	; 0x2c70 <__vector_30+0x1ac>
    2c6e:	aa cf       	rjmp	.-172    	; 0x2bc4 <__vector_30+0x100>
    2c70:	80 91 75 41 	lds	r24, 0x4175	; 0x804175 <currentSettingLeft>
    2c74:	86 30       	cpi	r24, 0x06	; 6
    2c76:	08 f0       	brcs	.+2      	; 0x2c7a <__vector_30+0x1b6>
    2c78:	a5 cf       	rjmp	.-182    	; 0x2bc4 <__vector_30+0x100>
    2c7a:	80 91 75 41 	lds	r24, 0x4175	; 0x804175 <currentSettingLeft>
    2c7e:	80 ff       	sbrs	r24, 0
    2c80:	a1 cf       	rjmp	.-190    	; 0x2bc4 <__vector_30+0x100>
    2c82:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	e9 56       	subi	r30, 0x69	; 105
    2c8a:	f0 4b       	sbci	r31, 0xB0	; 176
    2c8c:	20 81       	ld	r18, Z
    2c8e:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    2c92:	e1 50       	subi	r30, 0x01	; 1
    2c94:	ff 0b       	sbc	r31, r31
    2c96:	e9 56       	subi	r30, 0x69	; 105
    2c98:	f0 4b       	sbci	r31, 0xB0	; 176
    2c9a:	80 81       	ld	r24, Z
    2c9c:	28 17       	cp	r18, r24
    2c9e:	08 f0       	brcs	.+2      	; 0x2ca2 <__vector_30+0x1de>
    2ca0:	91 cf       	rjmp	.-222    	; 0x2bc4 <__vector_30+0x100>
    2ca2:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	e9 56       	subi	r30, 0x69	; 105
    2caa:	f0 4b       	sbci	r31, 0xB0	; 176
    2cac:	80 81       	ld	r24, Z
    2cae:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    2cb2:	e1 50       	subi	r30, 0x01	; 1
    2cb4:	ff 0b       	sbc	r31, r31
    2cb6:	e9 56       	subi	r30, 0x69	; 105
    2cb8:	f0 4b       	sbci	r31, 0xB0	; 176
    2cba:	83 cf       	rjmp	.-250    	; 0x2bc2 <__vector_30+0xfe>
    2cbc:	9d 3f       	cpi	r25, 0xFD	; 253
    2cbe:	0c f0       	brlt	.+2      	; 0x2cc2 <__vector_30+0x1fe>
    2cc0:	b0 cf       	rjmp	.-160    	; 0x2c22 <__vector_30+0x15e>
    2cc2:	e0 91 74 41 	lds	r30, 0x4174	; 0x804174 <currentSettingRight>
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	e1 56       	subi	r30, 0x61	; 97
    2cca:	f0 4b       	sbci	r31, 0xB0	; 176
    2ccc:	80 81       	ld	r24, Z
    2cce:	88 23       	and	r24, r24
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <__vector_30+0x210>
    2cd2:	a0 cf       	rjmp	.-192    	; 0x2c14 <__vector_30+0x150>
    2cd4:	e0 91 74 41 	lds	r30, 0x4174	; 0x804174 <currentSettingRight>
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	e1 56       	subi	r30, 0x61	; 97
    2cdc:	f0 4b       	sbci	r31, 0xB0	; 176
    2cde:	80 81       	ld	r24, Z
    2ce0:	81 50       	subi	r24, 0x01	; 1
    2ce2:	97 cf       	rjmp	.-210    	; 0x2c12 <__vector_30+0x14e>

00002ce4 <global constructors keyed to 65535_0_DriftAnimate_V2.ino.cpp.o.3568>:
_GLOBAL__I_65535_0_DriftAnimate_V2.ino.cpp.o.3568():
    2ce4:	1f 93       	push	r17
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	ec ea       	ldi	r30, 0xAC	; 172
    2cec:	ff e4       	ldi	r31, 0x4F	; 79
    2cee:	12 82       	std	Z+2, r1	; 0x02
    2cf0:	13 82       	std	Z+3, r1	; 0x03
    2cf2:	88 ee       	ldi	r24, 0xE8	; 232
    2cf4:	93 e0       	ldi	r25, 0x03	; 3
    2cf6:	a0 e0       	ldi	r26, 0x00	; 0
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	84 83       	std	Z+4, r24	; 0x04
    2cfc:	95 83       	std	Z+5, r25	; 0x05
    2cfe:	a6 83       	std	Z+6, r26	; 0x06
    2d00:	b7 83       	std	Z+7, r27	; 0x07
    2d02:	82 e6       	ldi	r24, 0x62	; 98
    2d04:	90 e4       	ldi	r25, 0x40	; 64
    2d06:	80 83       	st	Z, r24
    2d08:	91 83       	std	Z+1, r25	; 0x01
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	98 e0       	ldi	r25, 0x08	; 8
    2d0e:	84 87       	std	Z+12, r24	; 0x0c
    2d10:	95 87       	std	Z+13, r25	; 0x0d
    2d12:	83 eb       	ldi	r24, 0xB3	; 179
    2d14:	99 e0       	ldi	r25, 0x09	; 9
    2d16:	86 87       	std	Z+14, r24	; 0x0e
    2d18:	97 87       	std	Z+15, r25	; 0x0f
    2d1a:	12 e0       	ldi	r17, 0x02	; 2
    2d1c:	10 8b       	std	Z+16, r17	; 0x10
    2d1e:	11 8a       	std	Z+17, r1	; 0x11
    2d20:	12 8a       	std	Z+18, r1	; 0x12
    2d22:	c6 e6       	ldi	r28, 0x66	; 102
    2d24:	de e5       	ldi	r29, 0x5E	; 94
    2d26:	1a 82       	std	Y+2, r1	; 0x02
    2d28:	1b 82       	std	Y+3, r1	; 0x03
    2d2a:	8e ec       	ldi	r24, 0xCE	; 206
    2d2c:	90 e4       	ldi	r25, 0x40	; 64
    2d2e:	88 83       	st	Y, r24
    2d30:	99 83       	std	Y+1, r25	; 0x01
    2d32:	1f 82       	std	Y+7, r1	; 0x07
    2d34:	18 86       	std	Y+8, r1	; 0x08
    2d36:	80 ed       	ldi	r24, 0xD0	; 208
    2d38:	97 e0       	ldi	r25, 0x07	; 7
    2d3a:	a0 e0       	ldi	r26, 0x00	; 0
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	88 8b       	std	Y+16, r24	; 0x10
    2d40:	99 8b       	std	Y+17, r25	; 0x11
    2d42:	aa 8b       	std	Y+18, r26	; 0x12
    2d44:	bb 8b       	std	Y+19, r27	; 0x13
    2d46:	86 e2       	ldi	r24, 0x26	; 38
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	a0 e0       	ldi	r26, 0x00	; 0
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	8c 8b       	std	Y+20, r24	; 0x14
    2d50:	9d 8b       	std	Y+21, r25	; 0x15
    2d52:	ae 8b       	std	Y+22, r26	; 0x16
    2d54:	bf 8b       	std	Y+23, r27	; 0x17
    2d56:	1c 86       	std	Y+12, r1	; 0x0c
    2d58:	1d 86       	std	Y+13, r1	; 0x0d
    2d5a:	1e 86       	std	Y+14, r1	; 0x0e
    2d5c:	1f 86       	std	Y+15, r1	; 0x0f
    2d5e:	1b 86       	std	Y+11, r1	; 0x0b
    2d60:	0e 94 49 07 	call	0xe92	; 0xe92 <micros>
    2d64:	68 8f       	std	Y+24, r22	; 0x18
    2d66:	79 8f       	std	Y+25, r23	; 0x19
    2d68:	8a 8f       	std	Y+26, r24	; 0x1a
    2d6a:	9b 8f       	std	Y+27, r25	; 0x1b
    2d6c:	1c 8e       	std	Y+28, r1	; 0x1c
    2d6e:	1d 8e       	std	Y+29, r1	; 0x1d
    2d70:	1e 8e       	std	Y+30, r1	; 0x1e
    2d72:	1f 8e       	std	Y+31, r1	; 0x1f
    2d74:	84 ee       	ldi	r24, 0xE4	; 228
    2d76:	90 e4       	ldi	r25, 0x40	; 64
    2d78:	88 83       	st	Y, r24
    2d7a:	99 83       	std	Y+1, r25	; 0x01
    2d7c:	8a e1       	ldi	r24, 0x1A	; 26
    2d7e:	88 a3       	std	Y+32, r24	; 0x20
    2d80:	8d e1       	ldi	r24, 0x1D	; 29
    2d82:	8a a3       	std	Y+34, r24	; 0x22
    2d84:	8b e1       	ldi	r24, 0x1B	; 27
    2d86:	89 a3       	std	Y+33, r24	; 0x21
    2d88:	86 e1       	ldi	r24, 0x16	; 22
    2d8a:	8b a3       	std	Y+35, r24	; 0x23
    2d8c:	87 e1       	ldi	r24, 0x17	; 23
    2d8e:	8c a3       	std	Y+36, r24	; 0x24
    2d90:	88 e1       	ldi	r24, 0x18	; 24
    2d92:	8d a3       	std	Y+37, r24	; 0x25
    2d94:	89 e1       	ldi	r24, 0x19	; 25
    2d96:	8e a3       	std	Y+38, r24	; 0x26
    2d98:	8f ef       	ldi	r24, 0xFF	; 255
    2d9a:	8f a3       	std	Y+39, r24	; 0x27
    2d9c:	88 a7       	std	Y+40, r24	; 0x28
    2d9e:	e3 e5       	ldi	r30, 0x53	; 83
    2da0:	fe e5       	ldi	r31, 0x5E	; 94
    2da2:	15 82       	std	Z+5, r1	; 0x05
    2da4:	83 e4       	ldi	r24, 0x43	; 67
    2da6:	90 e5       	ldi	r25, 0x50	; 80
    2da8:	86 83       	std	Z+6, r24	; 0x06
    2daa:	97 83       	std	Z+7, r25	; 0x07
    2dac:	14 86       	std	Z+12, r1	; 0x0c
    2dae:	15 86       	std	Z+13, r1	; 0x0d
    2db0:	16 86       	std	Z+14, r1	; 0x0e
    2db2:	17 86       	std	Z+15, r1	; 0x0f
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	83 87       	std	Z+11, r24	; 0x0b
    2db8:	80 87       	std	Z+8, r24	; 0x08
    2dba:	11 86       	std	Z+9, r1	; 0x09
    2dbc:	12 87       	std	Z+10, r17	; 0x0a
    2dbe:	80 e1       	ldi	r24, 0x10	; 16
    2dc0:	9e e0       	ldi	r25, 0x0E	; 14
    2dc2:	82 83       	std	Z+2, r24	; 0x02
    2dc4:	93 83       	std	Z+3, r25	; 0x03
    2dc6:	80 eb       	ldi	r24, 0xB0	; 176
    2dc8:	94 e0       	ldi	r25, 0x04	; 4
    2dca:	80 83       	st	Z, r24
    2dcc:	91 83       	std	Z+1, r25	; 0x01
    2dce:	86 e0       	ldi	r24, 0x06	; 6
    2dd0:	84 83       	std	Z+4, r24	; 0x04
    2dd2:	84 e0       	ldi	r24, 0x04	; 4
    2dd4:	94 e0       	ldi	r25, 0x04	; 4
    2dd6:	80 8b       	std	Z+16, r24	; 0x10
    2dd8:	91 8b       	std	Z+17, r25	; 0x11
    2dda:	80 e4       	ldi	r24, 0x40	; 64
    2ddc:	82 8b       	std	Z+18, r24	; 0x12
    2dde:	df 91       	pop	r29
    2de0:	cf 91       	pop	r28
    2de2:	1f 91       	pop	r17
    2de4:	08 95       	ret

00002de6 <main>:
main():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/main.cpp:49
 * called first in non-optiboot configurations (neither is needed on Optibooot configurations() *
 * an extra bit of initialization code in .init3 to fix the vectors and still happen if user    *
 * overrides main. In the past there was a USB-related function here, that is removed, as work  *
 * will be needed in any event at the core level if VUSB-based "stuff" arrives, but really I'm  *
 * just waiting for the DU-series now                                                           */
int main() {
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
    2dee:	63 97       	sbiw	r28, 0x13	; 19
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	de bf       	out	0x3e, r29	; 62
init_clock():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1305
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (0x0B << 2));
    #elif (F_CPU == 28000000)
      /* Overclocked - generally quite reliable at room temperature, but a dumb frequency (see PWM section) */
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (0x0A << 2));
    #elif (F_CPU == 24000000)
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (0x09 << 2));
    2df4:	88 ed       	ldi	r24, 0xD8	; 216
    2df6:	94 e2       	ldi	r25, 0x24	; 36
    2df8:	84 bf       	out	0x34, r24	; 52
    2dfa:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
init_TCA0():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1565
}

void __attribute__((weak)) init_TCA0() {
  /* TCA0_PINS from pins_arduino.h */
  /* Enable Split Mode to get more PWM pins, since analogWrite() only provides 8-bit PWM anyway*/
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
    2dfe:	21 e0       	ldi	r18, 0x01	; 1
    2e00:	20 93 03 0a 	sts	0x0A03, r18	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7e0a03>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1570

  // Only 1 WGM is available in split mode

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
    2e04:	8e ef       	ldi	r24, 0xFE	; 254
    2e06:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7e0a26>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1571
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
    2e0a:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7e0a27>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1602
    TCA0.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) // use 64 divider unless it's 5 MHz or under
    #if defined(MILLIS_USE_TIMERA0) && (TIME_TRACKING_TIMER_DIVIDER != 64)
      #error "wiring.c and timers.h want to set millis timer TCA0 to different divider"
    #endif
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
    2e0e:	9b e0       	ldi	r25, 0x0B	; 11
    2e10:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7e0a00>
init_timers():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1551
uint8_t PeripheralControl = 0xFF;

void init_timers() {
  init_TCA0();
  #if (defined(TCA1))
    PORTMUX.TCAROUTEA = TCA0_PINS | TCA1_PINS;
    2e14:	32 e0       	ldi	r19, 0x02	; 2
    2e16:	30 93 e6 05 	sts	0x05E6, r19	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
init_TCA1():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1620

#if defined(TCA1)
void __attribute__((weak)) init_TCA1() {

  /* Enable Split Mode */
  TCA1.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
    2e1a:	20 93 43 0a 	sts	0x0A43, r18	; 0x800a43 <__TEXT_REGION_LENGTH__+0x7e0a43>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1623

  /* Period setting, 8-bit register in SPLIT mode */
  TCA1.SPLIT.LPER    = PWM_TIMER_PERIOD;
    2e1e:	80 93 66 0a 	sts	0x0A66, r24	; 0x800a66 <__TEXT_REGION_LENGTH__+0x7e0a66>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1624
  TCA1.SPLIT.HPER    = PWM_TIMER_PERIOD;
    2e22:	80 93 67 0a 	sts	0x0A67, r24	; 0x800a67 <__TEXT_REGION_LENGTH__+0x7e0a67>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1635
    TCA1.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) // use 64 divider unless it's 5 MHz or under
    #if defined(MILLIS_USE_TIMERA1) && (TIME_TRACKING_TIMER_DIVIDER != 64)
      #error "wiring.c and timers.h want to set millis timer TCA1 to different divider"
    #endif
    TCA1.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
    2e26:	90 93 40 0a 	sts	0x0A40, r25	; 0x800a40 <__TEXT_REGION_LENGTH__+0x7e0a40>
init_TCBs():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1657
 * Set up routing (defined in pins_arduino.h)
 * Notice how there's no semicolon until after the preprocessor conditionals.
 * In other words, that's all one line.
 */

  PORTMUX.TCBROUTEA = 0
    2e2a:	90 93 e7 05 	sts	0x05E7, r25	; 0x8005e7 <__TEXT_REGION_LENGTH__+0x7e05e7>
main():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1676
                        | TCB4_PINS
  #endif
        ;
  // Start with TCB0 - we take advantage of the fact that we can get a pointer
  // to TCB09's struct, and increment it to go through all of them.
  TCB_t *timer_B = (TCB_t *)&TCB0;
    2e2e:	e0 e0       	ldi	r30, 0x00	; 0
    2e30:	fb e0       	ldi	r31, 0x0B	; 11
init_TCBs():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1696
  #endif

  // Timer B Setup loop for TCB[0:end]
  do {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
    2e32:	27 e0       	ldi	r18, 0x07	; 7
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1699

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD; // TOP = 254 see section at start
    2e34:	9e ef       	ldi	r25, 0xFE	; 254
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1705
    // default duty 50% - we have to set something here because of the
    // errata, otherwise CCMP will not get the CCMPL either.
    timer_B->CCMPH = PWM_TIMER_COMPARE;

    // Use TCA clock (250kHz, +/- 50%) and enable
    timer_B->CTRLA = (TCB_CLKSEL_TCA0_gc) | (TCB_ENABLE_bm);
    2e36:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1696
  #endif

  // Timer B Setup loop for TCB[0:end]
  do {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
    2e38:	21 83       	std	Z+1, r18	; 0x01
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1699

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD; // TOP = 254 see section at start
    2e3a:	94 87       	std	Z+12, r25	; 0x0c
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1702
    // default duty 50% - we have to set something here because of the
    // errata, otherwise CCMP will not get the CCMPL either.
    timer_B->CCMPH = PWM_TIMER_COMPARE;
    2e3c:	15 86       	std	Z+13, r1	; 0x0d
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1705

    // Use TCA clock (250kHz, +/- 50%) and enable
    timer_B->CTRLA = (TCB_CLKSEL_TCA0_gc) | (TCB_ENABLE_bm);
    2e3e:	80 83       	st	Z, r24
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1708

    // Increment pointer to next TCB instance
    timer_B++;
    2e40:	70 96       	adiw	r30, 0x10	; 16
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1711

    // Stop when pointing to the last timer.
  } while (timer_B <= timer_B_end);
    2e42:	e0 34       	cpi	r30, 0x40	; 64
    2e44:	3b e0       	ldi	r19, 0x0B	; 11
    2e46:	f3 07       	cpc	r31, r19
    2e48:	b9 f7       	brne	.-18     	; 0x2e38 <main+0x52>
init_TCD0():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1749
 * be set in the status register. We skip checking this here because, as we do many places the  *
 * initiialization functions assume that the chip starts from a reset condition.                */

void __attribute__((weak)) init_TCD0() {
  #if defined(USE_TIMERD0_PWM) || defined (MILLIS_USE_TIMERD0)
    TCD0.CMPACLR  = 0x0FFF;
    2e4a:	2f ef       	ldi	r18, 0xFF	; 255
    2e4c:	3f e0       	ldi	r19, 0x0F	; 15
    2e4e:	20 93 aa 0b 	sts	0x0BAA, r18	; 0x800baa <__TEXT_REGION_LENGTH__+0x7e0baa>
    2e52:	30 93 ab 0b 	sts	0x0BAB, r19	; 0x800bab <__TEXT_REGION_LENGTH__+0x7e0bab>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1753
    // Match with CMPBCLR clears all outputs. For normal PWM this just needs to be higher than
    // it will count to - so set to maximum (other settings used for non-overlapping PWM and
    // other advanced functionality)
    TCD0.CTRLC    = 0x80;                   // WOD outputs PWM B, WOC outputs PWM A
    2e56:	20 e8       	ldi	r18, 0x80	; 128
    2e58:	20 93 82 0b 	sts	0x0B82, r18	; 0x800b82 <__TEXT_REGION_LENGTH__+0x7e0b82>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1755
    // That doesn't need to be that way, but I declare that that's all we support through analogWrite()
    TCD0.CTRLB    = TIMERD0_WGMODE_SETTING;
    2e5c:	10 92 81 0b 	sts	0x0B81, r1	; 0x800b81 <__TEXT_REGION_LENGTH__+0x7e0b81>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1758
    // One ramp or dual slope are the only options that are viable to reproduce classic behavior without
    // considerable calculation overhead. We use one-ramp mode
    TCD0.CMPBCLR  = TIMERD0_TOP_SETTING;
    2e60:	4b ef       	ldi	r20, 0xFB	; 251
    2e62:	53 e0       	ldi	r21, 0x03	; 3
    2e64:	40 93 ae 0b 	sts	0x0BAE, r20	; 0x800bae <__TEXT_REGION_LENGTH__+0x7e0bae>
    2e68:	50 93 af 0b 	sts	0x0BAF, r21	; 0x800baf <__TEXT_REGION_LENGTH__+0x7e0baf>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1767
    #if defined(TIMERD0_SET_CLOCK)
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (TIMERD0_SET_CLOCK));
    #endif


    TCD0.CTRLA    = TIMERD0_CLOCK_SETTING | TCD_ENABLE_bm;
    2e6c:	91 e7       	ldi	r25, 0x71	; 113
    2e6e:	90 93 80 0b 	sts	0x0B80, r25	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
init_ADC0():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1197
    #elif F_CPU >= 36000000
      ADC0.CTRLC = ADC_PRESC_DIV28_gc; // 1.286 @ 36 MHz
    #elif F_CPU >  28000000
      ADC0.CTRLC = ADC_PRESC_DIV24_gc; // 1.33 @ 32 MHz, 1.
    #elif F_CPU >= 24000000
      ADC0.CTRLC = ADC_PRESC_DIV20_gc; // 1.2 @ 24, 1.25 @ 25, 1.4 @ 28  MHz
    2e72:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1209
    #elif F_CPU >= 4000000
      ADC0.CTRLC = ADC_PRESC_DIV4_gc;  // 1 MHz
    #else  // 1 MHz / 2 = 500 kHz - the lowest setting
      ADC0.CTRLC = ADC_PRESC_DIV2_gc;
    #endif
    ADC0.SAMPCTRL = 14; // 16 ADC clock sampling time - should be about the same amount of *time* as originally?
    2e76:	9e e0       	ldi	r25, 0x0E	; 14
    2e78:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x7e0605>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1211
    // This is WAY conservative! We could drop it down...
    ADC0.CTRLD = ADC_INITDLY_DLY64_gc; // VREF can take 50uS to become ready, and we're running the ADC clock
    2e7c:	90 e6       	ldi	r25, 0x60	; 96
    2e7e:	90 93 03 06 	sts	0x0603, r25	; 0x800603 <__TEXT_REGION_LENGTH__+0x7e0603>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1214
    // at around 1 MHz, so we want 64 ADC clocks when we start up a new reference so we don't get bad readings at first
    /* Enable ADC */
    ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_10BIT_gc;
    2e82:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7e0600>
analogReference():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:124


void analogReference(uint8_t mode) {
  check_valid_analog_ref(mode);
  if (mode < 7 && mode !=4) {
    VREF.ADC0REF = (VREF.ADC0REF & ~(VREF_REFSEL_gm))|(mode);
    2e86:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2e8a:	88 7f       	andi	r24, 0xF8	; 248
    2e8c:	85 60       	ori	r24, 0x05	; 5
    2e8e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
DACReference():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:131
}

void DACReference(uint8_t mode) {
  check_valid_analog_ref(mode);
  if (mode < 7 && mode !=4) {
    VREF.DAC0REF = (VREF.DAC0REF & ~(VREF_REFSEL_gm))|(mode);
    2e92:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2e96:	88 7f       	andi	r24, 0xF8	; 248
    2e98:	85 60       	ori	r24, 0x05	; 5
    2e9a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
init_millis():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1134
      // RTC.CLKSEL = 0; this is the power on value
    #endif
      RTC.INTCTRL = 0x01; // enable overflow interrupt
      RTC.CTRLA = (RTC_RUNSTDBY_bm|RTC_RTCEN_bm|RTC_PRESCALER_DIV32_gc);//fire it up, prescale by 32.
    #else // It's a type b timer
      _timer->CCMP = TIME_TRACKING_TIMER_PERIOD;
    2e9e:	8f ed       	ldi	r24, 0xDF	; 223
    2ea0:	9e e2       	ldi	r25, 0x2E	; 46
    2ea2:	80 93 2c 0b 	sts	0x0B2C, r24	; 0x800b2c <__TEXT_REGION_LENGTH__+0x7e0b2c>
    2ea6:	90 93 2d 0b 	sts	0x0B2D, r25	; 0x800b2d <__TEXT_REGION_LENGTH__+0x7e0b2d>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1136
      // Enable timer interrupt, but clear the rest of register
      _timer->INTCTRL = TCB_CAPT_bm;
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	80 93 25 0b 	sts	0x0B25, r24	; 0x800b25 <__TEXT_REGION_LENGTH__+0x7e0b25>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1138
      // Clear timer mode (since it will have been set as PWM by init())
      _timer->CTRLB = 0;
    2eb0:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <__TEXT_REGION_LENGTH__+0x7e0b21>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1140
      // CLK_PER/1 is 0b00, . CLK_PER/2 is 0b01, so bitwise OR of valid divider with enable works
      _timer->CTRLA = TIME_TRACKING_TIMER_DIVIDER|TCB_ENABLE_bm;  // Keep this last before enabling interrupts to ensure tracking as accurate as possible
    2eb4:	93 e0       	ldi	r25, 0x03	; 3
    2eb6:	90 93 20 0b 	sts	0x0B20, r25	; 0x800b20 <__TEXT_REGION_LENGTH__+0x7e0b20>
main():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/main.cpp:53
  onBeforeInit(); // Emnpty callback called before init but after the .init stuff. First normal code executed
  init(); // Interrupts are turned on just prior to init() returning.
  initVariant();
  if (!onAfterInit()) sei();  // enable interrupts.
    2eba:	78 94       	sei
_pinMode():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:229
    return;                             /* ignore invalid pins passed at runtime */
  }
  PORT_t *port = digitalPinToPortStruct(pin);
  // if (port == NULL) return;           /* skip this test; if bit_mask isn't NOT_A_PIN, port won't be null - if it is, pins_arduino.h contains errors and we can't expect any digital I/O to work correctly.
  if (mode == OUTPUT) {
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
    2ebc:	90 e4       	ldi	r25, 0x40	; 64
    2ebe:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
    2ec2:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7e04a1>
    2ec6:	92 e0       	ldi	r25, 0x02	; 2
    2ec8:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7e04a1>
    2ecc:	20 93 01 04 	sts	0x0401, r18	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:234
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
    uint8_t status = SREG;              /* Save state */
    2ed0:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:235
    cli();                              /* Interrupts off for PINnCTRL stuff */
    2ed2:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:236
    port->DIRCLR = bit_mask;            /* Configure direction as input */
    2ed4:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <__TEXT_REGION_LENGTH__+0x7e0442>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:238
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
    2ed8:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <__TEXT_REGION_LENGTH__+0x7e0450>
    2edc:	88 60       	ori	r24, 0x08	; 8
    2ede:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <__TEXT_REGION_LENGTH__+0x7e0450>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:242
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
    }
    SREG = status;                      /* Restore state */
    2ee2:	2f bf       	out	0x3f, r18	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:234
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
    uint8_t status = SREG;              /* Save state */
    2ee4:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:235
    cli();                              /* Interrupts off for PINnCTRL stuff */
    2ee6:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:236
    port->DIRCLR = bit_mask;            /* Configure direction as input */
    2ee8:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <__TEXT_REGION_LENGTH__+0x7e0442>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:238
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
    2eec:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <__TEXT_REGION_LENGTH__+0x7e0451>
    2ef0:	88 60       	ori	r24, 0x08	; 8
    2ef2:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <__TEXT_REGION_LENGTH__+0x7e0451>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:242
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
    }
    SREG = status;                      /* Restore state */
    2ef6:	2f bf       	out	0x3f, r18	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:234
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
    uint8_t status = SREG;              /* Save state */
    2ef8:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:235
    cli();                              /* Interrupts off for PINnCTRL stuff */
    2efa:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:236
    port->DIRCLR = bit_mask;            /* Configure direction as input */
    2efc:	80 e1       	ldi	r24, 0x10	; 16
    2efe:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x7e0422>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:238
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
    2f02:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x7e0434>
    2f06:	88 60       	ori	r24, 0x08	; 8
    2f08:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x7e0434>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:242
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
    }
    SREG = status;                      /* Restore state */
    2f0c:	9f bf       	out	0x3f, r25	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:234
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
    uint8_t status = SREG;              /* Save state */
    2f0e:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:235
    cli();                              /* Interrupts off for PINnCTRL stuff */
    2f10:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:236
    port->DIRCLR = bit_mask;            /* Configure direction as input */
    2f12:	84 e0       	ldi	r24, 0x04	; 4
    2f14:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <__TEXT_REGION_LENGTH__+0x7e0442>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:238
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
    2f18:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <__TEXT_REGION_LENGTH__+0x7e0452>
    2f1c:	88 60       	ori	r24, 0x08	; 8
    2f1e:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <__TEXT_REGION_LENGTH__+0x7e0452>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:242
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
    }
    SREG = status;                      /* Restore state */
    2f22:	9f bf       	out	0x3f, r25	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:234
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
    uint8_t status = SREG;              /* Save state */
    2f24:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:235
    cli();                              /* Interrupts off for PINnCTRL stuff */
    2f26:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:236
    port->DIRCLR = bit_mask;            /* Configure direction as input */
    2f28:	98 e0       	ldi	r25, 0x08	; 8
    2f2a:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <__TEXT_REGION_LENGTH__+0x7e0442>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:238
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
    2f2e:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x7e0453>
    2f32:	88 60       	ori	r24, 0x08	; 8
    2f34:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x7e0453>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:242
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
    }
    SREG = status;                      /* Restore state */
    2f38:	2f bf       	out	0x3f, r18	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:234
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
    uint8_t status = SREG;              /* Save state */
    2f3a:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:235
    cli();                              /* Interrupts off for PINnCTRL stuff */
    2f3c:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:236
    port->DIRCLR = bit_mask;            /* Configure direction as input */
    2f3e:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <__TEXT_REGION_LENGTH__+0x7e0422>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:238
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
    2f42:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x7e0433>
    2f46:	88 60       	ori	r24, 0x08	; 8
    2f48:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x7e0433>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:242
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
    }
    SREG = status;                      /* Restore state */
    2f4c:	2f bf       	out	0x3f, r18	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:234
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
    uint8_t status = SREG;              /* Save state */
    2f4e:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:235
    cli();                              /* Interrupts off for PINnCTRL stuff */
    2f50:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:236
    port->DIRCLR = bit_mask;            /* Configure direction as input */
    2f52:	80 e2       	ldi	r24, 0x20	; 32
    2f54:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x7e0422>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:238
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
    2f58:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x7e0435>
    2f5c:	88 60       	ori	r24, 0x08	; 8
    2f5e:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x7e0435>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:242
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
    }
    SREG = status;                      /* Restore state */
    2f62:	9f bf       	out	0x3f, r25	; 63
setupPCINT():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:986
}

#define debugSerial Serial0

void setupPCINT() {
  if (!MVIO.STATUS) {
    2f64:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    2f68:	81 11       	cpse	r24, r1
    2f6a:	56 c0       	rjmp	.+172    	; 0x3018 <main+0x232>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:987
    uint32_t start = millis();
    2f6c:	0e 94 be 07 	call	0xf7c	; 0xf7c <millis>
    2f70:	4b 01       	movw	r8, r22
    2f72:	5c 01       	movw	r10, r24
analogRead():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:143
    pin = digitalPinToAnalogInput(pin);
    if(pin == NOT_A_PIN) return -1;

  }
  /* Select channel */
  ADC0.MUXPOS = ((pin & 0x7F) << ADC_MUXPOS_gp);
    2f74:	15 e4       	ldi	r17, 0x45	; 69
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:147
  /* Reference should be already set up */

  /* Start conversion */
  ADC0.COMMAND = ADC_STCONV_bm;
    2f76:	01 e0       	ldi	r16, 0x01	; 1
setupPCINT():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:988
    while ((!MVIO.STATUS) && millis() - start > 2000) {
    2f78:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    2f7c:	81 11       	cpse	r24, r1
    2f7e:	4c c0       	rjmp	.+152    	; 0x3018 <main+0x232>
    2f80:	0e 94 be 07 	call	0xf7c	; 0xf7c <millis>
    2f84:	68 19       	sub	r22, r8
    2f86:	79 09       	sbc	r23, r9
    2f88:	8a 09       	sbc	r24, r10
    2f8a:	9b 09       	sbc	r25, r11
    2f8c:	61 3d       	cpi	r22, 0xD1	; 209
    2f8e:	77 40       	sbci	r23, 0x07	; 7
    2f90:	81 05       	cpc	r24, r1
    2f92:	91 05       	cpc	r25, r1
    2f94:	08 f4       	brcc	.+2      	; 0x2f98 <main+0x1b2>
    2f96:	40 c0       	rjmp	.+128    	; 0x3018 <main+0x232>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:989
      if (millis() - start > 1000) {
    2f98:	0e 94 be 07 	call	0xf7c	; 0xf7c <millis>
    2f9c:	68 19       	sub	r22, r8
    2f9e:	79 09       	sbc	r23, r9
    2fa0:	8a 09       	sbc	r24, r10
    2fa2:	9b 09       	sbc	r25, r11
    2fa4:	69 3e       	cpi	r22, 0xE9	; 233
    2fa6:	73 40       	sbci	r23, 0x03	; 3
    2fa8:	81 05       	cpc	r24, r1
    2faa:	91 05       	cpc	r25, r1
    2fac:	28 f3       	brcs	.-54     	; 0x2f78 <main+0x192>
write():
    2fae:	67 e0       	ldi	r22, 0x07	; 7
    2fb0:	71 e4       	ldi	r23, 0x41	; 65
    2fb2:	8c ea       	ldi	r24, 0xAC	; 172
    2fb4:	9f e4       	ldi	r25, 0x4F	; 79
    2fb6:	43 d8       	rcall	.-3962   	; 0x203e <Print::write(char const*) [clone .part.2]>
    2fb8:	64 e0       	ldi	r22, 0x04	; 4
    2fba:	71 e4       	ldi	r23, 0x41	; 65
    2fbc:	8c ea       	ldi	r24, 0xAC	; 172
    2fbe:	9f e4       	ldi	r25, 0x4F	; 79
    2fc0:	3e d8       	rcall	.-3972   	; 0x203e <Print::write(char const*) [clone .part.2]>
analogRead():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:143
    pin = digitalPinToAnalogInput(pin);
    if(pin == NOT_A_PIN) return -1;

  }
  /* Select channel */
  ADC0.MUXPOS = ((pin & 0x7F) << ADC_MUXPOS_gp);
    2fc2:	10 93 08 06 	sts	0x0608, r17	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:147
  /* Reference should be already set up */

  /* Start conversion */
  ADC0.COMMAND = ADC_STCONV_bm;
    2fc6:	00 93 0a 06 	sts	0x060A, r16	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:150

  /* Wait for result ready */
  while(!(ADC0.INTFLAGS & ADC_RESRDY_bm));
    2fca:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7e060d>
    2fce:	80 ff       	sbrs	r24, 0
    2fd0:	fc cf       	rjmp	.-8      	; 0x2fca <main+0x1e4>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:156

  #if (defined(__AVR_DA__) && (!defined(NO_ADC_WORKAROUND)))
    // That may become defined when DA-series silicon is available with the fix
    ADC0.MUXPOS = 0x40;
  #endif
  return ADC0.RES;
    2fd2:	c0 90 10 06 	lds	r12, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    2fd6:	d0 90 11 06 	lds	r13, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
print():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:78
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    2fda:	0d 2c       	mov	r0, r13
    2fdc:	00 0c       	add	r0, r0
    2fde:	ee 08       	sbc	r14, r14
    2fe0:	ff 08       	sbc	r15, r15
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:96
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2fe2:	2a e0       	ldi	r18, 0x0A	; 10
    2fe4:	b7 01       	movw	r22, r14
    2fe6:	a6 01       	movw	r20, r12
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:91
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    2fe8:	f7 fe       	sbrs	r15, 7
    2fea:	0d c0       	rjmp	.+26     	; 0x3006 <main+0x220>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:92
      int t = print('-');
    2fec:	6d e2       	ldi	r22, 0x2D	; 45
    2fee:	8c ea       	ldi	r24, 0xAC	; 172
    2ff0:	9f e4       	ldi	r25, 0x4F	; 79
    2ff2:	0e 94 0a 05 	call	0xa14	; 0xa14 <Print::print(char)>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:93
      n = -n;
    2ff6:	44 27       	eor	r20, r20
    2ff8:	55 27       	eor	r21, r21
    2ffa:	ba 01       	movw	r22, r20
    2ffc:	4c 19       	sub	r20, r12
    2ffe:	5d 09       	sbc	r21, r13
    3000:	6e 09       	sbc	r22, r14
    3002:	7f 09       	sbc	r23, r15
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:94
      return printNumber(n, 10) + t;
    3004:	2a e0       	ldi	r18, 0x0A	; 10
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:96
    }
    return printNumber(n, 10);
    3006:	8c ea       	ldi	r24, 0xAC	; 172
    3008:	9f e4       	ldi	r25, 0x4F	; 79
    300a:	28 d8       	rcall	.-4016   	; 0x205c <Print::printNumber(unsigned long, unsigned char)>
write():
    300c:	64 e0       	ldi	r22, 0x04	; 4
    300e:	71 e4       	ldi	r23, 0x41	; 65
    3010:	8c ea       	ldi	r24, 0xAC	; 172
    3012:	9f e4       	ldi	r25, 0x4F	; 79
    3014:	14 d8       	rcall	.-4056   	; 0x203e <Print::write(char const*) [clone .part.2]>
    3016:	b0 cf       	rjmp	.-160    	; 0x2f78 <main+0x192>
setupPCINT():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:995
        Serial.println("MVIO failed to initialize? No VDDIO2?");
        Serial.println(analogRead(ADC_VDDIO2DIV10));
      }
    }
  }
  VPORTC.INTFLAGS = VPORTC.INTFLAGS;
    3018:	8b b1       	in	r24, 0x0b	; 11
    301a:	8b b9       	out	0x0b, r24	; 11
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:996
  PORTC.PIN0CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
    301c:	89 e0       	ldi	r24, 0x09	; 9
    301e:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <__TEXT_REGION_LENGTH__+0x7e0450>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:997
  PORTC.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
    3022:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <__TEXT_REGION_LENGTH__+0x7e0451>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:998
  PORTC.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
    3026:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <__TEXT_REGION_LENGTH__+0x7e0452>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:999
  PORTC.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
    302a:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x7e0453>
swap():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/UART.cpp:347
  uint8_t ret_val = _pins_to_swap(_usart_pins, _mux_count, tx, rx);   // return 127 when correct swap number wasn't found
  return swap(ret_val);
}

bool UartClass::swap(uint8_t newmux) {
  if (newmux < _mux_count) {
    302e:	80 91 bc 4f 	lds	r24, 0x4FBC	; 0x804fbc <Serial0+0x10>
    3032:	82 30       	cpi	r24, 0x02	; 2
    3034:	08 f4       	brcc	.+2      	; 0x3038 <main+0x252>
    3036:	53 c1       	rjmp	.+678    	; 0x32de <main+0x4f8>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/UART.cpp:348
    _pin_set = newmux;
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	80 93 bd 4f 	sts	0x4FBD, r24	; 0x804fbd <Serial0+0x11>
setup():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:226
  //_PROTECTED_WRITE(CLKCTRL_OSCHFTUNE,CLKCTRL_OSCHFTUNE);
  setupPins();
  setupPCINT();
  //setupRF();
  Serial.swap(1);
  Serial.begin(115200);
    303e:	40 e0       	ldi	r20, 0x00	; 0
    3040:	52 ec       	ldi	r21, 0xC2	; 194
    3042:	61 e0       	ldi	r22, 0x01	; 1
    3044:	70 e0       	ldi	r23, 0x00	; 0
    3046:	8c ea       	ldi	r24, 0xAC	; 172
    3048:	9f e4       	ldi	r25, 0x4F	; 79
    304a:	0e 94 ce 09 	call	0x139c	; 0x139c <UartClass::begin(unsigned long)>
begin():
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:198
	 * - 40x4 is dual 40x2 displays using dual E signals which is not suppo
	 *
	 * users can override this at any time by calling setRowOffsets(r0,r1,r2,r3)
	 */

	if((!_rowOffsets[0] && !_rowOffsets[1] && !_rowOffsets[2] && !_rowOffsets[3])
    304e:	80 91 72 5e 	lds	r24, 0x5E72	; 0x805e72 <lcd+0xc>
    3052:	81 11       	cpse	r24, r1
    3054:	0c c0       	rjmp	.+24     	; 0x306e <main+0x288>
    3056:	80 91 73 5e 	lds	r24, 0x5E73	; 0x805e73 <lcd+0xd>
    305a:	81 11       	cpse	r24, r1
    305c:	08 c0       	rjmp	.+16     	; 0x306e <main+0x288>
    305e:	80 91 74 5e 	lds	r24, 0x5E74	; 0x805e74 <lcd+0xe>
    3062:	81 11       	cpse	r24, r1
    3064:	04 c0       	rjmp	.+8      	; 0x306e <main+0x288>
    3066:	80 91 75 5e 	lds	r24, 0x5E75	; 0x805e75 <lcd+0xf>
    306a:	88 23       	and	r24, r24
    306c:	21 f0       	breq	.+8      	; 0x3076 <main+0x290>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:199
	 || (_cols && (_cols != cols)))
    306e:	80 91 6d 5e 	lds	r24, 0x5E6D	; 0x805e6d <lcd+0x7>
    3072:	8f 7e       	andi	r24, 0xEF	; 239
    3074:	59 f0       	breq	.+22     	; 0x308c <main+0x2a6>
setRowOffsets():
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:564
// See here for further explanation of lcd memory addressing:
// http://web.alfredstate.edu/weimandn/lcd/lcd_addressing/lcd_addressing_index.html

int hd44780::setRowOffsets(int row0, int row1, int row2, int row3)
{
	_rowOffsets[0] = row0;
    3076:	10 92 72 5e 	sts	0x5E72, r1	; 0x805e72 <lcd+0xc>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:565
	_rowOffsets[1] = row1;
    307a:	80 e4       	ldi	r24, 0x40	; 64
    307c:	80 93 73 5e 	sts	0x5E73, r24	; 0x805e73 <lcd+0xd>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:566
	_rowOffsets[2] = row2;
    3080:	80 e1       	ldi	r24, 0x10	; 16
    3082:	80 93 74 5e 	sts	0x5E74, r24	; 0x805e74 <lcd+0xe>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:567
	_rowOffsets[3] = row3;
    3086:	80 e5       	ldi	r24, 0x50	; 80
    3088:	80 93 75 5e 	sts	0x5E75, r24	; 0x805e75 <lcd+0xf>
begin():
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:208


	/*
	 * Save rows/cols
	 */
	_rows = rows;
    308c:	82 e0       	ldi	r24, 0x02	; 2
    308e:	80 93 6e 5e 	sts	0x5E6E, r24	; 0x805e6e <lcd+0x8>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:209
	_cols = cols;
    3092:	80 e1       	ldi	r24, 0x10	; 16
    3094:	80 93 6d 5e 	sts	0x5E6D, r24	; 0x805e6d <lcd+0x7>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:218
	 * according to datasheet,we need at least 40ms after power rises above 2.7V
	 * before sending commands.The Arduino AVR can turn on and start running way
	 * before 4.5V so we'll wait 100ms to add some additional margin
	 */

	delay(100); 
    3098:	64 e6       	ldi	r22, 0x64	; 100
    309a:	70 e0       	ldi	r23, 0x00	; 0
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	0e 94 8e 07 	call	0xf1c	; 0xf1c <delay>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:221
  
	// default to 4 bit mode (can be overridded by i/o class library)
	_displayfunction = HD44780_4BITMODE;
    30a4:	10 92 6a 5e 	sts	0x5E6A, r1	; 0x805e6a <lcd+0x4>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:224

	// call h/w i/o class init function
	if((rval = ioinit())) // intentional assignment
    30a8:	86 e6       	ldi	r24, 0x66	; 102
    30aa:	9e e5       	ldi	r25, 0x5E	; 94
    30ac:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <hd44780_pinIO::ioinit()>
    30b0:	89 2b       	or	r24, r25
    30b2:	09 f0       	breq	.+2      	; 0x30b6 <main+0x2d0>
    30b4:	49 c0       	rjmp	.+146    	; 0x3148 <main+0x362>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:229
	{
		return(rval);
	}

	if (_rows > 1)
    30b6:	80 91 6e 5e 	lds	r24, 0x5E6E	; 0x805e6e <lcd+0x8>
    30ba:	82 30       	cpi	r24, 0x02	; 2
    30bc:	28 f0       	brcs	.+10     	; 0x30c8 <main+0x2e2>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:231
	{
		_displayfunction |= HD44780_2LINE;
    30be:	80 91 6a 5e 	lds	r24, 0x5E6A	; 0x805e6a <lcd+0x4>
    30c2:	88 60       	ori	r24, 0x08	; 8
    30c4:	80 93 6a 5e 	sts	0x5E6A, r24	; 0x805e6a <lcd+0x4>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:484
	 * like yield() to potentially allow other code to execute during this time period.
	 *
	 * delay() can be used because this code is never called from a constructor
	 *
	 */
	command4bit(HD44780_FUNCTIONSET|HD44780_8BITMODE);
    30c8:	80 e3       	ldi	r24, 0x30	; 48
    30ca:	0e 94 3c 0b 	call	0x1678	; 0x1678 <hd44780::command4bit(unsigned char) [clone .constprop.8]>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:485
	delay(5); // wait 5ms vs 4.1ms, some are slower than spec
    30ce:	65 e0       	ldi	r22, 0x05	; 5
    30d0:	70 e0       	ldi	r23, 0x00	; 0
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <delay>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:487

	command4bit(HD44780_FUNCTIONSET|HD44780_8BITMODE);
    30da:	80 e3       	ldi	r24, 0x30	; 48
    30dc:	0e 94 3c 0b 	call	0x1678	; 0x1678 <hd44780::command4bit(unsigned char) [clone .constprop.8]>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:488
	delay(1); // wait 1ms vs 100us
    30e0:	61 e0       	ldi	r22, 0x01	; 1
    30e2:	70 e0       	ldi	r23, 0x00	; 0
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	0e 94 8e 07 	call	0xf1c	; 0xf1c <delay>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:490
    
	command4bit(HD44780_FUNCTIONSET|HD44780_8BITMODE);
    30ec:	80 e3       	ldi	r24, 0x30	; 48
    30ee:	0e 94 3c 0b 	call	0x1678	; 0x1678 <hd44780::command4bit(unsigned char) [clone .constprop.8]>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:491
	delay(1); // wait 1ms vs 100us
    30f2:	61 e0       	ldi	r22, 0x01	; 1
    30f4:	70 e0       	ldi	r23, 0x00	; 0
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	0e 94 8e 07 	call	0xf1c	; 0xf1c <delay>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:504
	 * isn't in 4 bit mode yet.
	 * Note: there is no need for a delay *after* command4bit() since
	 * it uses markStart(_insExecTime) to indicate the instruction time
	 * and will be honored by waitReady() used in the i/o class.
	 */
	if(!(_displayfunction & HD44780_8BITMODE))
    30fe:	80 91 6a 5e 	lds	r24, 0x5E6A	; 0x805e6a <lcd+0x4>
    3102:	84 fd       	sbrc	r24, 4
    3104:	03 c0       	rjmp	.+6      	; 0x310c <main+0x326>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:505
		command4bit(HD44780_FUNCTIONSET|HD44780_4BITMODE);
    3106:	80 e2       	ldi	r24, 0x20	; 32
    3108:	0e 94 3c 0b 	call	0x1678	; 0x1678 <hd44780::command4bit(unsigned char) [clone .constprop.8]>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:514
	 * and in 4 bit mode for 4bit only host interfaces so we can 
	 * now use the "normal" library command() & API interface functions
	 */

	// set # lines, font size, etc.
	command(HD44780_FUNCTIONSET | _displayfunction);  
    310c:	60 91 6a 5e 	lds	r22, 0x5E6A	; 0x805e6a <lcd+0x4>
    3110:	60 62       	ori	r22, 0x20	; 32
    3112:	86 e6       	ldi	r24, 0x66	; 102
    3114:	9e e5       	ldi	r25, 0x5E	; 94
    3116:	0e 94 ca 07 	call	0xf94	; 0xf94 <hd44780::command(unsigned char)>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:518


	// turn the display on with no cursor or blinking default
	_displaycontrol = HD44780_DISPLAYON | HD44780_CURSOROFF | HD44780_BLINKOFF;  
    311a:	84 e0       	ldi	r24, 0x04	; 4
    311c:	80 93 6b 5e 	sts	0x5E6B, r24	; 0x805e6b <lcd+0x5>
display():
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:639

// turn on display pixels
int hd44780::display()
{
	_displaycontrol |= HD44780_DISPLAYON;
	return(command(HD44780_DISPLAYCONTROL | _displaycontrol));
    3120:	6c e0       	ldi	r22, 0x0C	; 12
    3122:	86 e6       	ldi	r24, 0x66	; 102
    3124:	9e e5       	ldi	r25, 0x5E	; 94
    3126:	0e 94 ca 07 	call	0xf94	; 0xf94 <hd44780::command(unsigned char)>
begin():
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:521

	// turn the display on with no cursor or blinking default
	_displaycontrol = HD44780_DISPLAYON | HD44780_CURSOROFF | HD44780_BLINKOFF;  
	display();

	clear(); // clear display
    312a:	0e 94 01 08 	call	0x1002	; 0x1002 <hd44780::clear() [clone .constprop.25]>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:524

	// Initialize to default text direction (for romance languages)
	_displaymode = HD44780_ENTRYLEFT2RIGHT;
    312e:	82 e0       	ldi	r24, 0x02	; 2
    3130:	80 93 6c 5e 	sts	0x5E6C, r24	; 0x805e6c <lcd+0x6>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:526
	// set the entry mode
	rval = command(HD44780_ENTRYMODESET | _displaymode);
    3134:	66 e0       	ldi	r22, 0x06	; 6
    3136:	86 e6       	ldi	r24, 0x66	; 102
    3138:	9e e5       	ldi	r25, 0x5E	; 94
    313a:	0e 94 ca 07 	call	0xf94	; 0xf94 <hd44780::command(unsigned char)>
backlight():
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:788
#endif

// turn on backlight at full intensity
int hd44780::backlight(void)
{
	return(iosetBacklight(-1)); // max brightness
    313e:	6f ef       	ldi	r22, 0xFF	; 255
    3140:	86 e6       	ldi	r24, 0x66	; 102
    3142:	9e e5       	ldi	r25, 0x5E	; 94
    3144:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <hd44780_pinIO::iosetBacklight(unsigned char)>
setup():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:229
  
  lcd.begin(16, 2);
  lcd.print(F("Woah I'm on a DB!"));
    3148:	62 eb       	ldi	r22, 0xB2	; 178
    314a:	76 e0       	ldi	r23, 0x06	; 6
    314c:	86 e6       	ldi	r24, 0x66	; 102
    314e:	9e e5       	ldi	r25, 0x5E	; 94
    3150:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:230
  lcd.setCursor(0, 1);
    3154:	41 e0       	ldi	r20, 0x01	; 1
    3156:	60 e0       	ldi	r22, 0x00	; 0
    3158:	86 e6       	ldi	r24, 0x66	; 102
    315a:	9e e5       	ldi	r25, 0x5E	; 94
    315c:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:231
  lcd.print(F("Nothing works!"));
    3160:	63 ea       	ldi	r22, 0xA3	; 163
    3162:	76 e0       	ldi	r23, 0x06	; 6
    3164:	86 e6       	ldi	r24, 0x66	; 102
    3166:	9e e5       	ldi	r25, 0x5E	; 94
    3168:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
write():
    316c:	6d e2       	ldi	r22, 0x2D	; 45
    316e:	71 e4       	ldi	r23, 0x41	; 65
    3170:	8c ea       	ldi	r24, 0xAC	; 172
    3172:	9f e4       	ldi	r25, 0x4F	; 79
    3174:	0e 94 1f 10 	call	0x203e	; 0x203e <Print::write(char const*) [clone .part.2]>
    3178:	64 e0       	ldi	r22, 0x04	; 4
    317a:	71 e4       	ldi	r23, 0x41	; 65
    317c:	8c ea       	ldi	r24, 0xAC	; 172
    317e:	9f e4       	ldi	r25, 0x4F	; 79
    3180:	0e 94 1f 10 	call	0x203e	; 0x203e <Print::write(char const*) [clone .part.2]>
setup():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:233
  Serial.println("LCD_INIT");
  analogWrite(LCD_BL_R, 32);
    3184:	60 e2       	ldi	r22, 0x20	; 32
    3186:	70 e0       	ldi	r23, 0x00	; 0
    3188:	88 e0       	ldi	r24, 0x08	; 8
    318a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <analogWrite>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:234
  analogWrite(LCD_BL_G, 32);
    318e:	60 e2       	ldi	r22, 0x20	; 32
    3190:	70 e0       	ldi	r23, 0x00	; 0
    3192:	89 e0       	ldi	r24, 0x09	; 9
    3194:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <analogWrite>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:235
  analogWrite(LCD_BL_B, 32);
    3198:	60 e2       	ldi	r22, 0x20	; 32
    319a:	70 e0       	ldi	r23, 0x00	; 0
    319c:	8a e0       	ldi	r24, 0x0A	; 10
    319e:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <analogWrite>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:238
  //analogWrite(PIN_PD6,128);
 
  delay(2000);
    31a2:	60 ed       	ldi	r22, 0xD0	; 208
    31a4:	77 e0       	ldi	r23, 0x07	; 7
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	0e 94 8e 07 	call	0xf1c	; 0xf1c <delay>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:239
  lcd.clear();
    31ae:	0e 94 01 08 	call	0x1002	; 0x1002 <hd44780::clear() [clone .constprop.25]>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:241
  //loadMode();
  setMode(4);
    31b2:	84 e0       	ldi	r24, 0x04	; 4
    31b4:	91 da       	rcall	.-2782   	; 0x26d8 <setMode(unsigned char)>
map():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
#include "Common.h"

/* C++ prototypes */
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    31b6:	21 2c       	mov	r2, r1
    31b8:	31 2c       	mov	r3, r1
    31ba:	21 01       	movw	r4, r2
    31bc:	2a 94       	dec	r2
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:408
void handleUI() {
  static byte lastBtnState = 7;
  static byte lastBtnBounceState = 7;
  static unsigned long lastBtnAt = 0;
  static unsigned long lastPressAt = 0;
  byte btnRead = BTN_PORT_READ();
    31be:	06 b1       	in	r16, 0x06	; 6
    31c0:	10 e0       	ldi	r17, 0x00	; 0
    31c2:	43 e0       	ldi	r20, 0x03	; 3
    31c4:	15 95       	asr	r17
    31c6:	07 95       	ror	r16
    31c8:	4a 95       	dec	r20
    31ca:	e1 f7       	brne	.-8      	; 0x31c4 <main+0x3de>
    31cc:	60 2f       	mov	r22, r16
    31ce:	67 70       	andi	r22, 0x07	; 7
    31d0:	d6 2e       	mov	r13, r22
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:409
  if (!(btnRead == lastBtnBounceState)) { //debounce all buttons at once.
    31d2:	80 91 04 40 	lds	r24, 0x4004	; 0x804004 <handleUI()::lastBtnBounceState>
    31d6:	68 17       	cp	r22, r24
    31d8:	09 f4       	brne	.+2      	; 0x31dc <main+0x3f6>
    31da:	84 c0       	rjmp	.+264    	; 0x32e4 <main+0x4fe>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:410
    lastBtnBounceState = btnRead;
    31dc:	60 93 04 40 	sts	0x4004, r22	; 0x804004 <handleUI()::lastBtnBounceState>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:411
    lastBtnAt = millis();
    31e0:	0e 94 be 07 	call	0xf7c	; 0xf7c <millis>
    31e4:	60 93 70 41 	sts	0x4170, r22	; 0x804170 <handleUI()::lastBtnAt>
    31e8:	70 93 71 41 	sts	0x4171, r23	; 0x804171 <handleUI()::lastBtnAt+0x1>
    31ec:	80 93 72 41 	sts	0x4172, r24	; 0x804172 <handleUI()::lastBtnAt+0x2>
    31f0:	90 93 73 41 	sts	0x4173, r25	; 0x804173 <handleUI()::lastBtnAt+0x3>
handleLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:479
void handleLCD() {
  static byte drift2_colors = 255;
  static unsigned long lastInputAt;
  static byte attractmode = 0;
  byte uichg = 0;
  if (millis() - lastRFUpdateAt < 5000 && lastRFUpdateAt) {
    31f4:	0e 94 be 07 	call	0xf7c	; 0xf7c <millis>
    31f8:	00 91 7b 41 	lds	r16, 0x417B	; 0x80417b <lastRFUpdateAt>
    31fc:	10 91 7c 41 	lds	r17, 0x417C	; 0x80417c <lastRFUpdateAt+0x1>
    3200:	20 91 7d 41 	lds	r18, 0x417D	; 0x80417d <lastRFUpdateAt+0x2>
    3204:	30 91 7e 41 	lds	r19, 0x417E	; 0x80417e <lastRFUpdateAt+0x3>
    3208:	60 1b       	sub	r22, r16
    320a:	71 0b       	sbc	r23, r17
    320c:	82 0b       	sbc	r24, r18
    320e:	93 0b       	sbc	r25, r19
    3210:	68 38       	cpi	r22, 0x88	; 136
    3212:	73 41       	sbci	r23, 0x13	; 19
    3214:	81 05       	cpc	r24, r1
    3216:	91 05       	cpc	r25, r1
    3218:	68 f4       	brcc	.+26     	; 0x3234 <main+0x44e>
    321a:	80 91 7b 41 	lds	r24, 0x417B	; 0x80417b <lastRFUpdateAt>
    321e:	90 91 7c 41 	lds	r25, 0x417C	; 0x80417c <lastRFUpdateAt+0x1>
    3222:	a0 91 7d 41 	lds	r26, 0x417D	; 0x80417d <lastRFUpdateAt+0x2>
    3226:	b0 91 7e 41 	lds	r27, 0x417E	; 0x80417e <lastRFUpdateAt+0x3>
    322a:	89 2b       	or	r24, r25
    322c:	8a 2b       	or	r24, r26
    322e:	8b 2b       	or	r24, r27
    3230:	09 f0       	breq	.+2      	; 0x3234 <main+0x44e>
    3232:	58 c1       	rjmp	.+688    	; 0x34e4 <main+0x6fe>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:482
    return;
  }
  cli();
    3234:	f8 94       	cli
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:483
  uichg = UIChanged;
    3236:	10 91 06 40 	lds	r17, 0x4006	; 0x804006 <UIChanged>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:484
  UIChanged = 0;
    323a:	10 92 06 40 	sts	0x4006, r1	; 0x804006 <UIChanged>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:485
  sei();
    323e:	78 94       	sei
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:486
  if (uichg == 0) {
    3240:	11 11       	cpse	r17, r1
    3242:	d1 c1       	rjmp	.+930    	; 0x35e6 <main+0x800>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:487
    if (millis() - lastInputAt > 60000) {
    3244:	0e 94 be 07 	call	0xf7c	; 0xf7c <millis>
    3248:	c0 90 77 41 	lds	r12, 0x4177	; 0x804177 <handleLCD()::lastInputAt>
    324c:	d0 90 78 41 	lds	r13, 0x4178	; 0x804178 <handleLCD()::lastInputAt+0x1>
    3250:	e0 90 79 41 	lds	r14, 0x4179	; 0x804179 <handleLCD()::lastInputAt+0x2>
    3254:	f0 90 7a 41 	lds	r15, 0x417A	; 0x80417a <handleLCD()::lastInputAt+0x3>
    3258:	6c 19       	sub	r22, r12
    325a:	7d 09       	sbc	r23, r13
    325c:	8e 09       	sbc	r24, r14
    325e:	9f 09       	sbc	r25, r15
    3260:	61 36       	cpi	r22, 0x61	; 97
    3262:	7a 4e       	sbci	r23, 0xEA	; 234
    3264:	81 05       	cpc	r24, r1
    3266:	91 05       	cpc	r25, r1
    3268:	08 f4       	brcc	.+2      	; 0x326c <main+0x486>
    326a:	3c c1       	rjmp	.+632    	; 0x34e4 <main+0x6fe>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:488
      if (!attractmode || (millis() - lastInputAt > 120000)) {
    326c:	80 91 76 41 	lds	r24, 0x4176	; 0x804176 <handleLCD()::attractmode>
    3270:	81 11       	cpse	r24, r1
    3272:	2c c1       	rjmp	.+600    	; 0x34cc <main+0x6e6>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:489
        attractmode = 1;
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	80 93 76 41 	sts	0x4176, r24	; 0x804176 <handleLCD()::attractmode>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:490
        lastInputAt = millis() - 60000;
    327a:	0e 94 be 07 	call	0xf7c	; 0xf7c <millis>
    327e:	60 56       	subi	r22, 0x60	; 96
    3280:	7a 4e       	sbci	r23, 0xEA	; 234
    3282:	81 09       	sbc	r24, r1
    3284:	91 09       	sbc	r25, r1
    3286:	60 93 77 41 	sts	0x4177, r22	; 0x804177 <handleLCD()::lastInputAt>
    328a:	70 93 78 41 	sts	0x4178, r23	; 0x804178 <handleLCD()::lastInputAt+0x1>
    328e:	80 93 79 41 	sts	0x4179, r24	; 0x804179 <handleLCD()::lastInputAt+0x2>
    3292:	90 93 7a 41 	sts	0x417A, r25	; 0x80417a <handleLCD()::lastInputAt+0x3>
doAttractLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:561
    }
  }
  attractmode = 0;
}
void doAttractLCD() {
  lcd.clear();
    3296:	0e 94 01 08 	call	0x1002	; 0x1002 <hd44780::clear() [clone .constprop.25]>
random():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    329a:	f0 d7       	rcall	.+4064   	; 0x427c <random>
    329c:	23 e0       	ldi	r18, 0x03	; 3
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	40 e0       	ldi	r20, 0x00	; 0
    32a2:	50 e0       	ldi	r21, 0x00	; 0
    32a4:	0e 94 93 21 	call	0x4326	; 0x4326 <__divmodsi4>
doAttractLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:563
  byte s = random(0, 3);
  if (!s) {
    32a8:	61 11       	cpse	r22, r1
    32aa:	59 c1       	rjmp	.+690    	; 0x355e <main+0x778>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:564
    lcd.setCursor(0, 0);
    32ac:	40 e0       	ldi	r20, 0x00	; 0
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	86 e6       	ldi	r24, 0x66	; 102
    32b2:	9e e5       	ldi	r25, 0x5E	; 94
    32b4:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:565
    lcd.print(F("LEDCTRLA - V2.1"));
    32b8:	6c e4       	ldi	r22, 0x4C	; 76
    32ba:	77 e0       	ldi	r23, 0x07	; 7
    32bc:	86 e6       	ldi	r24, 0x66	; 102
    32be:	9e e5       	ldi	r25, 0x5E	; 94
    32c0:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:566
    lcd.setCursor(0, 1);
    32c4:	41 e0       	ldi	r20, 0x01	; 1
    32c6:	60 e0       	ldi	r22, 0x00	; 0
    32c8:	86 e6       	ldi	r24, 0x66	; 102
    32ca:	9e e5       	ldi	r25, 0x5E	; 94
    32cc:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:567
    lcd.print(F("12/19/21 vers."));
    32d0:	6d e3       	ldi	r22, 0x3D	; 61
    32d2:	77 e0       	ldi	r23, 0x07	; 7
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:580
    lcd.setCursor(2, 0);
    lcd.print(F("PLAY WITH ME"));
    lcd.setCursor(0, 1);
    byte r = random(0, 2);
    if (r == 0) {
      lcd.print(F("USE KNOBS&BUTTON"));
    32d4:	86 e6       	ldi	r24, 0x66	; 102
    32d6:	9e e5       	ldi	r25, 0x5E	; 94
    32d8:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
    32dc:	03 c1       	rjmp	.+518    	; 0x34e4 <main+0x6fe>
swap():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/UART.cpp:354
    return true;
  } else if (newmux == MUX_NONE) {  // 128 codes for MUX_NONE
    _pin_set = _mux_count;
    return true;
  } else {
    _pin_set = 0;
    32de:	10 92 bd 4f 	sts	0x4FBD, r1	; 0x804fbd <Serial0+0x11>
    32e2:	ad ce       	rjmp	.-678    	; 0x303e <main+0x258>
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:413
  byte btnRead = BTN_PORT_READ();
  if (!(btnRead == lastBtnBounceState)) { //debounce all buttons at once.
    lastBtnBounceState = btnRead;
    lastBtnAt = millis();
  } else {
    if (millis() - lastBtnAt > 50) { //has been stable for 50ms
    32e4:	0e 94 be 07 	call	0xf7c	; 0xf7c <millis>
    32e8:	80 90 70 41 	lds	r8, 0x4170	; 0x804170 <handleUI()::lastBtnAt>
    32ec:	90 90 71 41 	lds	r9, 0x4171	; 0x804171 <handleUI()::lastBtnAt+0x1>
    32f0:	a0 90 72 41 	lds	r10, 0x4172	; 0x804172 <handleUI()::lastBtnAt+0x2>
    32f4:	b0 90 73 41 	lds	r11, 0x4173	; 0x804173 <handleUI()::lastBtnAt+0x3>
    32f8:	68 19       	sub	r22, r8
    32fa:	79 09       	sbc	r23, r9
    32fc:	8a 09       	sbc	r24, r10
    32fe:	9b 09       	sbc	r25, r11
    3300:	63 33       	cpi	r22, 0x33	; 51
    3302:	71 05       	cpc	r23, r1
    3304:	81 05       	cpc	r24, r1
    3306:	91 05       	cpc	r25, r1
    3308:	08 f4       	brcc	.+2      	; 0x330c <main+0x526>
    330a:	74 cf       	rjmp	.-280    	; 0x31f4 <main+0x40e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:414
      if (btnRead < lastBtnState ) {
    330c:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <handleUI()::lastBtnState>
    3310:	d8 16       	cp	r13, r24
    3312:	d8 f4       	brcc	.+54     	; 0x334a <main+0x564>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:415
        if (!lastPressAt && !(btnRead & 1)) {
    3314:	80 91 6c 41 	lds	r24, 0x416C	; 0x80416c <handleUI()::lastPressAt>
    3318:	90 91 6d 41 	lds	r25, 0x416D	; 0x80416d <handleUI()::lastPressAt+0x1>
    331c:	a0 91 6e 41 	lds	r26, 0x416E	; 0x80416e <handleUI()::lastPressAt+0x2>
    3320:	b0 91 6f 41 	lds	r27, 0x416F	; 0x80416f <handleUI()::lastPressAt+0x3>
    3324:	89 2b       	or	r24, r25
    3326:	8a 2b       	or	r24, r26
    3328:	8b 2b       	or	r24, r27
    332a:	61 f4       	brne	.+24     	; 0x3344 <main+0x55e>
    332c:	00 fd       	sbrc	r16, 0
    332e:	0a c0       	rjmp	.+20     	; 0x3344 <main+0x55e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:416
          lastPressAt = millis();
    3330:	0e 94 be 07 	call	0xf7c	; 0xf7c <millis>
    3334:	60 93 6c 41 	sts	0x416C, r22	; 0x80416c <handleUI()::lastPressAt>
    3338:	70 93 6d 41 	sts	0x416D, r23	; 0x80416d <handleUI()::lastPressAt+0x1>
    333c:	80 93 6e 41 	sts	0x416E, r24	; 0x80416e <handleUI()::lastPressAt+0x2>
    3340:	90 93 6f 41 	sts	0x416F, r25	; 0x80416f <handleUI()::lastPressAt+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:461
            currentSettingRight++;
          }
          UIChanged |= 2;
        }
      }
      lastBtnState = btnRead;
    3344:	d0 92 03 40 	sts	0x4003, r13	; 0x804003 <handleUI()::lastBtnState>
    3348:	55 cf       	rjmp	.-342    	; 0x31f4 <main+0x40e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:420
        if (!lastPressAt && !(btnRead & 1)) {
          lastPressAt = millis();
        }
        //do nothing - was button being pressed
      } else {
        if (((btnRead & MODE_BTN_bm)) && !(lastBtnState & MODE_BTN_bm)) {
    334a:	02 ff       	sbrs	r16, 2
    334c:	77 c0       	rjmp	.+238    	; 0x343c <main+0x656>
    334e:	82 fd       	sbrc	r24, 2
    3350:	75 c0       	rjmp	.+234    	; 0x343c <main+0x656>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:421
          if (lastPressAt && millis() - lastPressAt > 10000) {
    3352:	80 90 6c 41 	lds	r8, 0x416C	; 0x80416c <handleUI()::lastPressAt>
    3356:	90 90 6d 41 	lds	r9, 0x416D	; 0x80416d <handleUI()::lastPressAt+0x1>
    335a:	a0 90 6e 41 	lds	r10, 0x416E	; 0x80416e <handleUI()::lastPressAt+0x2>
    335e:	b0 90 6f 41 	lds	r11, 0x416F	; 0x80416f <handleUI()::lastPressAt+0x3>
    3362:	81 14       	cp	r8, r1
    3364:	91 04       	cpc	r9, r1
    3366:	a1 04       	cpc	r10, r1
    3368:	b1 04       	cpc	r11, r1
    336a:	09 f4       	brne	.+2      	; 0x336e <main+0x588>
    336c:	53 c0       	rjmp	.+166    	; 0x3414 <main+0x62e>
    336e:	0e 94 be 07 	call	0xf7c	; 0xf7c <millis>
    3372:	68 19       	sub	r22, r8
    3374:	79 09       	sbc	r23, r9
    3376:	8a 09       	sbc	r24, r10
    3378:	9b 09       	sbc	r25, r11
    337a:	61 31       	cpi	r22, 0x11	; 17
    337c:	77 42       	sbci	r23, 0x27	; 39
    337e:	81 05       	cpc	r24, r1
    3380:	91 05       	cpc	r25, r1
    3382:	08 f4       	brcc	.+2      	; 0x3386 <main+0x5a0>
    3384:	f0 c6       	rjmp	.+3552   	; 0x4166 <nextbyte24+0x4e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:423

            lcd.clear();
    3386:	0e 94 01 08 	call	0x1002	; 0x1002 <hd44780::clear() [clone .constprop.25]>
    338a:	3f e0       	ldi	r19, 0x0F	; 15
    338c:	e3 2e       	mov	r14, r19
    338e:	f1 2c       	mov	r15, r1
_ZN5EERefC2Ej():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:58


struct EERef {

  EERef(const INDEXDATATYPE index)
    : index(index)                 {}
    3390:	eb 82       	std	Y+3, r14	; 0x03
    3392:	fc 82       	std	Y+4, r15	; 0x04
_ZN11EEPROMClass5writeEjh.isra.5():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:234
  }
  uint8_t read(const INDEXDATATYPE idx)              {
    return EERef(idx);
  }
  void write(INDEXDATATYPE idx, uint8_t val)   {
    (EERef(idx)) = val;
    3394:	6f ef       	ldi	r22, 0xFF	; 255
    3396:	ce 01       	movw	r24, r28
    3398:	03 96       	adiw	r24, 0x03	; 3
    339a:	0e 94 b6 09 	call	0x136c	; 0x136c <EERef::operator=(unsigned char)>
    339e:	ff ef       	ldi	r31, 0xFF	; 255
    33a0:	ef 1a       	sub	r14, r31
    33a2:	ff 0a       	sbc	r15, r31
clearMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:379
  }

}

void clearMode() {
  for (byte i = 0x0F; i < 0x20; i++) {
    33a4:	20 e2       	ldi	r18, 0x20	; 32
    33a6:	e2 16       	cp	r14, r18
    33a8:	f1 04       	cpc	r15, r1
    33aa:	91 f7       	brne	.-28     	; 0x3390 <main+0x5aa>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:382
    EEPROM.write(i, 255);
  }
  currentMode = 0;
    33ac:	10 92 07 40 	sts	0x4007, r1	; 0x804007 <currentMode>
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:384
  for (byte i = 0; i < 8; i++) {
    currentValueLeft[i] = 0;
    33b4:	fc 01       	movw	r30, r24
    33b6:	e9 56       	subi	r30, 0x69	; 105
    33b8:	f0 4b       	sbci	r31, 0xB0	; 176
    33ba:	10 82       	st	Z, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:385
    currentValueRight[i] = 0;
    33bc:	fc 01       	movw	r30, r24
    33be:	e1 56       	subi	r30, 0x61	; 97
    33c0:	f0 4b       	sbci	r31, 0xB0	; 176
    33c2:	10 82       	st	Z, r1
    33c4:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:383
void clearMode() {
  for (byte i = 0x0F; i < 0x20; i++) {
    EEPROM.write(i, 255);
  }
  currentMode = 0;
  for (byte i = 0; i < 8; i++) {
    33c6:	88 30       	cpi	r24, 0x08	; 8
    33c8:	91 05       	cpc	r25, r1
    33ca:	a1 f7       	brne	.-24     	; 0x33b4 <main+0x5ce>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:387
    currentValueLeft[i] = 0;
    currentValueRight[i] = 0;
  }
  currentSettingLeft = 0;
    33cc:	10 92 75 41 	sts	0x4175, r1	; 0x804175 <currentSettingLeft>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:388
  currentSettingRight = 0;
    33d0:	10 92 74 41 	sts	0x4174, r1	; 0x804174 <currentSettingRight>
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:425
        if (((btnRead & MODE_BTN_bm)) && !(lastBtnState & MODE_BTN_bm)) {
          if (lastPressAt && millis() - lastPressAt > 10000) {

            lcd.clear();
            clearMode();
            lcd.setCursor(3, 0);
    33d4:	40 e0       	ldi	r20, 0x00	; 0
    33d6:	63 e0       	ldi	r22, 0x03	; 3
    33d8:	86 e6       	ldi	r24, 0x66	; 102
    33da:	9e e5       	ldi	r25, 0x5E	; 94
    33dc:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:426
            lcd.print(F("Saved mode"));
    33e0:	67 ed       	ldi	r22, 0xD7	; 215
    33e2:	76 e0       	ldi	r23, 0x06	; 6
    33e4:	86 e6       	ldi	r24, 0x66	; 102
    33e6:	9e e5       	ldi	r25, 0x5E	; 94
    33e8:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:427
            lcd.setCursor(5, 1);
    33ec:	41 e0       	ldi	r20, 0x01	; 1
    33ee:	65 e0       	ldi	r22, 0x05	; 5
    33f0:	86 e6       	ldi	r24, 0x66	; 102
    33f2:	9e e5       	ldi	r25, 0x5E	; 94
    33f4:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:428
            lcd.print(F("cleared"));
    33f8:	6f ec       	ldi	r22, 0xCF	; 207
    33fa:	76 e0       	ldi	r23, 0x06	; 6
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:435
            UIChanged = 7;
          } else if (lastPressAt && millis() - lastPressAt > 3000) {
            saveMode();
            lcd.clear();
            lcd.setCursor(3, 0);
            lcd.print(F("Mode Saved"));
    33fc:	86 e6       	ldi	r24, 0x66	; 102
    33fe:	9e e5       	ldi	r25, 0x5E	; 94
    3400:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:436
            delay(1000);
    3404:	68 ee       	ldi	r22, 0xE8	; 232
    3406:	73 e0       	ldi	r23, 0x03	; 3
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <delay>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:437
            UIChanged = 7;
    3410:	87 e0       	ldi	r24, 0x07	; 7
    3412:	0a c0       	rjmp	.+20     	; 0x3428 <main+0x642>
advanceMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:314
  */
}


void advanceMode() {
  if (currentMode >= maxMode) {
    3414:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    3418:	8a 30       	cpi	r24, 0x0A	; 10
    341a:	08 f4       	brcc	.+2      	; 0x341e <main+0x638>
    341c:	42 c0       	rjmp	.+132    	; 0x34a2 <main+0x6bc>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:318
    setMode(0);
  } else {
    if (currentMode == 1) currentMode++;
    setMode(currentMode + 1);
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	5b d9       	rcall	.-3402   	; 0x26d8 <setMode(unsigned char)>
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:440
            lcd.print(F("Mode Saved"));
            delay(1000);
            UIChanged = 7;
          } else {
            advanceMode();
            UIChanged |= 4;
    3422:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <UIChanged>
    3426:	84 60       	ori	r24, 0x04	; 4
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:437
            saveMode();
            lcd.clear();
            lcd.setCursor(3, 0);
            lcd.print(F("Mode Saved"));
            delay(1000);
            UIChanged = 7;
    3428:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <UIChanged>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:442
          } else {
            advanceMode();
            UIChanged |= 4;
          }
          lastPressAt = 0;
    342c:	10 92 6c 41 	sts	0x416C, r1	; 0x80416c <handleUI()::lastPressAt>
    3430:	10 92 6d 41 	sts	0x416D, r1	; 0x80416d <handleUI()::lastPressAt+0x1>
    3434:	10 92 6e 41 	sts	0x416E, r1	; 0x80416e <handleUI()::lastPressAt+0x2>
    3438:	10 92 6f 41 	sts	0x416F, r1	; 0x80416f <handleUI()::lastPressAt+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:444
        }
        if (((btnRead & ENC1_BTN_bm)) && !(lastBtnState & ENC1_BTN_bm)) {
    343c:	01 ff       	sbrs	r16, 1
    343e:	17 c0       	rjmp	.+46     	; 0x346e <main+0x688>
    3440:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <handleUI()::lastBtnState>
    3444:	81 fd       	sbrc	r24, 1
    3446:	13 c0       	rjmp	.+38     	; 0x346e <main+0x688>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:445
          if (currentSettingLeft >= pgm_read_byte_near(&maxSetting[currentMode][0])) {
    3448:	e0 91 07 40 	lds	r30, 0x4007	; 0x804007 <currentMode>
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	ee 0f       	add	r30, r30
    3450:	ff 1f       	adc	r31, r31
    3452:	e1 58       	subi	r30, 0x81	; 129
    3454:	f8 4f       	sbci	r31, 0xF8	; 248
    3456:	e4 91       	lpm	r30, Z
    3458:	80 91 75 41 	lds	r24, 0x4175	; 0x804175 <currentSettingLeft>
    345c:	8e 17       	cp	r24, r30
    345e:	50 f1       	brcs	.+84     	; 0x34b4 <main+0x6ce>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:446
            currentSettingLeft = 0;
    3460:	10 92 75 41 	sts	0x4175, r1	; 0x804175 <currentSettingLeft>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:450
          } else {
            currentSettingLeft++;
          }
          UIChanged |= 2;
    3464:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <UIChanged>
    3468:	82 60       	ori	r24, 0x02	; 2
    346a:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <UIChanged>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:452
        }
        if (((btnRead & ENC2_BTN_bm)) && !(lastBtnState & ENC2_BTN_bm)) {
    346e:	00 ff       	sbrs	r16, 0
    3470:	69 cf       	rjmp	.-302    	; 0x3344 <main+0x55e>
    3472:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <handleUI()::lastBtnState>
    3476:	80 fd       	sbrc	r24, 0
    3478:	65 cf       	rjmp	.-310    	; 0x3344 <main+0x55e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:453
          if (currentSettingRight >= pgm_read_byte_near(&maxSetting[currentMode][1])) {
    347a:	e0 91 07 40 	lds	r30, 0x4007	; 0x804007 <currentMode>
    347e:	f0 e0       	ldi	r31, 0x00	; 0
    3480:	ee 0f       	add	r30, r30
    3482:	ff 1f       	adc	r31, r31
    3484:	e0 58       	subi	r30, 0x80	; 128
    3486:	f8 4f       	sbci	r31, 0xF8	; 248
    3488:	e4 91       	lpm	r30, Z
    348a:	80 91 74 41 	lds	r24, 0x4174	; 0x804174 <currentSettingRight>
    348e:	8e 17       	cp	r24, r30
    3490:	b8 f0       	brcs	.+46     	; 0x34c0 <main+0x6da>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:454
            currentSettingRight = 0;
    3492:	10 92 74 41 	sts	0x4174, r1	; 0x804174 <currentSettingRight>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:458
          } else {
            currentSettingRight++;
          }
          UIChanged |= 2;
    3496:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <UIChanged>
    349a:	82 60       	ori	r24, 0x02	; 2
    349c:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <UIChanged>
    34a0:	51 cf       	rjmp	.-350    	; 0x3344 <main+0x55e>
advanceMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:317

void advanceMode() {
  if (currentMode >= maxMode) {
    setMode(0);
  } else {
    if (currentMode == 1) currentMode++;
    34a2:	81 30       	cpi	r24, 0x01	; 1
    34a4:	19 f4       	brne	.+6      	; 0x34ac <main+0x6c6>
    34a6:	82 e0       	ldi	r24, 0x02	; 2
    34a8:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <currentMode>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:318
    setMode(currentMode + 1);
    34ac:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    34b0:	8f 5f       	subi	r24, 0xFF	; 255
    34b2:	b6 cf       	rjmp	.-148    	; 0x3420 <main+0x63a>
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:448
        }
        if (((btnRead & ENC1_BTN_bm)) && !(lastBtnState & ENC1_BTN_bm)) {
          if (currentSettingLeft >= pgm_read_byte_near(&maxSetting[currentMode][0])) {
            currentSettingLeft = 0;
          } else {
            currentSettingLeft++;
    34b4:	80 91 75 41 	lds	r24, 0x4175	; 0x804175 <currentSettingLeft>
    34b8:	8f 5f       	subi	r24, 0xFF	; 255
    34ba:	80 93 75 41 	sts	0x4175, r24	; 0x804175 <currentSettingLeft>
    34be:	d2 cf       	rjmp	.-92     	; 0x3464 <main+0x67e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:456
        }
        if (((btnRead & ENC2_BTN_bm)) && !(lastBtnState & ENC2_BTN_bm)) {
          if (currentSettingRight >= pgm_read_byte_near(&maxSetting[currentMode][1])) {
            currentSettingRight = 0;
          } else {
            currentSettingRight++;
    34c0:	80 91 74 41 	lds	r24, 0x4174	; 0x804174 <currentSettingRight>
    34c4:	8f 5f       	subi	r24, 0xFF	; 255
    34c6:	80 93 74 41 	sts	0x4174, r24	; 0x804174 <currentSettingRight>
    34ca:	e5 cf       	rjmp	.-54     	; 0x3496 <main+0x6b0>
handleLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:488
  uichg = UIChanged;
  UIChanged = 0;
  sei();
  if (uichg == 0) {
    if (millis() - lastInputAt > 60000) {
      if (!attractmode || (millis() - lastInputAt > 120000)) {
    34cc:	0e 94 be 07 	call	0xf7c	; 0xf7c <millis>
    34d0:	6c 19       	sub	r22, r12
    34d2:	7d 09       	sbc	r23, r13
    34d4:	8e 09       	sbc	r24, r14
    34d6:	9f 09       	sbc	r25, r15
    34d8:	61 3c       	cpi	r22, 0xC1	; 193
    34da:	74 4d       	sbci	r23, 0xD4	; 212
    34dc:	81 40       	sbci	r24, 0x01	; 1
    34de:	91 05       	cpc	r25, r1
    34e0:	08 f0       	brcs	.+2      	; 0x34e4 <main+0x6fe>
    34e2:	c8 ce       	rjmp	.-624    	; 0x3274 <main+0x48e>
loop():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:258
    }
  */
  //digitalWriteFast(INDICATE2, CHANGE);
  handleUI();
  handleLCD();
  if (!updated) {
    34e4:	10 91 ab 4f 	lds	r17, 0x4FAB	; 0x804fab <loop::updated>
    34e8:	00 91 07 40 	lds	r16, 0x4007	; 0x804007 <currentMode>
    34ec:	11 11       	cpse	r17, r1
    34ee:	86 c5       	rjmp	.+2828   	; 0x3ffc <main+0x1216>
digitalWriteFast():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:448
  if (val == LOW)
    vport->OUT &= ~mask;
  else if (val == CHANGE)
    vport->IN |= mask;
  else // HIGH
    vport->OUT |= mask;
    34f0:	a9 9a       	sbi	0x15, 1	; 21
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:590
    }
  }
}

void updatePattern() {
  if (currentMode == 0) {
    34f2:	01 11       	cpse	r16, r1
    34f4:	b8 c1       	rjmp	.+880    	; 0x3866 <main+0xa80>
    34f6:	03 e4       	ldi	r16, 0x43	; 67
    34f8:	10 e5       	ldi	r17, 0x50	; 80
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:591
    for (unsigned int i = 0; i < LENGTH * 3; i++) {
    34fa:	d1 2c       	mov	r13, r1
    34fc:	c1 2c       	mov	r12, r1
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:592
      pixels[i] = getLeftVal(currentValueLeft[i % 3]);
    34fe:	53 e0       	ldi	r21, 0x03	; 3
    3500:	e5 2e       	mov	r14, r21
    3502:	f1 2c       	mov	r15, r1
    3504:	c6 01       	movw	r24, r12
    3506:	b7 01       	movw	r22, r14
    3508:	0e 94 19 24 	call	0x4832	; 0x4832 <__udivmodhi4>
    350c:	fc 01       	movw	r30, r24
    350e:	e9 56       	subi	r30, 0x69	; 105
    3510:	f0 4b       	sbci	r31, 0xB0	; 176
    3512:	80 81       	ld	r24, Z
    3514:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    3518:	f8 01       	movw	r30, r16
    351a:	81 93       	st	Z+, r24
    351c:	8f 01       	movw	r16, r30
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:591
  }
}

void updatePattern() {
  if (currentMode == 0) {
    for (unsigned int i = 0; i < LENGTH * 3; i++) {
    351e:	ff ef       	ldi	r31, 0xFF	; 255
    3520:	cf 1a       	sub	r12, r31
    3522:	df 0a       	sbc	r13, r31
    3524:	20 e1       	ldi	r18, 0x10	; 16
    3526:	c2 16       	cp	r12, r18
    3528:	2e e0       	ldi	r18, 0x0E	; 14
    352a:	d2 06       	cpc	r13, r18
    352c:	59 f7       	brne	.-42     	; 0x3504 <main+0x71e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:618
  } else if (currentMode == 10) {
    updatePatternDrift2();
  } else {
    setMode(0);
  }
  frameNumber++;
    352e:	80 91 93 4f 	lds	r24, 0x4F93	; 0x804f93 <frameNumber>
    3532:	90 91 94 4f 	lds	r25, 0x4F94	; 0x804f94 <frameNumber+0x1>
    3536:	a0 91 95 4f 	lds	r26, 0x4F95	; 0x804f95 <frameNumber+0x2>
    353a:	b0 91 96 4f 	lds	r27, 0x4F96	; 0x804f96 <frameNumber+0x3>
    353e:	01 96       	adiw	r24, 0x01	; 1
    3540:	a1 1d       	adc	r26, r1
    3542:	b1 1d       	adc	r27, r1
    3544:	80 93 93 4f 	sts	0x4F93, r24	; 0x804f93 <frameNumber>
    3548:	90 93 94 4f 	sts	0x4F94, r25	; 0x804f94 <frameNumber+0x1>
    354c:	a0 93 95 4f 	sts	0x4F95, r26	; 0x804f95 <frameNumber+0x2>
    3550:	b0 93 96 4f 	sts	0x4F96, r27	; 0x804f96 <frameNumber+0x3>
digitalWriteFast():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:444
    vport->OUT &= ~mask;
  else // CHANGE
    vport->IN = mask;
*/
  if (val == LOW)
    vport->OUT &= ~mask;
    3554:	a9 98       	cbi	0x15, 1	; 21
loop():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:262
  handleLCD();
  if (!updated) {
    digitalWriteFast(INDICATE1, HIGH);
    updatePattern();
    digitalWriteFast(INDICATE1, LOW);
    updated = 1;
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	80 93 ab 4f 	sts	0x4FAB, r24	; 0x804fab <loop::updated>
    355c:	30 ce       	rjmp	.-928    	; 0x31be <main+0x3d8>
doAttractLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:569
    lcd.setCursor(0, 0);
    lcd.print(F("LEDCTRLA - V2.1"));
    lcd.setCursor(0, 1);
    lcd.print(F("12/19/21 vers."));
  } else if (s == 1) {
    lcd.setCursor(0, 0);
    355e:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:568
  if (!s) {
    lcd.setCursor(0, 0);
    lcd.print(F("LEDCTRLA - V2.1"));
    lcd.setCursor(0, 1);
    lcd.print(F("12/19/21 vers."));
  } else if (s == 1) {
    3560:	61 30       	cpi	r22, 0x01	; 1
    3562:	e9 f4       	brne	.+58     	; 0x359e <main+0x7b8>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:569
    lcd.setCursor(0, 0);
    3564:	60 e0       	ldi	r22, 0x00	; 0
    3566:	86 e6       	ldi	r24, 0x66	; 102
    3568:	9e e5       	ldi	r25, 0x5E	; 94
    356a:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:570
    lcd.print(F("Zuzu and I miss"));
    356e:	6d e2       	ldi	r22, 0x2D	; 45
    3570:	77 e0       	ldi	r23, 0x07	; 7
    3572:	86 e6       	ldi	r24, 0x66	; 102
    3574:	9e e5       	ldi	r25, 0x5E	; 94
    3576:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:571
    lcd.setCursor(0, 1);
    357a:	41 e0       	ldi	r20, 0x01	; 1
    357c:	60 e0       	ldi	r22, 0x00	; 0
    357e:	86 e6       	ldi	r24, 0x66	; 102
    3580:	9e e5       	ldi	r25, 0x5E	; 94
    3582:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:572
    lcd.print(F("you Alice! "));
    3586:	61 e2       	ldi	r22, 0x21	; 33
    3588:	77 e0       	ldi	r23, 0x07	; 7
    358a:	86 e6       	ldi	r24, 0x66	; 102
    358c:	9e e5       	ldi	r25, 0x5E	; 94
    358e:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
write():
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.h:199
	size_t write(uint8_t value);	// does char & line processing
	size_t _write(uint8_t value);	// does not do char & line processing
// write() overloads for 0 or null which is an int
// This is only because Print class doesn't do it.
	inline size_t write(unsigned int value) { return(write((uint8_t)value)); }
	inline size_t write(int value) { return(write((uint8_t)value)); }
    3592:	6f e7       	ldi	r22, 0x7F	; 127
    3594:	86 e6       	ldi	r24, 0x66	; 102
    3596:	9e e5       	ldi	r25, 0x5E	; 94
    3598:	0e 94 2b 08 	call	0x1056	; 0x1056 <hd44780::write(unsigned char)>
    359c:	a3 cf       	rjmp	.-186    	; 0x34e4 <main+0x6fe>
doAttractLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:575
    lcd.write(0x7F);
  } else {
    lcd.setCursor(2, 0);
    359e:	62 e0       	ldi	r22, 0x02	; 2
    35a0:	86 e6       	ldi	r24, 0x66	; 102
    35a2:	9e e5       	ldi	r25, 0x5E	; 94
    35a4:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:576
    lcd.print(F("PLAY WITH ME"));
    35a8:	64 e1       	ldi	r22, 0x14	; 20
    35aa:	77 e0       	ldi	r23, 0x07	; 7
    35ac:	86 e6       	ldi	r24, 0x66	; 102
    35ae:	9e e5       	ldi	r25, 0x5E	; 94
    35b0:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:577
    lcd.setCursor(0, 1);
    35b4:	41 e0       	ldi	r20, 0x01	; 1
    35b6:	60 e0       	ldi	r22, 0x00	; 0
    35b8:	86 e6       	ldi	r24, 0x66	; 102
    35ba:	9e e5       	ldi	r25, 0x5E	; 94
    35bc:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
random():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/WMath.cpp:40
    35c0:	5d d6       	rcall	.+3258   	; 0x427c <random>
    35c2:	22 e0       	ldi	r18, 0x02	; 2
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 e0       	ldi	r20, 0x00	; 0
    35c8:	50 e0       	ldi	r21, 0x00	; 0
    35ca:	ad d6       	rcall	.+3418   	; 0x4326 <__divmodsi4>
doAttractLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:579
    byte r = random(0, 2);
    if (r == 0) {
    35cc:	61 11       	cpse	r22, r1
    35ce:	03 c0       	rjmp	.+6      	; 0x35d6 <main+0x7f0>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:580
      lcd.print(F("USE KNOBS&BUTTON"));
    35d0:	63 e0       	ldi	r22, 0x03	; 3
    35d2:	77 e0       	ldi	r23, 0x07	; 7
    35d4:	7f ce       	rjmp	.-770    	; 0x32d4 <main+0x4ee>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:581
    } else if (r == 1) {
    35d6:	61 30       	cpi	r22, 0x01	; 1
    35d8:	19 f4       	brne	.+6      	; 0x35e0 <main+0x7fa>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:582
      lcd.print(F("TURN MY KNOBS ;)"));
    35da:	62 ef       	ldi	r22, 0xF2	; 242
    35dc:	76 e0       	ldi	r23, 0x06	; 6
    35de:	7a ce       	rjmp	.-780    	; 0x32d4 <main+0x4ee>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:584
    } else {
      lcd.print(F("ADJUST LIGHTING"));
    35e0:	62 ee       	ldi	r22, 0xE2	; 226
    35e2:	76 e0       	ldi	r23, 0x06	; 6
    35e4:	77 ce       	rjmp	.-786    	; 0x32d4 <main+0x4ee>
handleLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:496
        doAttractLCD();
      }
    }
    return;
  }
  if (attractmode) {
    35e6:	80 91 76 41 	lds	r24, 0x4176	; 0x804176 <handleLCD()::attractmode>
    35ea:	81 11       	cpse	r24, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:497
    lcd.clear();
    35ec:	0e 94 01 08 	call	0x1002	; 0x1002 <hd44780::clear() [clone .constprop.25]>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:499
  }
  if (uichg & 1 && currentMode == 10) {
    35f0:	10 ff       	sbrs	r17, 0
    35f2:	0c c0       	rjmp	.+24     	; 0x360c <main+0x826>
    35f4:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    35f8:	8a 30       	cpi	r24, 0x0A	; 10
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:500
    if (getPalleteNumber() != drift2_colors) {
    35fa:	41 f4       	brne	.+16     	; 0x360c <main+0x826>
    35fc:	0e 94 7d 08 	call	0x10fa	; 0x10fa <getPalleteNumber()>
    3600:	90 91 05 40 	lds	r25, 0x4005	; 0x804005 <handleLCD()::drift2_colors>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:501
      initColorsDrift2();
    3604:	89 13       	cpse	r24, r25
    3606:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <initColorsDrift2()>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:503
    }
    initLookupDrift2();
    360a:	00 d8       	rcall	.-4096   	; 0x260c <initLookupDrift2()>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:505
  }
  if (currentMode == 10) {
    360c:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    3610:	8a 30       	cpi	r24, 0x0A	; 10
    3612:	51 f4       	brne	.+20     	; 0x3628 <main+0x842>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:506
    if (getPalleteNumber() != drift2_colors) {
    3614:	0e 94 7d 08 	call	0x10fa	; 0x10fa <getPalleteNumber()>
    3618:	90 91 05 40 	lds	r25, 0x4005	; 0x804005 <handleLCD()::drift2_colors>
    361c:	89 17       	cp	r24, r25
    361e:	21 f0       	breq	.+8      	; 0x3628 <main+0x842>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:507
      drift2_colors = getPalleteNumber();
    3620:	0e 94 7d 08 	call	0x10fa	; 0x10fa <getPalleteNumber()>
    3624:	80 93 05 40 	sts	0x4005, r24	; 0x804005 <handleLCD()::drift2_colors>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:510
    }
  }
  lastInputAt = millis();
    3628:	0e 94 be 07 	call	0xf7c	; 0xf7c <millis>
    362c:	60 93 77 41 	sts	0x4177, r22	; 0x804177 <handleLCD()::lastInputAt>
    3630:	70 93 78 41 	sts	0x4178, r23	; 0x804178 <handleLCD()::lastInputAt+0x1>
    3634:	80 93 79 41 	sts	0x4179, r24	; 0x804179 <handleLCD()::lastInputAt+0x2>
    3638:	90 93 7a 41 	sts	0x417A, r25	; 0x80417a <handleLCD()::lastInputAt+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:511
  if ((uichg & 6) || attractmode ) { //if setting or mode has changed, redraw settings
    363c:	81 2f       	mov	r24, r17
    363e:	86 70       	andi	r24, 0x06	; 6
    3640:	29 f4       	brne	.+10     	; 0x364c <main+0x866>
    3642:	80 91 76 41 	lds	r24, 0x4176	; 0x804176 <handleLCD()::attractmode>
    3646:	88 23       	and	r24, r24
    3648:	09 f4       	brne	.+2      	; 0x364c <main+0x866>
    364a:	38 c0       	rjmp	.+112    	; 0x36bc <main+0x8d6>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:512
    lcd.setCursor(0, 0);
    364c:	40 e0       	ldi	r20, 0x00	; 0
    364e:	60 e0       	ldi	r22, 0x00	; 0
    3650:	86 e6       	ldi	r24, 0x66	; 102
    3652:	9e e5       	ldi	r25, 0x5E	; 94
    3654:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:513
    if (currentMode < 7 ) {
    3658:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    365c:	87 30       	cpi	r24, 0x07	; 7
    365e:	08 f0       	brcs	.+2      	; 0x3662 <main+0x87c>
    3660:	58 c0       	rjmp	.+176    	; 0x3712 <main+0x92c>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:514
      lcd.print(FLASH(modesL[currentMode][currentSettingLeft]));
    3662:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    3666:	38 e0       	ldi	r19, 0x08	; 8
    3668:	83 9f       	mul	r24, r19
    366a:	c0 01       	movw	r24, r0
    366c:	11 24       	eor	r1, r1
    366e:	e8 0f       	add	r30, r24
    3670:	f9 2f       	mov	r31, r25
    3672:	f1 1d       	adc	r31, r1
    3674:	ee 0f       	add	r30, r30
    3676:	ff 1f       	adc	r31, r31
    3678:	e0 5a       	subi	r30, 0xA0	; 160
    367a:	f7 4f       	sbci	r31, 0xF7	; 247
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:516
    } else {
      lcd.print(FLASH(palleteNames[currentValueLeft[0]]));
    367c:	65 91       	lpm	r22, Z+
    367e:	74 91       	lpm	r23, Z
    3680:	86 e6       	ldi	r24, 0x66	; 102
    3682:	9e e5       	ldi	r25, 0x5E	; 94
    3684:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:518
    }
    lcd.print(' ');
    3688:	60 e2       	ldi	r22, 0x20	; 32
    368a:	86 e6       	ldi	r24, 0x66	; 102
    368c:	9e e5       	ldi	r25, 0x5E	; 94
    368e:	0e 94 0a 05 	call	0xa14	; 0xa14 <Print::print(char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:519
    lcd.print(FLASH(modesR[currentMode][currentSettingRight]));
    3692:	e0 91 74 41 	lds	r30, 0x4174	; 0x804174 <currentSettingRight>
    3696:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    369a:	48 e0       	ldi	r20, 0x08	; 8
    369c:	84 9f       	mul	r24, r20
    369e:	c0 01       	movw	r24, r0
    36a0:	11 24       	eor	r1, r1
    36a2:	e8 0f       	add	r30, r24
    36a4:	f9 2f       	mov	r31, r25
    36a6:	f1 1d       	adc	r31, r1
    36a8:	ee 0f       	add	r30, r30
    36aa:	ff 1f       	adc	r31, r31
    36ac:	e6 56       	subi	r30, 0x66	; 102
    36ae:	f8 4f       	sbci	r31, 0xF8	; 248
    36b0:	65 91       	lpm	r22, Z+
    36b2:	74 91       	lpm	r23, Z
    36b4:	86 e6       	ldi	r24, 0x66	; 102
    36b6:	9e e5       	ldi	r25, 0x5E	; 94
    36b8:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:521
  }
  if ((uichg & 7) || attractmode) { //if mode, setting, or value has changed, redraw second line
    36bc:	17 70       	andi	r17, 0x07	; 7
    36be:	29 f4       	brne	.+10     	; 0x36ca <main+0x8e4>
    36c0:	80 91 76 41 	lds	r24, 0x4176	; 0x804176 <handleLCD()::attractmode>
    36c4:	88 23       	and	r24, r24
    36c6:	09 f4       	brne	.+2      	; 0x36ca <main+0x8e4>
    36c8:	92 c0       	rjmp	.+292    	; 0x37ee <main+0xa08>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:523
    byte tval;
    if (currentMode > 6) {
    36ca:	e0 91 07 40 	lds	r30, 0x4007	; 0x804007 <currentMode>
    36ce:	e7 30       	cpi	r30, 0x07	; 7
    36d0:	40 f1       	brcs	.+80     	; 0x3722 <main+0x93c>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:524
      lcd.setCursor(0, 0);
    36d2:	40 e0       	ldi	r20, 0x00	; 0
    36d4:	60 e0       	ldi	r22, 0x00	; 0
    36d6:	86 e6       	ldi	r24, 0x66	; 102
    36d8:	9e e5       	ldi	r25, 0x5E	; 94
    36da:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:525
      lcd.print(FLASH(palleteNames[currentValueLeft[0]]));
    36de:	e0 91 97 4f 	lds	r30, 0x4F97	; 0x804f97 <currentValueLeft>
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	ee 0f       	add	r30, r30
    36e6:	ff 1f       	adc	r31, r31
    36e8:	e6 5b       	subi	r30, 0xB6	; 182
    36ea:	f7 4f       	sbci	r31, 0xF7	; 247
    36ec:	65 91       	lpm	r22, Z+
    36ee:	74 91       	lpm	r23, Z
    36f0:	86 e6       	ldi	r24, 0x66	; 102
    36f2:	9e e5       	ldi	r25, 0x5E	; 94
    36f4:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:526
      lcd.setCursor(0, 1);
    36f8:	41 e0       	ldi	r20, 0x01	; 1
    36fa:	60 e0       	ldi	r22, 0x00	; 0
    36fc:	86 e6       	ldi	r24, 0x66	; 102
    36fe:	9e e5       	ldi	r25, 0x5E	; 94
    3700:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:527
      lcd.print(F("    "));
    3704:	65 e9       	ldi	r22, 0x95	; 149
    3706:	77 e0       	ldi	r23, 0x07	; 7
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:536
      lcd.print(tval);
      lcd.print(' ');
      if (tval < 10) lcd.print(' ');
    } else {
      lcd.setCursor(0, 1);
      lcd.print(F("    "));
    3708:	86 e6       	ldi	r24, 0x66	; 102
    370a:	9e e5       	ldi	r25, 0x5E	; 94
    370c:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
    3710:	35 c0       	rjmp	.+106    	; 0x377c <main+0x996>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:516
  if ((uichg & 6) || attractmode ) { //if setting or mode has changed, redraw settings
    lcd.setCursor(0, 0);
    if (currentMode < 7 ) {
      lcd.print(FLASH(modesL[currentMode][currentSettingLeft]));
    } else {
      lcd.print(FLASH(palleteNames[currentValueLeft[0]]));
    3712:	e0 91 97 4f 	lds	r30, 0x4F97	; 0x804f97 <currentValueLeft>
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	ee 0f       	add	r30, r30
    371a:	ff 1f       	adc	r31, r31
    371c:	e6 5b       	subi	r30, 0xB6	; 182
    371e:	f7 4f       	sbci	r31, 0xF7	; 247
    3720:	ad cf       	rjmp	.-166    	; 0x367c <main+0x896>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:528
    if (currentMode > 6) {
      lcd.setCursor(0, 0);
      lcd.print(FLASH(palleteNames[currentValueLeft[0]]));
      lcd.setCursor(0, 1);
      lcd.print(F("    "));
    } else if (pgm_read_byte_near(&maxSetting[currentMode][0]) != 255) {
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	ee 0f       	add	r30, r30
    3726:	ff 1f       	adc	r31, r31
    3728:	e1 58       	subi	r30, 0x81	; 129
    372a:	f8 4f       	sbci	r31, 0xF8	; 248
    372c:	e4 91       	lpm	r30, Z
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:529
      lcd.setCursor(0, 1);
    372e:	41 e0       	ldi	r20, 0x01	; 1
    3730:	60 e0       	ldi	r22, 0x00	; 0
    3732:	86 e6       	ldi	r24, 0x66	; 102
    3734:	9e e5       	ldi	r25, 0x5E	; 94
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:528
    if (currentMode > 6) {
      lcd.setCursor(0, 0);
      lcd.print(FLASH(palleteNames[currentValueLeft[0]]));
      lcd.setCursor(0, 1);
      lcd.print(F("    "));
    } else if (pgm_read_byte_near(&maxSetting[currentMode][0]) != 255) {
    3736:	ef 3f       	cpi	r30, 0xFF	; 255
    3738:	09 f4       	brne	.+2      	; 0x373c <main+0x956>
    373a:	5c c0       	rjmp	.+184    	; 0x37f4 <main+0xa0e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:529
      lcd.setCursor(0, 1);
    373c:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:530
      tval = getLeftVal(currentValueLeft[currentSettingLeft]);
    3740:	e0 91 75 41 	lds	r30, 0x4175	; 0x804175 <currentSettingLeft>
    3744:	f0 e0       	ldi	r31, 0x00	; 0
    3746:	e9 56       	subi	r30, 0x69	; 105
    3748:	f0 4b       	sbci	r31, 0xB0	; 176
    374a:	80 81       	ld	r24, Z
    374c:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    3750:	18 2f       	mov	r17, r24
print():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:73
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    3752:	48 2f       	mov	r20, r24
    3754:	50 e0       	ldi	r21, 0x00	; 0
    3756:	70 e0       	ldi	r23, 0x00	; 0
    3758:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    375a:	2a e0       	ldi	r18, 0x0A	; 10
    375c:	86 e6       	ldi	r24, 0x66	; 102
    375e:	9e e5       	ldi	r25, 0x5E	; 94
    3760:	0e 94 2e 10 	call	0x205c	; 0x205c <Print::printNumber(unsigned long, unsigned char)>
handleLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:532
      lcd.print(tval);
      lcd.print(' ');
    3764:	60 e2       	ldi	r22, 0x20	; 32
    3766:	86 e6       	ldi	r24, 0x66	; 102
    3768:	9e e5       	ldi	r25, 0x5E	; 94
    376a:	0e 94 0a 05 	call	0xa14	; 0xa14 <Print::print(char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:533
      if (tval < 10) lcd.print(' ');
    376e:	1a 30       	cpi	r17, 0x0A	; 10
    3770:	28 f4       	brcc	.+10     	; 0x377c <main+0x996>
    3772:	60 e2       	ldi	r22, 0x20	; 32
    3774:	86 e6       	ldi	r24, 0x66	; 102
    3776:	9e e5       	ldi	r25, 0x5E	; 94
    3778:	0e 94 0a 05 	call	0xa14	; 0xa14 <Print::print(char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:538
    } else {
      lcd.setCursor(0, 1);
      lcd.print(F("    "));
    }
    lcd.setCursor(4, 1);
    377c:	41 e0       	ldi	r20, 0x01	; 1
    377e:	64 e0       	ldi	r22, 0x04	; 4
    3780:	86 e6       	ldi	r24, 0x66	; 102
    3782:	9e e5       	ldi	r25, 0x5E	; 94
    3784:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:539
    lcd.print(FLASH(modeNames[currentMode]));
    3788:	e0 91 07 40 	lds	r30, 0x4007	; 0x804007 <currentMode>
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	ee 0f       	add	r30, r30
    3790:	ff 1f       	adc	r31, r31
    3792:	ec 59       	subi	r30, 0x9C	; 156
    3794:	f8 4f       	sbci	r31, 0xF8	; 248
    3796:	65 91       	lpm	r22, Z+
    3798:	74 91       	lpm	r23, Z
    379a:	86 e6       	ldi	r24, 0x66	; 102
    379c:	9e e5       	ldi	r25, 0x5E	; 94
    379e:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:540
    lcd.setCursor(13, 1);
    37a2:	41 e0       	ldi	r20, 0x01	; 1
    37a4:	6d e0       	ldi	r22, 0x0D	; 13
    37a6:	86 e6       	ldi	r24, 0x66	; 102
    37a8:	9e e5       	ldi	r25, 0x5E	; 94
    37aa:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:541
    if (pgm_read_byte_near(&maxValueRight[currentMode][currentSettingRight]) == 1) { //if max is 1, that means it's forward/reverse
    37ae:	e0 91 74 41 	lds	r30, 0x4174	; 0x804174 <currentSettingRight>
    37b2:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    37b6:	58 e0       	ldi	r21, 0x08	; 8
    37b8:	85 9f       	mul	r24, r21
    37ba:	c0 01       	movw	r24, r0
    37bc:	11 24       	eor	r1, r1
    37be:	e8 0f       	add	r30, r24
    37c0:	f9 2f       	mov	r31, r25
    37c2:	f1 1d       	adc	r31, r1
    37c4:	e5 5a       	subi	r30, 0xA5	; 165
    37c6:	f6 4f       	sbci	r31, 0xF6	; 246
    37c8:	e4 91       	lpm	r30, Z
    37ca:	e1 30       	cpi	r30, 0x01	; 1
    37cc:	c1 f4       	brne	.+48     	; 0x37fe <main+0xa18>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:542
      if (currentValueRight[currentSettingRight]) {
    37ce:	e0 91 74 41 	lds	r30, 0x4174	; 0x804174 <currentSettingRight>
    37d2:	f0 e0       	ldi	r31, 0x00	; 0
    37d4:	e1 56       	subi	r30, 0x61	; 97
    37d6:	f0 4b       	sbci	r31, 0xB0	; 176
    37d8:	80 81       	ld	r24, Z
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:543
        lcd.print(F("REV"));
    37da:	60 e6       	ldi	r22, 0x60	; 96
    37dc:	77 e0       	ldi	r23, 0x07	; 7
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:542
    }
    lcd.setCursor(4, 1);
    lcd.print(FLASH(modeNames[currentMode]));
    lcd.setCursor(13, 1);
    if (pgm_read_byte_near(&maxValueRight[currentMode][currentSettingRight]) == 1) { //if max is 1, that means it's forward/reverse
      if (currentValueRight[currentSettingRight]) {
    37de:	81 11       	cpse	r24, r1
    37e0:	02 c0       	rjmp	.+4      	; 0x37e6 <main+0xa00>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:545
        lcd.print(F("REV"));
      } else {
        lcd.print(F("FWD"));
    37e2:	6c e5       	ldi	r22, 0x5C	; 92
    37e4:	77 e0       	ldi	r23, 0x07	; 7
    37e6:	86 e6       	ldi	r24, 0x66	; 102
    37e8:	9e e5       	ldi	r25, 0x5E	; 94
    37ea:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:558
      } else {
        lcd.print(' ');
      }
    }
  }
  attractmode = 0;
    37ee:	10 92 76 41 	sts	0x4176, r1	; 0x804176 <handleLCD()::attractmode>
    37f2:	78 ce       	rjmp	.-784    	; 0x34e4 <main+0x6fe>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:535
      tval = getLeftVal(currentValueLeft[currentSettingLeft]);
      lcd.print(tval);
      lcd.print(' ');
      if (tval < 10) lcd.print(' ');
    } else {
      lcd.setCursor(0, 1);
    37f4:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:536
      lcd.print(F("    "));
    37f8:	6a e7       	ldi	r22, 0x7A	; 122
    37fa:	77 e0       	ldi	r23, 0x07	; 7
    37fc:	85 cf       	rjmp	.-246    	; 0x3708 <main+0x922>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:548
        lcd.print(F("REV"));
      } else {
        lcd.print(F("FWD"));
      }
    } else {
      tval = currentValueRight[currentSettingRight];
    37fe:	e0 91 74 41 	lds	r30, 0x4174	; 0x804174 <currentSettingRight>
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	e1 56       	subi	r30, 0x61	; 97
    3806:	f0 4b       	sbci	r31, 0xB0	; 176
    3808:	10 81       	ld	r17, Z
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:549
      if (tval < 100) lcd.print(' ');
    380a:	14 36       	cpi	r17, 0x64	; 100
    380c:	60 f4       	brcc	.+24     	; 0x3826 <main+0xa40>
    380e:	60 e2       	ldi	r22, 0x20	; 32
    3810:	86 e6       	ldi	r24, 0x66	; 102
    3812:	9e e5       	ldi	r25, 0x5E	; 94
    3814:	0e 94 0a 05 	call	0xa14	; 0xa14 <Print::print(char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:550
      if (tval < 10) lcd.print(' ');
    3818:	1a 30       	cpi	r17, 0x0A	; 10
    381a:	28 f4       	brcc	.+10     	; 0x3826 <main+0xa40>
    381c:	60 e2       	ldi	r22, 0x20	; 32
    381e:	86 e6       	ldi	r24, 0x66	; 102
    3820:	9e e5       	ldi	r25, 0x5E	; 94
    3822:	0e 94 0a 05 	call	0xa14	; 0xa14 <Print::print(char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:551
      if (pgm_read_byte_near(&maxValueRight[currentMode][currentSettingRight])) { //if max is 0, then this is blank
    3826:	e0 91 74 41 	lds	r30, 0x4174	; 0x804174 <currentSettingRight>
    382a:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <currentMode>
    382e:	68 e0       	ldi	r22, 0x08	; 8
    3830:	86 9f       	mul	r24, r22
    3832:	c0 01       	movw	r24, r0
    3834:	11 24       	eor	r1, r1
    3836:	e8 0f       	add	r30, r24
    3838:	f9 2f       	mov	r31, r25
    383a:	f1 1d       	adc	r31, r1
    383c:	e5 5a       	subi	r30, 0xA5	; 165
    383e:	f6 4f       	sbci	r31, 0xF6	; 246
    3840:	e4 91       	lpm	r30, Z
    3842:	ee 23       	and	r30, r30
    3844:	51 f0       	breq	.+20     	; 0x385a <main+0xa74>
print():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:73
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    3846:	41 2f       	mov	r20, r17
    3848:	50 e0       	ldi	r21, 0x00	; 0
    384a:	70 e0       	ldi	r23, 0x00	; 0
    384c:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    384e:	2a e0       	ldi	r18, 0x0A	; 10
    3850:	86 e6       	ldi	r24, 0x66	; 102
    3852:	9e e5       	ldi	r25, 0x5E	; 94
    3854:	0e 94 2e 10 	call	0x205c	; 0x205c <Print::printNumber(unsigned long, unsigned char)>
    3858:	ca cf       	rjmp	.-108    	; 0x37ee <main+0xa08>
handleLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:554
        lcd.print(tval);
      } else {
        lcd.print(' ');
    385a:	60 e2       	ldi	r22, 0x20	; 32
    385c:	86 e6       	ldi	r24, 0x66	; 102
    385e:	9e e5       	ldi	r25, 0x5E	; 94
    3860:	0e 94 0a 05 	call	0xa14	; 0xa14 <Print::print(char)>
    3864:	c4 cf       	rjmp	.-120    	; 0x37ee <main+0xa08>
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:594
void updatePattern() {
  if (currentMode == 0) {
    for (unsigned int i = 0; i < LENGTH * 3; i++) {
      pixels[i] = getLeftVal(currentValueLeft[i % 3]);
    }
  } else if (currentMode == 1) {
    3866:	01 30       	cpi	r16, 0x01	; 1
    3868:	09 f0       	breq	.+2      	; 0x386c <main+0xa86>
    386a:	75 c0       	rjmp	.+234    	; 0x3956 <main+0xb70>
updatePatternDrift():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:859

/*
   Below this are pattern handlers that have not been updated since getModeColors()
*/
void updatePatternDrift() {
  byte driftchance = 16 + currentValueRight[0] * 10;
    386c:	00 91 9f 4f 	lds	r16, 0x4F9F	; 0x804f9f <currentValueRight>
    3870:	8a e0       	ldi	r24, 0x0A	; 10
    3872:	08 9f       	mul	r16, r24
    3874:	00 2d       	mov	r16, r0
    3876:	11 24       	eor	r1, r1
    3878:	00 5f       	subi	r16, 0xF0	; 240
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:860
  byte randinc = 255 - driftchance;
    387a:	80 2e       	mov	r8, r16
    387c:	80 94       	com	r8
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:866
  byte randdec = driftchance;
  for (unsigned int i = 0; i < (LENGTH * 3); i++) {
    byte tem = i % 3;
    tem *= 2;
    byte rand = random(255);
    if (rand > (pixels[i] > 32 ? randinc : (randinc + driftchance / 2)) && (pixels[i] < getLeftVal(currentValueLeft[tem + 1]))) {
    387e:	91 2c       	mov	r9, r1
    3880:	80 2f       	mov	r24, r16
    3882:	86 95       	lsr	r24
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	a4 01       	movw	r20, r8
    3888:	48 0f       	add	r20, r24
    388a:	59 1f       	adc	r21, r25
    388c:	4e 87       	std	Y+14, r20	; 0x0e
    388e:	5f 87       	std	Y+15, r21	; 0x0f
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:872
      if (pixels[i] > 128 && pixels[i] < 254) {
        pixels[i] += 2;
      } else {
        pixels[i]++;
      }
    } else if (rand < (pixels[i] > 32 ? randdec : (randdec - driftchance / 2)) && (pixels[i] > getLeftVal(currentValueLeft[tem]))) {
    3890:	10 e0       	ldi	r17, 0x00	; 0
    3892:	f8 01       	movw	r30, r16
    3894:	e8 1b       	sub	r30, r24
    3896:	f9 0b       	sbc	r31, r25
    3898:	e8 8b       	std	Y+16, r30	; 0x10
    389a:	f9 8b       	std	Y+17, r31	; 0x11
    389c:	43 e4       	ldi	r20, 0x43	; 67
    389e:	e4 2e       	mov	r14, r20
    38a0:	40 e5       	ldi	r20, 0x50	; 80
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:862
*/
void updatePatternDrift() {
  byte driftchance = 16 + currentValueRight[0] * 10;
  byte randinc = 255 - driftchance;
  byte randdec = driftchance;
  for (unsigned int i = 0; i < (LENGTH * 3); i++) {
    38a2:	f4 2e       	mov	r15, r20
main():
    38a4:	b1 2c       	mov	r11, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:863
    byte tem = i % 3;
    38a6:	a1 2c       	mov	r10, r1
updatePatternDrift():
    38a8:	c5 01       	movw	r24, r10
    38aa:	63 e0       	ldi	r22, 0x03	; 3
    38ac:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:864
    tem *= 2;
    38ae:	c1 d7       	rcall	.+3970   	; 0x4832 <__udivmodhi4>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/WMath.cpp:40
    38b0:	78 2e       	mov	r7, r24
    38b2:	77 0c       	add	r7, r7
random():
    38b4:	e3 d4       	rcall	.+2502   	; 0x427c <random>
    38b6:	a2 01       	movw	r20, r4
    38b8:	91 01       	movw	r18, r2
    38ba:	35 d5       	rcall	.+2666   	; 0x4326 <__divmodsi4>
updatePatternDrift():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:866
    byte rand = random(255);
    if (rand > (pixels[i] > 32 ? randinc : (randinc + driftchance / 2)) && (pixels[i] < getLeftVal(currentValueLeft[tem + 1]))) {
    38bc:	c6 2e       	mov	r12, r22
    38be:	d1 2c       	mov	r13, r1
    38c0:	f7 01       	movw	r30, r14
    38c2:	60 80       	ld	r6, Z
    38c4:	f0 e2       	ldi	r31, 0x20	; 32
    38c6:	f6 15       	cp	r31, r6
    38c8:	a0 f4       	brcc	.+40     	; 0x38f2 <main+0xb0c>
    38ca:	8c 14       	cp	r8, r12
    38cc:	9d 04       	cpc	r9, r13
    38ce:	ec f4       	brge	.+58     	; 0x390a <main+0xb24>
    38d0:	e7 2d       	mov	r30, r7
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	e8 56       	subi	r30, 0x68	; 104
    38d6:	f0 4b       	sbci	r31, 0xB0	; 176
    38d8:	80 81       	ld	r24, Z
    38da:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    38de:	f7 01       	movw	r30, r14
    38e0:	90 81       	ld	r25, Z
    38e2:	68 16       	cp	r6, r24
    38e4:	70 f4       	brcc	.+28     	; 0x3902 <main+0xb1c>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:867
      if (pixels[i] > 128 && pixels[i] < 254) {
    38e6:	8f e7       	ldi	r24, 0x7F	; 127
    38e8:	89 0f       	add	r24, r25
    38ea:	8d 37       	cpi	r24, 0x7D	; 125
    38ec:	10 f1       	brcs	.+68     	; 0x3932 <main+0xb4c>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:870
        pixels[i] += 2;
      } else {
        pixels[i]++;
    38ee:	9f 5f       	subi	r25, 0xFF	; 255
    38f0:	21 c0       	rjmp	.+66     	; 0x3934 <main+0xb4e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:866
  byte randdec = driftchance;
  for (unsigned int i = 0; i < (LENGTH * 3); i++) {
    byte tem = i % 3;
    tem *= 2;
    byte rand = random(255);
    if (rand > (pixels[i] > 32 ? randinc : (randinc + driftchance / 2)) && (pixels[i] < getLeftVal(currentValueLeft[tem + 1]))) {
    38f2:	2e 85       	ldd	r18, Y+14	; 0x0e
    38f4:	3f 85       	ldd	r19, Y+15	; 0x0f
    38f6:	2c 15       	cp	r18, r12
    38f8:	3d 05       	cpc	r19, r13
    38fa:	54 f3       	brlt	.-44     	; 0x38d0 <main+0xaea>
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:872
      if (pixels[i] > 128 && pixels[i] < 254) {
        pixels[i] += 2;
      } else {
        pixels[i]++;
      }
    } else if (rand < (pixels[i] > 32 ? randdec : (randdec - driftchance / 2)) && (pixels[i] > getLeftVal(currentValueLeft[tem]))) {
    38fc:	88 89       	ldd	r24, Y+16	; 0x10
    38fe:	99 89       	ldd	r25, Y+17	; 0x11
    3900:	05 c0       	rjmp	.+10     	; 0x390c <main+0xb26>
updatePatternDrift():
    3902:	69 2e       	mov	r6, r25
    3904:	f0 e2       	ldi	r31, 0x20	; 32
    3906:	f9 17       	cp	r31, r25
    3908:	c8 f7       	brcc	.-14     	; 0x38fc <main+0xb16>
main():
    390a:	c8 01       	movw	r24, r16
updatePatternDrift():
    390c:	c8 16       	cp	r12, r24
    390e:	d9 06       	cpc	r13, r25
    3910:	9c f4       	brge	.+38     	; 0x3938 <main+0xb52>
    3912:	e7 2d       	mov	r30, r7
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	e9 56       	subi	r30, 0x69	; 105
    3918:	f0 4b       	sbci	r31, 0xB0	; 176
    391a:	80 81       	ld	r24, Z
    391c:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    3920:	86 15       	cp	r24, r6
    3922:	50 f4       	brcc	.+20     	; 0x3938 <main+0xb52>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:873
      if (pixels[i] > 128) {
    3924:	f7 01       	movw	r30, r14
    3926:	80 81       	ld	r24, Z
    3928:	81 38       	cpi	r24, 0x81	; 129
    392a:	98 f0       	brcs	.+38     	; 0x3952 <main+0xb6c>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:874
        pixels[i] -= 2;
    392c:	82 50       	subi	r24, 0x02	; 2
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:876
      } else {
        pixels[i]--;
    392e:	80 83       	st	Z, r24
    3930:	03 c0       	rjmp	.+6      	; 0x3938 <main+0xb52>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:868
    byte tem = i % 3;
    tem *= 2;
    byte rand = random(255);
    if (rand > (pixels[i] > 32 ? randinc : (randinc + driftchance / 2)) && (pixels[i] < getLeftVal(currentValueLeft[tem + 1]))) {
      if (pixels[i] > 128 && pixels[i] < 254) {
        pixels[i] += 2;
    3932:	9e 5f       	subi	r25, 0xFE	; 254
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:870
      } else {
        pixels[i]++;
    3934:	f7 01       	movw	r30, r14
    3936:	90 83       	st	Z, r25
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:862
*/
void updatePatternDrift() {
  byte driftchance = 16 + currentValueRight[0] * 10;
  byte randinc = 255 - driftchance;
  byte randdec = driftchance;
  for (unsigned int i = 0; i < (LENGTH * 3); i++) {
    3938:	ff ef       	ldi	r31, 0xFF	; 255
    393a:	af 1a       	sub	r10, r31
    393c:	bf 0a       	sbc	r11, r31
    393e:	2f ef       	ldi	r18, 0xFF	; 255
    3940:	e2 1a       	sub	r14, r18
    3942:	f2 0a       	sbc	r15, r18
    3944:	30 e1       	ldi	r19, 0x10	; 16
    3946:	a3 16       	cp	r10, r19
    3948:	3e e0       	ldi	r19, 0x0E	; 14
    394a:	b3 06       	cpc	r11, r19
    394c:	09 f0       	breq	.+2      	; 0x3950 <main+0xb6a>
    394e:	ac cf       	rjmp	.-168    	; 0x38a8 <main+0xac2>
    3950:	ee cd       	rjmp	.-1060   	; 0x352e <main+0x748>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:876
      }
    } else if (rand < (pixels[i] > 32 ? randdec : (randdec - driftchance / 2)) && (pixels[i] > getLeftVal(currentValueLeft[tem]))) {
      if (pixels[i] > 128) {
        pixels[i] -= 2;
      } else {
        pixels[i]--;
    3952:	81 50       	subi	r24, 0x01	; 1
    3954:	ec cf       	rjmp	.-40     	; 0x392e <main+0xb48>
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:598
    }
  } else if (currentMode == 1) {
    updatePatternDrift();
    //} else if (currentMode == 2) {
    //updatePatternComets();
  } else if (currentMode == 3) {
    3956:	03 30       	cpi	r16, 0x03	; 3
    3958:	09 f0       	breq	.+2      	; 0x395c <main+0xb76>
    395a:	21 c1       	rjmp	.+578    	; 0x3b9e <main+0xdb8>
    395c:	33 e8       	ldi	r19, 0x83	; 131
    395e:	e3 2e       	mov	r14, r19
    3960:	31 e4       	ldi	r19, 0x41	; 65
    3962:	f3 2e       	mov	r15, r19
    3964:	03 e4       	ldi	r16, 0x43	; 67
    3966:	10 e5       	ldi	r17, 0x50	; 80
updatePatternPulse():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:884
  }
}

void updatePatternPulse() {
  for (int  i = 0; i < (LENGTH * 3) - 2; i += 3) {
    byte max_r = (scratch[i] & 0x7C) >> 2;
    3968:	f7 01       	movw	r30, r14
    396a:	80 81       	ld	r24, Z
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	9c 01       	movw	r18, r24
    3970:	35 95       	asr	r19
    3972:	27 95       	ror	r18
    3974:	35 95       	asr	r19
    3976:	27 95       	ror	r18
    3978:	f2 2f       	mov	r31, r18
    397a:	ff 71       	andi	r31, 0x1F	; 31
    397c:	6f 2e       	mov	r6, r31
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:885
    byte max_g = (((scratch[i] & 0x02) << 3) | ((scratch[i + 1] >> 5))); //dont need to mask the low 5 bits here because we're just pushing them off the edge
    397e:	f7 01       	movw	r30, r14
    3980:	41 81       	ldd	r20, Z+1	; 0x01
    3982:	9c 01       	movw	r18, r24
    3984:	73 e0       	ldi	r23, 0x03	; 3
    3986:	22 0f       	add	r18, r18
    3988:	33 1f       	adc	r19, r19
    398a:	7a 95       	dec	r23
    398c:	e1 f7       	brne	.-8      	; 0x3986 <main+0xba0>
    398e:	20 71       	andi	r18, 0x10	; 16
    3990:	94 2e       	mov	r9, r20
    3992:	92 94       	swap	r9
    3994:	96 94       	lsr	r9
    3996:	a7 e0       	ldi	r26, 0x07	; 7
    3998:	9a 22       	and	r9, r26
    399a:	92 2a       	or	r9, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:886
    byte max_b = (scratch[i + 1]) & 0x1F;
    399c:	4f 71       	andi	r20, 0x1F	; 31
    399e:	74 2e       	mov	r7, r20
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:887
    byte speed = 1 + (scratch[i + 2] >> 6);
    39a0:	22 81       	ldd	r18, Z+2	; 0x02
    39a2:	82 2e       	mov	r8, r18
    39a4:	82 94       	swap	r8
    39a6:	86 94       	lsr	r8
    39a8:	86 94       	lsr	r8
    39aa:	b3 e0       	ldi	r27, 0x03	; 3
    39ac:	8b 22       	and	r8, r27
    39ae:	83 94       	inc	r8
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:888
    byte bright = scratch[i + 2] & 0x3F;
    39b0:	2f 73       	andi	r18, 0x3F	; 63
    39b2:	a2 2e       	mov	r10, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:889
    byte dir = (scratch[i] >> 7);
    39b4:	88 0f       	add	r24, r24
    39b6:	89 2f       	mov	r24, r25
    39b8:	88 1f       	adc	r24, r24
    39ba:	99 0b       	sbc	r25, r25
    39bc:	b8 2e       	mov	r11, r24
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:890
    if (!(max_r + max_b + max_g)) { // need to consider generating new target
    39be:	26 2d       	mov	r18, r6
    39c0:	24 0f       	add	r18, r20
    39c2:	33 27       	eor	r19, r19
    39c4:	33 1f       	adc	r19, r19
    39c6:	c9 01       	movw	r24, r18
    39c8:	89 0d       	add	r24, r9
    39ca:	91 1d       	adc	r25, r1
    39cc:	89 2b       	or	r24, r25
    39ce:	09 f0       	breq	.+2      	; 0x39d2 <main+0xbec>
    39d0:	8f c0       	rjmp	.+286    	; 0x3af0 <main+0xd0a>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:891
      if (random(0, (currentValueRight[0] + 2) * 4 * pgm_read_byte_near(&maxValueRight[currentMode][1])) < currentValueRight[1]) {
    39d2:	80 91 9f 4f 	lds	r24, 0x4F9F	; 0x804f9f <currentValueRight>
    39d6:	e0 91 07 40 	lds	r30, 0x4007	; 0x804007 <currentMode>
    39da:	38 e0       	ldi	r19, 0x08	; 8
    39dc:	e3 9f       	mul	r30, r19
    39de:	f0 01       	movw	r30, r0
    39e0:	11 24       	eor	r1, r1
    39e2:	e4 5a       	subi	r30, 0xA4	; 164
    39e4:	f6 4f       	sbci	r31, 0xF6	; 246
    39e6:	e4 91       	lpm	r30, Z
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	02 96       	adiw	r24, 0x02	; 2
    39ec:	88 0f       	add	r24, r24
    39ee:	99 1f       	adc	r25, r25
    39f0:	88 0f       	add	r24, r24
    39f2:	99 1f       	adc	r25, r25
    39f4:	e8 9f       	mul	r30, r24
    39f6:	90 01       	movw	r18, r0
    39f8:	e9 9f       	mul	r30, r25
    39fa:	30 0d       	add	r19, r0
    39fc:	11 24       	eor	r1, r1
    39fe:	03 2e       	mov	r0, r19
    3a00:	00 0c       	add	r0, r0
    3a02:	44 0b       	sbc	r20, r20
    3a04:	55 0b       	sbc	r21, r21
    3a06:	60 e0       	ldi	r22, 0x00	; 0
    3a08:	70 e0       	ldi	r23, 0x00	; 0
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <random(long, long)>
    3a10:	20 91 a0 4f 	lds	r18, 0x4FA0	; 0x804fa0 <currentValueRight+0x1>
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	50 e0       	ldi	r21, 0x00	; 0
    3a18:	40 e0       	ldi	r20, 0x00	; 0
    3a1a:	62 17       	cp	r22, r18
    3a1c:	73 07       	cpc	r23, r19
    3a1e:	84 07       	cpc	r24, r20
    3a20:	95 07       	cpc	r25, r21
    3a22:	84 f5       	brge	.+96     	; 0x3a84 <main+0xc9e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:892
        max_r = random(currentValueLeft[0], currentValueLeft[1]);
    3a24:	20 91 98 4f 	lds	r18, 0x4F98	; 0x804f98 <currentValueLeft+0x1>
    3a28:	60 91 97 4f 	lds	r22, 0x4F97	; 0x804f97 <currentValueLeft>
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	50 e0       	ldi	r21, 0x00	; 0
    3a30:	40 e0       	ldi	r20, 0x00	; 0
    3a32:	70 e0       	ldi	r23, 0x00	; 0
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	80 e0       	ldi	r24, 0x00	; 0
    3a38:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <random(long, long)>
    3a3c:	66 2e       	mov	r6, r22
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:893
        max_g = random(currentValueLeft[2], currentValueLeft[3]);
    3a3e:	20 91 9a 4f 	lds	r18, 0x4F9A	; 0x804f9a <currentValueLeft+0x3>
    3a42:	60 91 99 4f 	lds	r22, 0x4F99	; 0x804f99 <currentValueLeft+0x2>
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	50 e0       	ldi	r21, 0x00	; 0
    3a4a:	40 e0       	ldi	r20, 0x00	; 0
    3a4c:	70 e0       	ldi	r23, 0x00	; 0
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <random(long, long)>
    3a56:	96 2e       	mov	r9, r22
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:894
        max_b = random(currentValueLeft[4], currentValueLeft[5]);
    3a58:	20 91 9c 4f 	lds	r18, 0x4F9C	; 0x804f9c <currentValueLeft+0x5>
    3a5c:	60 91 9b 4f 	lds	r22, 0x4F9B	; 0x804f9b <currentValueLeft+0x4>
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	50 e0       	ldi	r21, 0x00	; 0
    3a64:	40 e0       	ldi	r20, 0x00	; 0
    3a66:	70 e0       	ldi	r23, 0x00	; 0
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	80 e0       	ldi	r24, 0x00	; 0
    3a6c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <random(long, long)>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/WMath.cpp:40
    3a70:	76 2e       	mov	r7, r22
random():
    3a72:	04 d4       	rcall	.+2056   	; 0x427c <random>
    3a74:	23 e0       	ldi	r18, 0x03	; 3
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	40 e0       	ldi	r20, 0x00	; 0
    3a7a:	50 e0       	ldi	r21, 0x00	; 0
    3a7c:	54 d4       	rcall	.+2216   	; 0x4326 <__divmodsi4>
updatePatternPulse():
    3a7e:	86 2e       	mov	r8, r22
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:895
        speed = random(0, 3);
    3a80:	b1 2c       	mov	r11, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:897
        bright = 0;
        dir = 0;
    3a82:	a1 2c       	mov	r10, r1
updatePatternPulse():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:896
      if (random(0, (currentValueRight[0] + 2) * 4 * pgm_read_byte_near(&maxValueRight[currentMode][1])) < currentValueRight[1]) {
        max_r = random(currentValueLeft[0], currentValueLeft[1]);
        max_g = random(currentValueLeft[2], currentValueLeft[3]);
        max_b = random(currentValueLeft[4], currentValueLeft[5]);
        speed = random(0, 3);
        bright = 0;
    3a84:	f8 01       	movw	r30, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:899
        dir = 0;
      }
      pixels[i] = 0;
    3a86:	10 82       	st	Z, r1
    3a88:	11 82       	std	Z+1, r1	; 0x01
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:900
      pixels[i + 1] = 0;
    3a8a:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:901
      pixels[i + 2] = 0;
    3a8c:	49 2d       	mov	r20, r9
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:932
            }
          }
        }
      }
    }
    scratch[i] = (dir << 7) | (max_r << 2) | (max_g >> 3);
    3a8e:	50 e0       	ldi	r21, 0x00	; 0
    3a90:	20 e8       	ldi	r18, 0x80	; 128
    3a92:	b2 9e       	mul	r11, r18
    3a94:	c0 01       	movw	r24, r0
    3a96:	11 24       	eor	r1, r1
    3a98:	64 e0       	ldi	r22, 0x04	; 4
    3a9a:	66 9e       	mul	r6, r22
    3a9c:	90 01       	movw	r18, r0
    3a9e:	11 24       	eor	r1, r1
    3aa0:	82 2b       	or	r24, r18
    3aa2:	9a 01       	movw	r18, r20
    3aa4:	93 e0       	ldi	r25, 0x03	; 3
    3aa6:	35 95       	asr	r19
    3aa8:	27 95       	ror	r18
    3aaa:	9a 95       	dec	r25
    3aac:	e1 f7       	brne	.-8      	; 0x3aa6 <main+0xcc0>
    3aae:	82 2b       	or	r24, r18
    3ab0:	f7 01       	movw	r30, r14
    3ab2:	80 83       	st	Z, r24
    3ab4:	25 e0       	ldi	r18, 0x05	; 5
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:933
    scratch[i + 1] = (max_g << 5) | max_b;
    3ab6:	44 0f       	add	r20, r20
    3ab8:	55 1f       	adc	r21, r21
    3aba:	2a 95       	dec	r18
    3abc:	e1 f7       	brne	.-8      	; 0x3ab6 <main+0xcd0>
    3abe:	74 2a       	or	r7, r20
    3ac0:	71 82       	std	Z+1, r7	; 0x01
    3ac2:	28 2d       	mov	r18, r8
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:934
    scratch[i + 2] = ((speed - 1) << 6) | bright;
    3ac4:	21 50       	subi	r18, 0x01	; 1
    3ac6:	33 0b       	sbc	r19, r19
    3ac8:	49 01       	movw	r8, r18
    3aca:	36 e0       	ldi	r19, 0x06	; 6
    3acc:	88 0c       	add	r8, r8
    3ace:	99 1c       	adc	r9, r9
    3ad0:	3a 95       	dec	r19
    3ad2:	e1 f7       	brne	.-8      	; 0x3acc <main+0xce6>
    3ad4:	a8 28       	or	r10, r8
    3ad6:	a2 82       	std	Z+2, r10	; 0x02
    3ad8:	33 e0       	ldi	r19, 0x03	; 3
    3ada:	e3 0e       	add	r14, r19
    3adc:	f1 1c       	adc	r15, r1
    3ade:	0d 5f       	subi	r16, 0xFD	; 253
    3ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ae2:	43 e9       	ldi	r20, 0x93	; 147
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:883
    }
  }
}

void updatePatternPulse() {
  for (int  i = 0; i < (LENGTH * 3) - 2; i += 3) {
    3ae4:	5f e4       	ldi	r21, 0x4F	; 79
    3ae6:	4e 15       	cp	r20, r14
    3ae8:	5f 05       	cpc	r21, r15
    3aea:	09 f0       	breq	.+2      	; 0x3aee <main+0xd08>
    3aec:	3d cf       	rjmp	.-390    	; 0x3968 <main+0xb82>
    3aee:	1f cd       	rjmp	.-1474   	; 0x352e <main+0x748>
    3af0:	28 2d       	mov	r18, r8
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:903
      }
      pixels[i] = 0;
      pixels[i + 1] = 0;
      pixels[i + 2] = 0;
    } else {
      if (!(frameNumber % (speed))) {
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	50 e0       	ldi	r21, 0x00	; 0
    3af6:	40 e0       	ldi	r20, 0x00	; 0
    3af8:	60 91 93 4f 	lds	r22, 0x4F93	; 0x804f93 <frameNumber>
    3afc:	70 91 94 4f 	lds	r23, 0x4F94	; 0x804f94 <frameNumber+0x1>
    3b00:	80 91 95 4f 	lds	r24, 0x4F95	; 0x804f95 <frameNumber+0x2>
    3b04:	90 91 96 4f 	lds	r25, 0x4F96	; 0x804f96 <frameNumber+0x3>
    3b08:	3a d4       	rcall	.+2164   	; 0x437e <__udivmodsi4>
    3b0a:	67 2b       	or	r22, r23
    3b0c:	68 2b       	or	r22, r24
    3b0e:	69 2b       	or	r22, r25
    3b10:	09 f0       	breq	.+2      	; 0x3b14 <main+0xd2e>
    3b12:	bc cf       	rjmp	.-136    	; 0x3a8c <main+0xca6>
    3b14:	bb 20       	and	r11, r11
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:905

        if (dir && !bright) {
    3b16:	59 f0       	breq	.+22     	; 0x3b2e <main+0xd48>
    3b18:	a1 10       	cpse	r10, r1
    3b1a:	09 c0       	rjmp	.+18     	; 0x3b2e <main+0xd48>
    3b1c:	f8 01       	movw	r30, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:907
          dir = 0;
          pixels[i] = 0;
    3b1e:	10 82       	st	Z, r1
    3b20:	11 82       	std	Z+1, r1	; 0x01
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:908
          pixels[i + 1] = 0;
    3b22:	12 82       	std	Z+2, r1	; 0x02
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:909
          pixels[i + 2] = 0;
    3b24:	b1 2c       	mov	r11, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:906
      pixels[i + 2] = 0;
    } else {
      if (!(frameNumber % (speed))) {

        if (dir && !bright) {
          dir = 0;
    3b26:	71 2c       	mov	r7, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:912
          pixels[i] = 0;
          pixels[i + 1] = 0;
          pixels[i + 2] = 0;
          max_r = 0;
          max_g = 0;
          max_b = 0;
    3b28:	91 2c       	mov	r9, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:911
          dir = 0;
          pixels[i] = 0;
          pixels[i + 1] = 0;
          pixels[i + 2] = 0;
          max_r = 0;
          max_g = 0;
    3b2a:	61 2c       	mov	r6, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:910
        if (dir && !bright) {
          dir = 0;
          pixels[i] = 0;
          pixels[i + 1] = 0;
          pixels[i + 2] = 0;
          max_r = 0;
    3b2c:	af cf       	rjmp	.-162    	; 0x3a8c <main+0xca6>
updatePatternPulse():
    3b2e:	ea 2d       	mov	r30, r10
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:914
          max_g = 0;
          max_b = 0;
        } else {
          byte nbright = pgm_read_byte_near(&pulseBrightnessTable[bright]);
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	e0 5f       	subi	r30, 0xF0	; 240
    3b34:	f6 4f       	sbci	r31, 0xF6	; 246
    3b36:	c4 90       	lpm	r12, Z
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:916
          //byte nbright = bright << 2;
          pixels[i] = map(nbright, 0, 255, 0, getLeftVal(max_r));
    3b38:	86 2d       	mov	r24, r6
    3b3a:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
map():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3b3e:	d1 2c       	mov	r13, r1
    3b40:	28 2f       	mov	r18, r24
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	d6 01       	movw	r26, r12
    3b46:	3d d4       	rcall	.+2170   	; 0x43c2 <__umulhisi3>
    3b48:	a2 01       	movw	r20, r4
    3b4a:	91 01       	movw	r18, r2
    3b4c:	ec d3       	rcall	.+2008   	; 0x4326 <__divmodsi4>
updatePatternPulse():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:916
    3b4e:	f8 01       	movw	r30, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:917
          pixels[i + 1] = map(nbright, 0, 255, 0, getLeftVal(max_g));
    3b50:	20 83       	st	Z, r18
    3b52:	89 2d       	mov	r24, r9
    3b54:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
map():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3b58:	96 01       	movw	r18, r12
    3b5a:	a8 2f       	mov	r26, r24
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	31 d4       	rcall	.+2146   	; 0x43c2 <__umulhisi3>
    3b60:	a2 01       	movw	r20, r4
    3b62:	91 01       	movw	r18, r2
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:917
    3b64:	e0 d3       	rcall	.+1984   	; 0x4326 <__divmodsi4>
updatePatternPulse():
    3b66:	f8 01       	movw	r30, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:918
          pixels[i + 2] = map(nbright, 0, 255, 0, getLeftVal(max_b));
    3b68:	21 83       	std	Z+1, r18	; 0x01
    3b6a:	87 2d       	mov	r24, r7
    3b6c:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
map():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3b70:	96 01       	movw	r18, r12
    3b72:	a8 2f       	mov	r26, r24
    3b74:	b0 e0       	ldi	r27, 0x00	; 0
    3b76:	25 d4       	rcall	.+2122   	; 0x43c2 <__umulhisi3>
    3b78:	a2 01       	movw	r20, r4
    3b7a:	91 01       	movw	r18, r2
    3b7c:	d4 d3       	rcall	.+1960   	; 0x4326 <__divmodsi4>
updatePatternPulse():
    3b7e:	f8 01       	movw	r30, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:918
    3b80:	22 83       	std	Z+2, r18	; 0x02
    3b82:	bb 20       	and	r11, r11
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:919
          if (dir) {
    3b84:	11 f0       	breq	.+4      	; 0x3b8a <main+0xda4>
    3b86:	aa 94       	dec	r10
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:920
            bright--;
    3b88:	81 cf       	rjmp	.-254    	; 0x3a8c <main+0xca6>
    3b8a:	ff e3       	ldi	r31, 0x3F	; 63
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:922
          } else {
            if (bright == 63) {
    3b8c:	af 16       	cp	r10, r31
    3b8e:	11 f0       	breq	.+4      	; 0x3b94 <main+0xdae>
    3b90:	a3 94       	inc	r10
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:926
              bright--;
              dir = 1;
            } else {
              bright++;
    3b92:	7c cf       	rjmp	.-264    	; 0x3a8c <main+0xca6>
main():
    3b94:	bb 24       	eor	r11, r11
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:924
          if (dir) {
            bright--;
          } else {
            if (bright == 63) {
              bright--;
              dir = 1;
    3b96:	b3 94       	inc	r11
    3b98:	4e e3       	ldi	r20, 0x3E	; 62
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:923
          pixels[i + 2] = map(nbright, 0, 255, 0, getLeftVal(max_b));
          if (dir) {
            bright--;
          } else {
            if (bright == 63) {
              bright--;
    3b9a:	a4 2e       	mov	r10, r20
    3b9c:	77 cf       	rjmp	.-274    	; 0x3a8c <main+0xca6>
updatePattern():
    3b9e:	04 30       	cpi	r16, 0x04	; 4
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:600
    updatePatternDrift();
    //} else if (currentMode == 2) {
    //updatePatternComets();
  } else if (currentMode == 3) {
    updatePatternPulse();
  } else if (currentMode == 4) {
    3ba0:	19 f4       	brne	.+6      	; 0x3ba8 <main+0xdc2>
    3ba2:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <updatePatternWave()>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:601
    updatePatternWave(); //rainbow is just a subset of wave
    3ba6:	c3 cc       	rjmp	.-1658   	; 0x352e <main+0x748>
    3ba8:	05 30       	cpi	r16, 0x05	; 5
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:602
  } else if (currentMode == 5) {
    3baa:	09 f0       	breq	.+2      	; 0x3bae <main+0xdc8>
    3bac:	5c c0       	rjmp	.+184    	; 0x3c66 <main+0xe80>
updatePatternDots():
    3bae:	80 91 a0 4f 	lds	r24, 0x4FA0	; 0x804fa0 <currentValueRight+0x1>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:623
  frameNumber++;
}

void updatePatternDots() {
  byte r, g, b;
  if (!(frameNumber % (13 - currentValueRight[1]))) {
    3bb2:	2d e0       	ldi	r18, 0x0D	; 13
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	28 1b       	sub	r18, r24
    3bb8:	31 09       	sbc	r19, r1
    3bba:	03 2e       	mov	r0, r19
    3bbc:	00 0c       	add	r0, r0
    3bbe:	44 0b       	sbc	r20, r20
    3bc0:	55 0b       	sbc	r21, r21
    3bc2:	60 91 93 4f 	lds	r22, 0x4F93	; 0x804f93 <frameNumber>
    3bc6:	70 91 94 4f 	lds	r23, 0x4F94	; 0x804f94 <frameNumber+0x1>
    3bca:	80 91 95 4f 	lds	r24, 0x4F95	; 0x804f95 <frameNumber+0x2>
    3bce:	90 91 96 4f 	lds	r25, 0x4F96	; 0x804f96 <frameNumber+0x3>
    3bd2:	d5 d3       	rcall	.+1962   	; 0x437e <__udivmodsi4>
main():
    3bd4:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:628
    r = random(getLeftVal(currentValueLeft[0]), getLeftVal(currentValueLeft[1]));
    g = random(getLeftVal(currentValueLeft[2]), getLeftVal(currentValueLeft[3]));
    b = random(getLeftVal(currentValueLeft[4]), getLeftVal(currentValueLeft[5]));
  } else {
    r = 0; g = 0; b = 0;
    3bd6:	f1 2c       	mov	r15, r1
updatePatternDots():
    3bd8:	67 2b       	or	r22, r23
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:623
  frameNumber++;
}

void updatePatternDots() {
  byte r, g, b;
  if (!(frameNumber % (13 - currentValueRight[1]))) {
    3bda:	68 2b       	or	r22, r24
    3bdc:	69 2b       	or	r22, r25
    3bde:	e1 f5       	brne	.+120    	; 0x3c58 <main+0xe72>
    3be0:	80 91 98 4f 	lds	r24, 0x4F98	; 0x804f98 <currentValueLeft+0x1>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:624
    r = random(getLeftVal(currentValueLeft[0]), getLeftVal(currentValueLeft[1]));
    3be4:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    3be8:	18 2f       	mov	r17, r24
    3bea:	80 91 97 4f 	lds	r24, 0x4F97	; 0x804f97 <currentValueLeft>
    3bee:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    3bf2:	21 2f       	mov	r18, r17
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	50 e0       	ldi	r21, 0x00	; 0
    3bf8:	40 e0       	ldi	r20, 0x00	; 0
    3bfa:	68 2f       	mov	r22, r24
    3bfc:	70 e0       	ldi	r23, 0x00	; 0
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	80 e0       	ldi	r24, 0x00	; 0
    3c02:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <random(long, long)>
    3c06:	16 2f       	mov	r17, r22
    3c08:	80 91 9a 4f 	lds	r24, 0x4F9A	; 0x804f9a <currentValueLeft+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:625
    g = random(getLeftVal(currentValueLeft[2]), getLeftVal(currentValueLeft[3]));
    3c0c:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    3c10:	08 2f       	mov	r16, r24
    3c12:	80 91 99 4f 	lds	r24, 0x4F99	; 0x804f99 <currentValueLeft+0x2>
    3c16:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    3c1a:	20 2f       	mov	r18, r16
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	50 e0       	ldi	r21, 0x00	; 0
    3c20:	40 e0       	ldi	r20, 0x00	; 0
    3c22:	68 2f       	mov	r22, r24
    3c24:	70 e0       	ldi	r23, 0x00	; 0
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	80 e0       	ldi	r24, 0x00	; 0
    3c2a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <random(long, long)>
    3c2e:	f6 2e       	mov	r15, r22
    3c30:	80 91 9c 4f 	lds	r24, 0x4F9C	; 0x804f9c <currentValueLeft+0x5>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:626
    b = random(getLeftVal(currentValueLeft[4]), getLeftVal(currentValueLeft[5]));
    3c34:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    3c38:	08 2f       	mov	r16, r24
    3c3a:	80 91 9b 4f 	lds	r24, 0x4F9B	; 0x804f9b <currentValueLeft+0x4>
    3c3e:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    3c42:	20 2f       	mov	r18, r16
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	50 e0       	ldi	r21, 0x00	; 0
    3c48:	40 e0       	ldi	r20, 0x00	; 0
    3c4a:	68 2f       	mov	r22, r24
    3c4c:	70 e0       	ldi	r23, 0x00	; 0
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	80 e0       	ldi	r24, 0x00	; 0
    3c52:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <random(long, long)>
    3c56:	46 2f       	mov	r20, r22
    3c58:	20 91 a1 4f 	lds	r18, 0x4FA1	; 0x804fa1 <currentValueRight+0x2>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:630
  } else {
    r = 0; g = 0; b = 0;
  }
  pushPixel(r, g, b, currentValueRight[2]);
    3c5c:	6f 2d       	mov	r22, r15
    3c5e:	81 2f       	mov	r24, r17
updatePatternDots2():
    3c60:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:640
  if (!(frameNumber % (13 - currentValueRight[1]))) {
    getModeColors(&r, &g, &b, random(0, pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getTransitionFrames() + getDwellFrames())));
  } else {
    r = 0; g = 0; b = 0;
  }
  pushPixel(r, g, b, currentValueRight[2]);
    3c64:	64 cc       	rjmp	.-1848   	; 0x352e <main+0x748>
updatePattern():
    3c66:	06 30       	cpi	r16, 0x06	; 6
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:604
    updatePatternPulse();
  } else if (currentMode == 4) {
    updatePatternWave(); //rainbow is just a subset of wave
  } else if (currentMode == 5) {
    updatePatternDots();
  } else if (currentMode == 6) {
    3c68:	09 f0       	breq	.+2      	; 0x3c6c <main+0xe86>
    3c6a:	7f c0       	rjmp	.+254    	; 0x3d6a <main+0xf84>
updatePatternFade():
    3c6c:	80 91 7f 41 	lds	r24, 0x417F	; 0x80417f <updatePatternFade()::bright>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:654
}


void updatePatternFade() {
  static byte bright = 0;
  if (bright & 128) {
    3c70:	87 ff       	sbrs	r24, 7
    3c72:	73 c0       	rjmp	.+230    	; 0x3d5a <main+0xf74>
    3c74:	98 2f       	mov	r25, r24
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:655
    if (bright & 63) {
    3c76:	9f 73       	andi	r25, 0x3F	; 63
    3c78:	81 50       	subi	r24, 0x01	; 1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:656
      bright--;
    3c7a:	91 11       	cpse	r25, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:655


void updatePatternFade() {
  static byte bright = 0;
  if (bright & 128) {
    if (bright & 63) {
    3c7c:	71 c0       	rjmp	.+226    	; 0x3d60 <main+0xf7a>
    3c7e:	10 92 7f 41 	sts	0x417F, r1	; 0x80417f <updatePatternFade()::bright>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:658
      bright--;
    } else {
      bright = 0;
    3c82:	e0 91 7f 41 	lds	r30, 0x417F	; 0x80417f <updatePatternFade()::bright>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:667
      bright = 0xBF;
    } else {
      bright++;
    }
  }
  byte nbright = pgm_read_byte_near(&pulseBrightnessTable[63 & bright]);
    3c86:	ef 73       	andi	r30, 0x3F	; 63
    3c88:	f0 e0       	ldi	r31, 0x00	; 0
    3c8a:	e0 5f       	subi	r30, 0xF0	; 240
    3c8c:	f6 4f       	sbci	r31, 0xF6	; 246
    3c8e:	c4 90       	lpm	r12, Z
    3c90:	80 91 9a 4f 	lds	r24, 0x4F9A	; 0x804f9a <currentValueLeft+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:668
  byte r = map(nbright, 0, 255, getLeftVal(currentValueLeft[0]), getLeftVal(currentValueLeft[3]));
    3c94:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    3c98:	18 2f       	mov	r17, r24
    3c9a:	80 91 97 4f 	lds	r24, 0x4F97	; 0x804f97 <currentValueLeft>
    3c9e:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    3ca2:	88 2e       	mov	r8, r24
    3ca4:	91 2c       	mov	r9, r1
    3ca6:	b1 2c       	mov	r11, r1
    3ca8:	a1 2c       	mov	r10, r1
    3caa:	d1 2c       	mov	r13, r1
    3cac:	f1 2c       	mov	r15, r1
    3cae:	e1 2c       	mov	r14, r1
    3cb0:	21 2f       	mov	r18, r17
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3cb6:	40 e0       	ldi	r20, 0x00	; 0
map():
    3cb8:	28 19       	sub	r18, r8
    3cba:	39 09       	sbc	r19, r9
    3cbc:	4a 09       	sbc	r20, r10
    3cbe:	5b 09       	sbc	r21, r11
    3cc0:	c7 01       	movw	r24, r14
    3cc2:	b6 01       	movw	r22, r12
    3cc4:	a7 d5       	rcall	.+2894   	; 0x4814 <__mulsi3>
    3cc6:	a2 01       	movw	r20, r4
    3cc8:	91 01       	movw	r18, r2
    3cca:	2d d3       	rcall	.+1626   	; 0x4326 <__divmodsi4>
updatePatternFade():
    3ccc:	02 2f       	mov	r16, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:668
    3cce:	08 0d       	add	r16, r8
    3cd0:	80 91 9b 4f 	lds	r24, 0x4F9B	; 0x804f9b <currentValueLeft+0x4>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:669
  byte g = map(nbright, 0, 255, getLeftVal(currentValueLeft[1]), getLeftVal(currentValueLeft[4]));
    3cd4:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    3cd8:	18 2f       	mov	r17, r24
    3cda:	80 91 98 4f 	lds	r24, 0x4F98	; 0x804f98 <currentValueLeft+0x1>
    3cde:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    3ce2:	88 2e       	mov	r8, r24
    3ce4:	91 2c       	mov	r9, r1
    3ce6:	b1 2c       	mov	r11, r1
    3ce8:	a1 2c       	mov	r10, r1
    3cea:	21 2f       	mov	r18, r17
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3cf0:	40 e0       	ldi	r20, 0x00	; 0
map():
    3cf2:	28 19       	sub	r18, r8
    3cf4:	39 09       	sbc	r19, r9
    3cf6:	4a 09       	sbc	r20, r10
    3cf8:	5b 09       	sbc	r21, r11
    3cfa:	c7 01       	movw	r24, r14
    3cfc:	b6 01       	movw	r22, r12
    3cfe:	8a d5       	rcall	.+2836   	; 0x4814 <__mulsi3>
    3d00:	a2 01       	movw	r20, r4
    3d02:	91 01       	movw	r18, r2
    3d04:	10 d3       	rcall	.+1568   	; 0x4326 <__divmodsi4>
updatePatternFade():
    3d06:	72 2e       	mov	r7, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:669
    3d08:	78 0c       	add	r7, r8
    3d0a:	80 91 9c 4f 	lds	r24, 0x4F9C	; 0x804f9c <currentValueLeft+0x5>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:670
  byte b = map(nbright, 0, 255, getLeftVal(currentValueLeft[2]), getLeftVal(currentValueLeft[5]));
    3d0e:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    3d12:	18 2f       	mov	r17, r24
    3d14:	80 91 99 4f 	lds	r24, 0x4F99	; 0x804f99 <currentValueLeft+0x2>
    3d18:	0e 94 9d 09 	call	0x133a	; 0x133a <getLeftVal(unsigned char)>
    3d1c:	88 2e       	mov	r8, r24
    3d1e:	91 2c       	mov	r9, r1
    3d20:	b1 2c       	mov	r11, r1
    3d22:	a1 2c       	mov	r10, r1
    3d24:	21 2f       	mov	r18, r17
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3d2a:	40 e0       	ldi	r20, 0x00	; 0
map():
    3d2c:	28 19       	sub	r18, r8
    3d2e:	39 09       	sbc	r19, r9
    3d30:	4a 09       	sbc	r20, r10
    3d32:	5b 09       	sbc	r21, r11
    3d34:	c7 01       	movw	r24, r14
    3d36:	b6 01       	movw	r22, r12
    3d38:	6d d5       	rcall	.+2778   	; 0x4814 <__mulsi3>
    3d3a:	a2 01       	movw	r20, r4
    3d3c:	91 01       	movw	r18, r2
    3d3e:	f3 d2       	rcall	.+1510   	; 0x4326 <__divmodsi4>
updatePatternFade():
    3d40:	82 0e       	add	r8, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:670
    3d42:	e3 e4       	ldi	r30, 0x43	; 67
    3d44:	f0 e5       	ldi	r31, 0x50	; 80
setAll():
    3d46:	00 83       	st	Z, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:690
}


void setAll(byte r, byte g, byte b) {
  for (unsigned int i = 0; i < ((LENGTH) * 3); i += 3) {
    pixels[i] = r;
    3d48:	71 82       	std	Z+1, r7	; 0x01
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:691
    pixels[i + 1] = g;
    3d4a:	82 82       	std	Z+2, r8	; 0x02
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:692
    pixels[i + 2] = b;
    3d4c:	33 96       	adiw	r30, 0x03	; 3
    3d4e:	83 e5       	ldi	r24, 0x53	; 83
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:689
  pushPixel(r, g, b, currentValueRight[currentMode == 4 ? 2 : 3]);
}


void setAll(byte r, byte g, byte b) {
  for (unsigned int i = 0; i < ((LENGTH) * 3); i += 3) {
    3d50:	9e e5       	ldi	r25, 0x5E	; 94
    3d52:	8e 17       	cp	r24, r30
    3d54:	9f 07       	cpc	r25, r31
    3d56:	b9 f7       	brne	.-18     	; 0x3d46 <main+0xf60>
    3d58:	ea cb       	rjmp	.-2092   	; 0x352e <main+0x748>
updatePatternFade():
    3d5a:	8f 33       	cpi	r24, 0x3F	; 63
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:661
      bright--;
    } else {
      bright = 0;
    }
  } else {
    if (bright >= 63) {
    3d5c:	20 f0       	brcs	.+8      	; 0x3d66 <main+0xf80>
    3d5e:	8f eb       	ldi	r24, 0xBF	; 191
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:662
      bright = 0xBF;
    3d60:	80 93 7f 41 	sts	0x417F, r24	; 0x80417f <updatePatternFade()::bright>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:664
    } else {
      bright++;
    3d64:	8e cf       	rjmp	.-228    	; 0x3c82 <main+0xe9c>
    3d66:	8f 5f       	subi	r24, 0xFF	; 255
    3d68:	fb cf       	rjmp	.-10     	; 0x3d60 <main+0xf7a>
updatePattern():
    3d6a:	07 30       	cpi	r16, 0x07	; 7
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:607
  } else if (currentMode == 5) {
    updatePatternDots();
  } else if (currentMode == 6) {
    updatePatternFade();

  } else if (currentMode == 7) {
    3d6c:	09 f4       	brne	.+2      	; 0x3d70 <main+0xf8a>
    3d6e:	19 cf       	rjmp	.-462    	; 0x3ba2 <main+0xdbc>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:609
    updatePatternWave();
  } else if (currentMode == 8) {
    3d70:	08 30       	cpi	r16, 0x08	; 8
    3d72:	09 f0       	breq	.+2      	; 0x3d76 <main+0xf90>
    3d74:	4b c0       	rjmp	.+150    	; 0x3e0c <main+0x1026>
updatePatternDots2():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:635
  pushPixel(r, g, b, currentValueRight[2]);
}

void updatePatternDots2() {
  static byte r, g, b;
  if (!(frameNumber % (13 - currentValueRight[1]))) {
    3d76:	80 91 a0 4f 	lds	r24, 0x4FA0	; 0x804fa0 <currentValueRight+0x1>
    3d7a:	2d e0       	ldi	r18, 0x0D	; 13
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	28 1b       	sub	r18, r24
    3d80:	31 09       	sbc	r19, r1
    3d82:	03 2e       	mov	r0, r19
    3d84:	00 0c       	add	r0, r0
    3d86:	44 0b       	sbc	r20, r20
    3d88:	55 0b       	sbc	r21, r21
    3d8a:	60 91 93 4f 	lds	r22, 0x4F93	; 0x804f93 <frameNumber>
    3d8e:	70 91 94 4f 	lds	r23, 0x4F94	; 0x804f94 <frameNumber+0x1>
    3d92:	80 91 95 4f 	lds	r24, 0x4F95	; 0x804f95 <frameNumber+0x2>
    3d96:	90 91 96 4f 	lds	r25, 0x4F96	; 0x804f96 <frameNumber+0x3>
    3d9a:	f1 d2       	rcall	.+1506   	; 0x437e <__udivmodsi4>
    3d9c:	67 2b       	or	r22, r23
    3d9e:	68 2b       	or	r22, r24
    3da0:	69 2b       	or	r22, r25
    3da2:	69 f5       	brne	.+90     	; 0x3dfe <main+0x1018>
    3da4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <getPalleteNumber()>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:636
    getModeColors(&r, &g, &b, random(0, pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getTransitionFrames() + getDwellFrames())));
    3da8:	e8 2f       	mov	r30, r24
    3daa:	f0 e0       	ldi	r31, 0x00	; 0
    3dac:	e0 5b       	subi	r30, 0xB0	; 176
    3dae:	f6 4f       	sbci	r31, 0xF6	; 246
    3db0:	f4 90       	lpm	r15, Z
    3db2:	0e 94 86 08 	call	0x110c	; 0x110c <getTransitionFrames()>
    3db6:	8c 01       	movw	r16, r24
    3db8:	0e 94 9e 08 	call	0x113c	; 0x113c <getDwellFrames()>
    3dbc:	80 0f       	add	r24, r16
    3dbe:	91 1f       	adc	r25, r17
    3dc0:	f8 9e       	mul	r15, r24
    3dc2:	90 01       	movw	r18, r0
    3dc4:	f9 9e       	mul	r15, r25
    3dc6:	30 0d       	add	r19, r0
    3dc8:	11 24       	eor	r1, r1
    3dca:	50 e0       	ldi	r21, 0x00	; 0
    3dcc:	40 e0       	ldi	r20, 0x00	; 0
    3dce:	60 e0       	ldi	r22, 0x00	; 0
    3dd0:	70 e0       	ldi	r23, 0x00	; 0
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <random(long, long)>
    3dd8:	8b 01       	movw	r16, r22
    3dda:	9c 01       	movw	r18, r24
    3ddc:	40 e8       	ldi	r20, 0x80	; 128
    3dde:	51 e4       	ldi	r21, 0x41	; 65
    3de0:	61 e8       	ldi	r22, 0x81	; 129
    3de2:	71 e4       	ldi	r23, 0x41	; 65
    3de4:	82 e8       	ldi	r24, 0x82	; 130
    3de6:	91 e4       	ldi	r25, 0x41	; 65
    3de8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>
    3dec:	20 91 a1 4f 	lds	r18, 0x4FA1	; 0x804fa1 <currentValueRight+0x2>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:640
  } else {
    r = 0; g = 0; b = 0;
  }
  pushPixel(r, g, b, currentValueRight[2]);
    3df0:	40 91 80 41 	lds	r20, 0x4180	; 0x804180 <updatePatternDots2()::b>
    3df4:	60 91 81 41 	lds	r22, 0x4181	; 0x804181 <updatePatternDots2()::g>
    3df8:	80 91 82 41 	lds	r24, 0x4182	; 0x804182 <updatePatternDots2()::r>
    3dfc:	31 cf       	rjmp	.-414    	; 0x3c60 <main+0xe7a>
    3dfe:	10 92 82 41 	sts	0x4182, r1	; 0x804182 <updatePatternDots2()::r>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:638
void updatePatternDots2() {
  static byte r, g, b;
  if (!(frameNumber % (13 - currentValueRight[1]))) {
    getModeColors(&r, &g, &b, random(0, pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getTransitionFrames() + getDwellFrames())));
  } else {
    r = 0; g = 0; b = 0;
    3e02:	10 92 81 41 	sts	0x4181, r1	; 0x804181 <updatePatternDots2()::g>
    3e06:	10 92 80 41 	sts	0x4180, r1	; 0x804180 <updatePatternDots2()::b>
    3e0a:	f0 cf       	rjmp	.-32     	; 0x3dec <main+0x1006>
updatePattern():
    3e0c:	09 30       	cpi	r16, 0x09	; 9
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:611

  } else if (currentMode == 7) {
    updatePatternWave();
  } else if (currentMode == 8) {
    updatePatternDots2();
  } else if (currentMode == 9) {
    3e0e:	09 f5       	brne	.+66     	; 0x3e52 <main+0x106c>
updatePatternFade2():
    3e10:	00 91 93 4f 	lds	r16, 0x4F93	; 0x804f93 <frameNumber>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:676
  setAll(r, g, b);
}

void updatePatternFade2() {
  byte r, g, b;
  getModeColors(&r, &g, &b, frameNumber);
    3e14:	10 91 94 4f 	lds	r17, 0x4F94	; 0x804f94 <frameNumber+0x1>
    3e18:	20 91 95 4f 	lds	r18, 0x4F95	; 0x804f95 <frameNumber+0x2>
    3e1c:	30 91 96 4f 	lds	r19, 0x4F96	; 0x804f96 <frameNumber+0x3>
    3e20:	ae 01       	movw	r20, r28
    3e22:	4d 5f       	subi	r20, 0xFD	; 253
    3e24:	5f 4f       	sbci	r21, 0xFF	; 255
    3e26:	be 01       	movw	r22, r28
    3e28:	66 5f       	subi	r22, 0xF6	; 246
    3e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e2c:	ce 01       	movw	r24, r28
    3e2e:	0b 96       	adiw	r24, 0x0b	; 11
    3e30:	0e 94 52 11 	call	0x22a4	; 0x22a4 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>
    3e34:	8b 81       	ldd	r24, Y+3	; 0x03
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:677
  setAll(r, g, b);
    3e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e38:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e3a:	e3 e4       	ldi	r30, 0x43	; 67
    3e3c:	f0 e5       	ldi	r31, 0x50	; 80
setAll():
    3e3e:	20 83       	st	Z, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:690
}


void setAll(byte r, byte g, byte b) {
  for (unsigned int i = 0; i < ((LENGTH) * 3); i += 3) {
    pixels[i] = r;
    3e40:	91 83       	std	Z+1, r25	; 0x01
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:691
    pixels[i + 1] = g;
    3e42:	82 83       	std	Z+2, r24	; 0x02
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:692
    pixels[i + 2] = b;
    3e44:	33 96       	adiw	r30, 0x03	; 3
    3e46:	43 e5       	ldi	r20, 0x53	; 83
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:689
  pushPixel(r, g, b, currentValueRight[currentMode == 4 ? 2 : 3]);
}


void setAll(byte r, byte g, byte b) {
  for (unsigned int i = 0; i < ((LENGTH) * 3); i += 3) {
    3e48:	5e e5       	ldi	r21, 0x5E	; 94
    3e4a:	4e 17       	cp	r20, r30
    3e4c:	5f 07       	cpc	r21, r31
    3e4e:	b9 f7       	brne	.-18     	; 0x3e3e <main+0x1058>
    3e50:	6e cb       	rjmp	.-2340   	; 0x352e <main+0x748>
updatePattern():
    3e52:	0a 30       	cpi	r16, 0x0A	; 10
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:613
    updatePatternWave();
  } else if (currentMode == 8) {
    updatePatternDots2();
  } else if (currentMode == 9) {
    updatePatternFade2();
  } else if (currentMode == 10) {
    3e54:	09 f0       	breq	.+2      	; 0x3e58 <main+0x1072>
    3e56:	ce c0       	rjmp	.+412    	; 0x3ff4 <main+0x120e>
updatePatternDrift2():
    3e58:	90 90 9f 4f 	lds	r9, 0x4F9F	; 0x804f9f <currentValueRight>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:754
  }
  }

*/
void updatePatternDrift2() {
  byte driftchance = 16 + currentValueRight[0] * 10;
    3e5c:	90 9e       	mul	r9, r16
    3e5e:	00 2d       	mov	r16, r0
    3e60:	11 24       	eor	r1, r1
    3e62:	a0 e1       	ldi	r26, 0x10	; 16
    3e64:	9a 2e       	mov	r9, r26
    3e66:	90 0e       	add	r9, r16
    3e68:	89 2c       	mov	r8, r9
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:755
  byte randinc = 255 - driftchance;
    3e6a:	80 94       	com	r8
    3e6c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <getPalleteNumber()>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:757
  byte randdec = driftchance;
  uint16_t len = (pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getDwellFrames() + getTransitionFrames()));
    3e70:	e8 2f       	mov	r30, r24
    3e72:	f0 e0       	ldi	r31, 0x00	; 0
    3e74:	e0 5b       	subi	r30, 0xB0	; 176
    3e76:	f6 4f       	sbci	r31, 0xF6	; 246
    3e78:	f4 90       	lpm	r15, Z
    3e7a:	0e 94 9e 08 	call	0x113c	; 0x113c <getDwellFrames()>
    3e7e:	8c 01       	movw	r16, r24
    3e80:	0e 94 86 08 	call	0x110c	; 0x110c <getTransitionFrames()>
    3e84:	80 0f       	add	r24, r16
    3e86:	91 1f       	adc	r25, r17
    3e88:	f8 9e       	mul	r15, r24
    3e8a:	50 01       	movw	r10, r0
    3e8c:	f9 9e       	mul	r15, r25
    3e8e:	b0 0c       	add	r11, r0
    3e90:	11 24       	eor	r1, r1
    3e92:	b3 e4       	ldi	r27, 0x43	; 67
    3e94:	cb 2e       	mov	r12, r27
    3e96:	b0 e5       	ldi	r27, 0x50	; 80
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:758
  for (uint16_t i = 0; i < LENGTH; i += 2) {
    3e98:	db 2e       	mov	r13, r27
main():
    3e9a:	71 2c       	mov	r7, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:774
      if (f1 > len) {
        f1 = len;
      }
    }
    rand = rand >> 8;
    if (rand > randinc) {
    3e9c:	61 2c       	mov	r6, r1
updatePatternDrift2():
    3e9e:	88 2d       	mov	r24, r8
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:779
      f2++;
      if (f2 > len) {
        f2 = 0;
      }
    } else if (rand < randdec) {
    3ea4:	9f 87       	std	Y+15, r25	; 0x0f
    3ea6:	e9 2d       	mov	r30, r9
    3ea8:	f0 e0       	ldi	r31, 0x00	; 0
    3eaa:	e8 8b       	std	Y+16, r30	; 0x10
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/WMath.cpp:40
    3eac:	f9 8b       	std	Y+17, r31	; 0x11
random():
    3eae:	e6 d1       	rcall	.+972    	; 0x427c <random>
    3eb0:	2f ef       	ldi	r18, 0xFF	; 255
    3eb2:	3f ef       	ldi	r19, 0xFF	; 255
    3eb4:	40 e0       	ldi	r20, 0x00	; 0
    3eb6:	50 e0       	ldi	r21, 0x00	; 0
    3eb8:	36 d2       	rcall	.+1132   	; 0x4326 <__divmodsi4>
updatePatternDrift2():
    3eba:	c6 01       	movw	r24, r12
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:760
  byte randinc = 255 - driftchance;
  byte randdec = driftchance;
  uint16_t len = (pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getDwellFrames() + getTransitionFrames()));
  for (uint16_t i = 0; i < LENGTH; i += 2) {
    uint16_t rand = random(65535);
    uint16_t f1 = scratch[(i * 3) >> 1] + ((scratch[(i >> 1) * 3 + 2] & 0x0F) << 8);
    3ebc:	83 54       	subi	r24, 0x43	; 67
    3ebe:	90 45       	sbci	r25, 0x50	; 80
    3ec0:	96 95       	lsr	r25
    3ec2:	87 95       	ror	r24
    3ec4:	93 01       	movw	r18, r6
    3ec6:	36 95       	lsr	r19
    3ec8:	27 95       	ror	r18
    3eca:	f9 01       	movw	r30, r18
    3ecc:	ee 0f       	add	r30, r30
    3ece:	ff 1f       	adc	r31, r31
    3ed0:	e2 0f       	add	r30, r18
    3ed2:	f3 1f       	adc	r31, r19
    3ed4:	9f 01       	movw	r18, r30
    3ed6:	2b 57       	subi	r18, 0x7B	; 123
    3ed8:	3e 4b       	sbci	r19, 0xBE	; 190
    3eda:	2a 8b       	std	Y+18, r18	; 0x12
    3edc:	3b 8b       	std	Y+19, r19	; 0x13
    3ede:	f9 01       	movw	r30, r18
    3ee0:	e0 80       	ld	r14, Z
    3ee2:	f1 2c       	mov	r15, r1
    3ee4:	1e 2d       	mov	r17, r14
    3ee6:	00 27       	eor	r16, r16
    3ee8:	00 27       	eor	r16, r16
    3eea:	1f 70       	andi	r17, 0x0F	; 15
    3eec:	dc 01       	movw	r26, r24
    3eee:	ad 57       	subi	r26, 0x7D	; 125
    3ef0:	be 4b       	sbci	r27, 0xBE	; 190
    3ef2:	2c 91       	ld	r18, X
    3ef4:	02 0f       	add	r16, r18
    3ef6:	11 1d       	adc	r17, r1
    3ef8:	f4 e0       	ldi	r31, 0x04	; 4
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:761
    uint16_t f2 = scratch[1 + ((i * 3) >> 1)] + ((scratch[(i >> 1) * 3 + 2] & 0xF0) << 4);
    3efa:	ee 0c       	add	r14, r14
    3efc:	ff 1c       	adc	r15, r15
    3efe:	fa 95       	dec	r31
    3f00:	e1 f7       	brne	.-8      	; 0x3efa <main+0x1114>
    3f02:	ee 24       	eor	r14, r14
    3f04:	ff e0       	ldi	r31, 0x0F	; 15
    3f06:	ff 22       	and	r15, r31
    3f08:	8c 57       	subi	r24, 0x7C	; 124
    3f0a:	9e 4b       	sbci	r25, 0xBE	; 190
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	20 81       	ld	r18, Z
    3f10:	e2 0e       	add	r14, r18
    3f12:	f1 1c       	adc	r15, r1
    3f14:	86 16       	cp	r8, r22
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:762
    if ((byte)rand > randinc) {
    3f16:	08 f0       	brcs	.+2      	; 0x3f1a <main+0x1134>
    3f18:	4b c0       	rjmp	.+150    	; 0x3fb0 <main+0x11ca>
    3f1a:	0f 5f       	subi	r16, 0xFF	; 255
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:763
      f1++;
    3f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f1e:	a0 16       	cp	r10, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:764
      if (f1 > len) {
    3f20:	b1 06       	cpc	r11, r17
    3f22:	08 f4       	brcc	.+2      	; 0x3f26 <main+0x1140>
    3f24:	50 c0       	rjmp	.+160    	; 0x3fc6 <main+0x11e0>
    3f26:	7c 87       	std	Y+12, r23	; 0x0c
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:773
      f1--;
      if (f1 > len) {
        f1 = len;
      }
    }
    rand = rand >> 8;
    3f28:	1d 86       	std	Y+13, r1	; 0x0d
    3f2a:	2c 85       	ldd	r18, Y+12	; 0x0c
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:774
    if (rand > randinc) {
    3f2c:	3d 85       	ldd	r19, Y+13	; 0x0d
    3f2e:	4e 85       	ldd	r20, Y+14	; 0x0e
    3f30:	5f 85       	ldd	r21, Y+15	; 0x0f
    3f32:	42 17       	cp	r20, r18
    3f34:	53 07       	cpc	r21, r19
    3f36:	08 f0       	brcs	.+2      	; 0x3f3a <main+0x1154>
    3f38:	49 c0       	rjmp	.+146    	; 0x3fcc <main+0x11e6>
    3f3a:	5f ef       	ldi	r21, 0xFF	; 255
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:775
      f2++;
    3f3c:	e5 1a       	sub	r14, r21
    3f3e:	f5 0a       	sbc	r15, r21
    3f40:	ae 14       	cp	r10, r14
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:776
      if (f2 > len) {
    3f42:	bf 04       	cpc	r11, r15
    3f44:	08 f4       	brcc	.+2      	; 0x3f48 <main+0x1162>
    3f46:	53 c0       	rjmp	.+166    	; 0x3fee <main+0x1208>
    3f48:	0c 93       	st	X, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:785
      f2--;
      if (f2 > len) {
        f2 = len;
      }
    }
    scratch[(i * 3) >> 1] = f1 & 0xFF;
    3f4a:	fc 01       	movw	r30, r24
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:786
    scratch[1 + ((i * 3) >> 1)] = f2 & 0xFF;
    3f4c:	e0 82       	st	Z, r14
    3f4e:	81 2f       	mov	r24, r17
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:787
    scratch[(i >> 1) * 3 + 2] = (f1 >> 8) & ((f2 >> 4) & 0xF0);
    3f50:	80 7f       	andi	r24, 0xF0	; 240
    3f52:	97 01       	movw	r18, r14
    3f54:	94 e0       	ldi	r25, 0x04	; 4
    3f56:	36 95       	lsr	r19
    3f58:	27 95       	ror	r18
    3f5a:	9a 95       	dec	r25
    3f5c:	e1 f7       	brne	.-8      	; 0x3f56 <main+0x1170>
    3f5e:	82 23       	and	r24, r18
    3f60:	ea 89       	ldd	r30, Y+18	; 0x12
    3f62:	fb 89       	ldd	r31, Y+19	; 0x13
    3f64:	80 83       	st	Z, r24
    3f66:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:788
    getDrift2Colors(&pixels[i * 3], &pixels[i * 3] + 1, &pixels[i * 3] + 2, f1);
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	a6 01       	movw	r20, r12
    3f6c:	4e 5f       	subi	r20, 0xFE	; 254
    3f6e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f70:	b6 01       	movw	r22, r12
    3f72:	6f 5f       	subi	r22, 0xFF	; 255
    3f74:	7f 4f       	sbci	r23, 0xFF	; 255
    3f76:	c6 01       	movw	r24, r12
    3f78:	0e 94 af 08 	call	0x115e	; 0x115e <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>
    3f7c:	87 01       	movw	r16, r14
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:789
    getDrift2Colors(&pixels[i * 3] + 3, &pixels[i * 3] + 4, &pixels[i * 3] + 5, f2);
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	a6 01       	movw	r20, r12
    3f84:	4b 5f       	subi	r20, 0xFB	; 251
    3f86:	5f 4f       	sbci	r21, 0xFF	; 255
    3f88:	b6 01       	movw	r22, r12
    3f8a:	6c 5f       	subi	r22, 0xFC	; 252
    3f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f8e:	c6 01       	movw	r24, r12
    3f90:	03 96       	adiw	r24, 0x03	; 3
    3f92:	0e 94 af 08 	call	0x115e	; 0x115e <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>
    3f96:	f2 e0       	ldi	r31, 0x02	; 2
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:758
void updatePatternDrift2() {
  byte driftchance = 16 + currentValueRight[0] * 10;
  byte randinc = 255 - driftchance;
  byte randdec = driftchance;
  uint16_t len = (pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getDwellFrames() + getTransitionFrames()));
  for (uint16_t i = 0; i < LENGTH; i += 2) {
    3f98:	6f 0e       	add	r6, r31
    3f9a:	71 1c       	adc	r7, r1
    3f9c:	26 e0       	ldi	r18, 0x06	; 6
    3f9e:	c2 0e       	add	r12, r18
    3fa0:	d1 1c       	adc	r13, r1
    3fa2:	30 eb       	ldi	r19, 0xB0	; 176
    3fa4:	63 16       	cp	r6, r19
    3fa6:	34 e0       	ldi	r19, 0x04	; 4
    3fa8:	73 06       	cpc	r7, r19
    3faa:	09 f0       	breq	.+2      	; 0x3fae <main+0x11c8>
    3fac:	80 cf       	rjmp	.-256    	; 0x3eae <main+0x10c8>
    3fae:	bf ca       	rjmp	.-2690   	; 0x352e <main+0x748>
    3fb0:	69 15       	cp	r22, r9
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:767
    if ((byte)rand > randinc) {
      f1++;
      if (f1 > len) {
        f1 = 0;
      }
    } else if ((byte)rand < randdec) {
    3fb2:	08 f0       	brcs	.+2      	; 0x3fb6 <main+0x11d0>
    3fb4:	b8 cf       	rjmp	.-144    	; 0x3f26 <main+0x1140>
    3fb6:	01 50       	subi	r16, 0x01	; 1
    3fb8:	11 09       	sbc	r17, r1
    3fba:	a0 16       	cp	r10, r16
    3fbc:	b1 06       	cpc	r11, r17
    3fbe:	08 f0       	brcs	.+2      	; 0x3fc2 <main+0x11dc>
    3fc0:	b2 cf       	rjmp	.-156    	; 0x3f26 <main+0x1140>
    3fc2:	85 01       	movw	r16, r10
    3fc4:	b0 cf       	rjmp	.-160    	; 0x3f26 <main+0x1140>
main():
    3fc6:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:765
    uint16_t f1 = scratch[(i * 3) >> 1] + ((scratch[(i >> 1) * 3 + 2] & 0x0F) << 8);
    uint16_t f2 = scratch[1 + ((i * 3) >> 1)] + ((scratch[(i >> 1) * 3 + 2] & 0xF0) << 4);
    if ((byte)rand > randinc) {
      f1++;
      if (f1 > len) {
        f1 = 0;
    3fc8:	00 e0       	ldi	r16, 0x00	; 0
    3fca:	ad cf       	rjmp	.-166    	; 0x3f26 <main+0x1140>
updatePatternDrift2():
    3fcc:	ec 85       	ldd	r30, Y+12	; 0x0c
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:779
    if (rand > randinc) {
      f2++;
      if (f2 > len) {
        f2 = 0;
      }
    } else if (rand < randdec) {
    3fce:	fd 85       	ldd	r31, Y+13	; 0x0d
    3fd0:	28 89       	ldd	r18, Y+16	; 0x10
    3fd2:	39 89       	ldd	r19, Y+17	; 0x11
    3fd4:	e2 17       	cp	r30, r18
    3fd6:	f3 07       	cpc	r31, r19
    3fd8:	08 f0       	brcs	.+2      	; 0x3fdc <main+0x11f6>
    3fda:	b6 cf       	rjmp	.-148    	; 0x3f48 <main+0x1162>
    3fdc:	31 e0       	ldi	r19, 0x01	; 1
    3fde:	e3 1a       	sub	r14, r19
    3fe0:	f1 08       	sbc	r15, r1
    3fe2:	ae 14       	cp	r10, r14
    3fe4:	bf 04       	cpc	r11, r15
    3fe6:	08 f0       	brcs	.+2      	; 0x3fea <main+0x1204>
    3fe8:	af cf       	rjmp	.-162    	; 0x3f48 <main+0x1162>
    3fea:	75 01       	movw	r14, r10
    3fec:	ad cf       	rjmp	.-166    	; 0x3f48 <main+0x1162>
main():
    3fee:	f1 2c       	mov	r15, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:777
    }
    rand = rand >> 8;
    if (rand > randinc) {
      f2++;
      if (f2 > len) {
        f2 = 0;
    3ff0:	e1 2c       	mov	r14, r1
    3ff2:	aa cf       	rjmp	.-172    	; 0x3f48 <main+0x1162>
updatePattern():
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:616
  } else if (currentMode == 9) {
    updatePatternFade2();
  } else if (currentMode == 10) {
    updatePatternDrift2();
  } else {
    setMode(0);
    3ff6:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <setMode(unsigned char)>
    3ffa:	99 ca       	rjmp	.-2766   	; 0x352e <main+0x748>
loop():
    3ffc:	0e 94 be 07 	call	0xf7c	; 0xf7c <millis>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:263
  if (!updated) {
    digitalWriteFast(INDICATE1, HIGH);
    updatePattern();
    digitalWriteFast(INDICATE1, LOW);
    updated = 1;
  } else if (millis() - lastFrameAt > getFrameDelay()) {
    4000:	c0 90 a7 4f 	lds	r12, 0x4FA7	; 0x804fa7 <lastFrameAt>
    4004:	d0 90 a8 4f 	lds	r13, 0x4FA8	; 0x804fa8 <lastFrameAt+0x1>
    4008:	e0 90 a9 4f 	lds	r14, 0x4FA9	; 0x804fa9 <lastFrameAt+0x2>
    400c:	f0 90 aa 4f 	lds	r15, 0x4FAA	; 0x804faa <lastFrameAt+0x3>
    4010:	ab 01       	movw	r20, r22
    4012:	bc 01       	movw	r22, r24
    4014:	4c 19       	sub	r20, r12
    4016:	5d 09       	sbc	r21, r13
    4018:	6e 09       	sbc	r22, r14
    401a:	7f 09       	sbc	r23, r15
main():
    401c:	80 e5       	ldi	r24, 0x50	; 80
getFrameDelay():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:274
  }
}

byte getFrameDelay() {
  if (currentMode == 1 || currentMode == 0) {
    return 80;
    401e:	02 30       	cpi	r16, 0x02	; 2
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:273
    digitalWriteFast(INDICATE0, LOW);
  }
}

byte getFrameDelay() {
  if (currentMode == 1 || currentMode == 0) {
    4020:	70 f0       	brcs	.+28     	; 0x403e <__DATA_REGION_LENGTH__+0x3e>
    4022:	03 30       	cpi	r16, 0x03	; 3
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:275
    return 80;
  } else if (currentMode == 3) {
    4024:	09 f0       	breq	.+2      	; 0x4028 <__DATA_REGION_LENGTH__+0x28>
    4026:	8f c0       	rjmp	.+286    	; 0x4146 <nextbyte24+0x2e>
    4028:	e3 e7       	ldi	r30, 0x73	; 115
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:276
    return 30 + 10 * (pgm_read_byte_near(&maxValueRight[currentMode][0]) - currentValueRight[0]);
    402a:	f9 e0       	ldi	r31, 0x09	; 9
    402c:	84 91       	lpm	r24, Z
    402e:	90 91 9f 4f 	lds	r25, 0x4F9F	; 0x804f9f <currentValueRight>
    4032:	89 1b       	sub	r24, r25
    4034:	9a e0       	ldi	r25, 0x0A	; 10
    4036:	89 9f       	mul	r24, r25
    4038:	80 2d       	mov	r24, r0
    403a:	11 24       	eor	r1, r1
    403c:	82 5e       	subi	r24, 0xE2	; 226
loop():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:278
  }
  return 30 + 20 * (pgm_read_byte_near(&maxValueRight[currentMode][0]) - currentValueRight[0]);
    403e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:263
  if (!updated) {
    digitalWriteFast(INDICATE1, HIGH);
    updatePattern();
    digitalWriteFast(INDICATE1, LOW);
    updated = 1;
  } else if (millis() - lastFrameAt > getFrameDelay()) {
    4040:	b0 e0       	ldi	r27, 0x00	; 0
    4042:	a0 e0       	ldi	r26, 0x00	; 0
    4044:	84 17       	cp	r24, r20
    4046:	95 07       	cpc	r25, r21
    4048:	a6 07       	cpc	r26, r22
    404a:	b7 07       	cpc	r27, r23
    404c:	08 f0       	brcs	.+2      	; 0x4050 <__DATA_REGION_LENGTH__+0x50>
    404e:	b7 c8       	rjmp	.-3730   	; 0x31be <main+0x3d8>
    4050:	0e 94 be 07 	call	0xf7c	; 0xf7c <millis>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:264
    lastFrameAt = millis();
    4054:	60 93 a7 4f 	sts	0x4FA7, r22	; 0x804fa7 <lastFrameAt>
    4058:	70 93 a8 4f 	sts	0x4FA8, r23	; 0x804fa8 <lastFrameAt+0x1>
    405c:	80 93 a9 4f 	sts	0x4FA9, r24	; 0x804fa9 <lastFrameAt+0x2>
    4060:	90 93 aa 4f 	sts	0x4FAA, r25	; 0x804faa <lastFrameAt+0x3>
digitalWriteFast():
    4064:	a8 9a       	sbi	0x15, 0	; 21
loop():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:448
  else if (val == CHANGE)
    vport->IN |= mask;
  else // HIGH
    vport->OUT |= mask;
    4066:	10 92 ab 4f 	sts	0x4FAB, r1	; 0x804fab <loop::updated>
show():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:266
    digitalWriteFast(INDICATE0, HIGH);
    updated = 0;
    406a:	80 91 59 5e 	lds	r24, 0x5E59	; 0x805e59 <leds+0x6>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:76
}

// *INDENT-OFF*   astyle don't like assembly
void tinyNeoPixel::show(void) {

  if ((!pixels) || pin >= NUM_DIGITAL_PINS)  {
    406e:	90 91 5a 5e 	lds	r25, 0x5E5A	; 0x805e5a <leds+0x7>
    4072:	89 2b       	or	r24, r25
    4074:	09 f4       	brne	.+2      	; 0x4078 <__DATA_REGION_LENGTH__+0x78>
    4076:	65 c0       	rjmp	.+202    	; 0x4142 <nextbyte24+0x2a>
    4078:	80 91 57 5e 	lds	r24, 0x5E57	; 0x805e57 <leds+0x4>
    407c:	89 32       	cpi	r24, 0x29	; 41
    407e:	0c f0       	brlt	.+2      	; 0x4082 <__DATA_REGION_LENGTH__+0x82>
    4080:	60 c0       	rjmp	.+192    	; 0x4142 <nextbyte24+0x2a>
_ZN12tinyNeoPixel7canShowEv.isra.0():
    4082:	0e 94 49 07 	call	0xe92	; 0xe92 <micros>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.h:298
             function instead.
  */
  static uint32_t gamma32(uint32_t x);

  #if (!defined(MILLIS_USE_TIMERNONE) && !defined(MILLIS_USE_TIMERRTC) && !defined(MILLIS_USE_TIMERRTC_XTAL) && !defined(MILLIS_USE_TIMERRTC_XOSC))
    inline bool canShow(void) { return (micros() - endTime) >= 50L; }
    4086:	00 91 5f 5e 	lds	r16, 0x5E5F	; 0x805e5f <leds+0xc>
    408a:	10 91 60 5e 	lds	r17, 0x5E60	; 0x805e60 <leds+0xd>
    408e:	20 91 61 5e 	lds	r18, 0x5E61	; 0x805e61 <leds+0xe>
    4092:	30 91 62 5e 	lds	r19, 0x5E62	; 0x805e62 <leds+0xf>
    4096:	60 1b       	sub	r22, r16
    4098:	71 0b       	sbc	r23, r17
    409a:	82 0b       	sbc	r24, r18
    409c:	93 0b       	sbc	r25, r19
show():
    409e:	62 33       	cpi	r22, 0x32	; 50
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:86
  // put a delay at the end of the function, the ending time is noted and
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  while (!canShow());
    40a0:	71 05       	cpc	r23, r1
    40a2:	81 05       	cpc	r24, r1
    40a4:	91 05       	cpc	r25, r1
    40a6:	68 f3       	brcs	.-38     	; 0x4082 <__DATA_REGION_LENGTH__+0x82>
    40a8:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:101
  // while data is being issued to the LEDs, so no other code will be
  // accessing the PORT.  The code takes an initial 'snapshot' of the PORT
  // state, computes 'pin high' and 'pin low' values, and writes these back
  // to the PORT register as needed.

  noInterrupts(); // Need 100% focus on instruction timing
    40aa:	80 91 55 5e 	lds	r24, 0x5E55	; 0x805e55 <leds+0x2>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:111
  // Dx-series parts. This is by no means intended to imply that they will
  // run at those speeds, only that - if they do - you can control WS2812s
  // with them.

  volatile uint16_t
    i   = numBytes; // Loop counter
    40ae:	90 91 56 5e 	lds	r25, 0x5E56	; 0x805e56 <leds+0x3>
    40b2:	89 83       	std	Y+1, r24	; 0x01
    40b4:	9a 83       	std	Y+2, r25	; 0x02
    40b6:	a0 91 59 5e 	lds	r26, 0x5E59	; 0x805e59 <leds+0x6>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:113
  volatile uint8_t
   *ptr = pixels,   // Pointer to next byte
    40ba:	b0 91 5a 5e 	lds	r27, 0x5E5A	; 0x805e5a <leds+0x7>
    40be:	fd 01       	movw	r30, r26
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:114
    b   = *ptr++,   // Current byte value
    40c0:	31 96       	adiw	r30, 0x01	; 1
    40c2:	8c 91       	ld	r24, X
    40c4:	89 87       	std	Y+9, r24	; 0x09
    40c6:	a0 91 63 5e 	lds	r26, 0x5E63	; 0x805e63 <leds+0x10>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:485
    // 30 inst. clocks per bit: HHHHHHHxxxxxxxxLLLLLLLLLL
    // ST instructions:         ^      ^       ^       (T=0,9,18)

    volatile uint8_t next, bit;

    hi   = *port |  pinMask;
    40ca:	b0 91 64 5e 	lds	r27, 0x5E64	; 0x805e64 <leds+0x11>
    40ce:	9c 91       	ld	r25, X
    40d0:	80 91 65 5e 	lds	r24, 0x5E65	; 0x805e65 <leds+0x12>
    40d4:	98 2b       	or	r25, r24
    40d6:	98 87       	std	Y+8, r25	; 0x08
    40d8:	9c 91       	ld	r25, X
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:486
    lo   = *port & ~pinMask;
    40da:	80 95       	com	r24
    40dc:	89 23       	and	r24, r25
    40de:	8f 83       	std	Y+7, r24	; 0x07
    40e0:	8f 81       	ldd	r24, Y+7	; 0x07
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:487
    next = lo;
    40e2:	8e 83       	std	Y+6, r24	; 0x06
    40e4:	88 e0       	ldi	r24, 0x08	; 8
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:488
    bit  = 8;
    40e6:	8d 83       	std	Y+5, r24	; 0x05
    40e8:	58 85       	ldd	r21, Y+8	; 0x08
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:525
      [bit]   "+d" (bit),   /* euhm, no this can't be "any register" if you're gonna LDI to it. */
      [next]  "+r" (next),
      [count] "+w" (i)
    : [port]   "e" (port),  /* We're overwriting the SFR it's pointed at, not to the address of that register. */
      [hi]     "r" (hi),
      [lo]     "r" (lo));
    40ea:	6f 81       	ldd	r22, Y+7	; 0x07
    40ec:	49 85       	ldd	r20, Y+9	; 0x09
    40ee:	3d 81       	ldd	r19, Y+5	; 0x05
    40f0:	2e 81       	ldd	r18, Y+6	; 0x06
    40f2:	89 81       	ldd	r24, Y+1	; 0x01
    40f4:	9a 81       	ldd	r25, Y+2	; 0x02

000040f6 <head24>:
    40f6:	00 c0       	rjmp	.+0      	; 0x40f8 <head24+0x2>
    40f8:	5c 93       	st	X, r21
    40fa:	47 fd       	sbrc	r20, 7
    40fc:	25 2f       	mov	r18, r21
    40fe:	44 1f       	adc	r20, r20
    4100:	3a 95       	dec	r19
    4102:	00 c0       	rjmp	.+0      	; 0x4104 <head24+0xe>
    4104:	2c 93       	st	X, r18
    4106:	00 c0       	rjmp	.+0      	; 0x4108 <head24+0x12>
    4108:	26 2f       	mov	r18, r22
    410a:	05 d0       	rcall	.+10     	; 0x4116 <smallerdelay24>
    410c:	6c 93       	st	X, r22
    410e:	21 f0       	breq	.+8      	; 0x4118 <nextbyte24>
    4110:	01 d0       	rcall	.+2      	; 0x4114 <seconddelay24>
    4112:	f1 cf       	rjmp	.-30     	; 0x40f6 <head24>

00004114 <seconddelay24>:
    4114:	00 c0       	rjmp	.+0      	; 0x4116 <smallerdelay24>

00004116 <smallerdelay24>:
    4116:	08 95       	ret

00004118 <nextbyte24>:
    4118:	38 e0       	ldi	r19, 0x08	; 8
    411a:	41 91       	ld	r20, Z+
    411c:	00 c0       	rjmp	.+0      	; 0x411e <nextbyte24+0x6>
    411e:	01 97       	sbiw	r24, 0x01	; 1
    4120:	51 f7       	brne	.-44     	; 0x40f6 <head24>
    4122:	49 87       	std	Y+9, r20	; 0x09
    4124:	3d 83       	std	Y+5, r19	; 0x05
    4126:	2e 83       	std	Y+6, r18	; 0x06
    4128:	89 83       	std	Y+1, r24	; 0x01
    412a:	9a 83       	std	Y+2, r25	; 0x02
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:815
#endif

  // END AVR ----------------------------------------------------------------


  interrupts();
    412c:	78 94       	sei
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:817
  #if (!defined(MILLIS_USE_TIMERNONE) && !defined(MILLIS_USE_TIMERRTC) && !defined(MILLIS_USE_TIMERRTC_XTAL) && !defined(MILLIS_USE_TIMERRTC_XOSC))
    endTime = micros();
    412e:	0e 94 49 07 	call	0xe92	; 0xe92 <micros>
    4132:	60 93 5f 5e 	sts	0x5E5F, r22	; 0x805e5f <leds+0xc>
    4136:	70 93 60 5e 	sts	0x5E60, r23	; 0x805e60 <leds+0xd>
    413a:	80 93 61 5e 	sts	0x5E61, r24	; 0x805e61 <leds+0xe>
    413e:	90 93 62 5e 	sts	0x5E62, r25	; 0x805e62 <leds+0xf>
digitalWriteFast():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:444
    vport->OUT &= ~mask;
  else // CHANGE
    vport->IN = mask;
*/
  if (val == LOW)
    vport->OUT &= ~mask;
    4142:	a8 98       	cbi	0x15, 0	; 21
    4144:	3c c8       	rjmp	.-3976   	; 0x31be <main+0x3d8>
getFrameDelay():
    4146:	28 e0       	ldi	r18, 0x08	; 8
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:278
  if (currentMode == 1 || currentMode == 0) {
    return 80;
  } else if (currentMode == 3) {
    return 30 + 10 * (pgm_read_byte_near(&maxValueRight[currentMode][0]) - currentValueRight[0]);
  }
  return 30 + 20 * (pgm_read_byte_near(&maxValueRight[currentMode][0]) - currentValueRight[0]);
    4148:	02 9f       	mul	r16, r18
    414a:	f0 01       	movw	r30, r0
    414c:	11 24       	eor	r1, r1
    414e:	e5 5a       	subi	r30, 0xA5	; 165
    4150:	f6 4f       	sbci	r31, 0xF6	; 246
    4152:	84 91       	lpm	r24, Z
    4154:	90 91 9f 4f 	lds	r25, 0x4F9F	; 0x804f9f <currentValueRight>
    4158:	e8 2f       	mov	r30, r24
    415a:	e9 1b       	sub	r30, r25
    415c:	84 e1       	ldi	r24, 0x14	; 20
    415e:	e8 9f       	mul	r30, r24
    4160:	80 2d       	mov	r24, r0
    4162:	11 24       	eor	r1, r1
    4164:	6b cf       	rjmp	.-298    	; 0x403c <__DATA_REGION_LENGTH__+0x3c>
handleUI():
    4166:	0e 94 be 07 	call	0xf7c	; 0xf7c <millis>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:431
            lcd.print(F("Saved mode"));
            lcd.setCursor(5, 1);
            lcd.print(F("cleared"));
            delay(1000);
            UIChanged = 7;
          } else if (lastPressAt && millis() - lastPressAt > 3000) {
    416a:	68 19       	sub	r22, r8
    416c:	79 09       	sbc	r23, r9
    416e:	8a 09       	sbc	r24, r10
    4170:	9b 09       	sbc	r25, r11
    4172:	69 3b       	cpi	r22, 0xB9	; 185
    4174:	7b 40       	sbci	r23, 0x0B	; 11
    4176:	81 05       	cpc	r24, r1
    4178:	91 05       	cpc	r25, r1
    417a:	08 f4       	brcc	.+2      	; 0x417e <nextbyte24+0x66>
    417c:	4b c9       	rjmp	.-3434   	; 0x3414 <main+0x62e>
    417e:	60 91 07 40 	lds	r22, 0x4007	; 0x804007 <currentMode>
_ZN5EERefC2Ej():
    4182:	4f e0       	ldi	r20, 0x0F	; 15
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:58


struct EERef {

  EERef(const INDEXDATATYPE index)
    : index(index)                 {}
    4184:	50 e0       	ldi	r21, 0x00	; 0
    4186:	4b 83       	std	Y+3, r20	; 0x03
    4188:	5c 83       	std	Y+4, r21	; 0x04
_ZN11EEPROMClass5writeEjh.isra.5():
    418a:	ce 01       	movw	r24, r28
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:234
  }
  uint8_t read(const INDEXDATATYPE idx)              {
    return EERef(idx);
  }
  void write(INDEXDATATYPE idx, uint8_t val)   {
    (EERef(idx)) = val;
    418c:	03 96       	adiw	r24, 0x03	; 3
    418e:	0e 94 b6 09 	call	0x136c	; 0x136c <EERef::operator=(unsigned char)>
    4192:	f1 2c       	mov	r15, r1
    4194:	e1 2c       	mov	r14, r1
saveMode():
    4196:	f7 01       	movw	r30, r14
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:372


void saveMode() {
  EEPROM.write(0x0F, currentMode);
  for (byte i = 0; i < 8; i++) {
    EEPROM.write(0x10 + i, currentValueLeft[i]);
    4198:	e9 56       	subi	r30, 0x69	; 105
    419a:	f0 4b       	sbci	r31, 0xB0	; 176
    419c:	60 81       	ld	r22, Z
_ZN5EERefC2Ej():
    419e:	c7 01       	movw	r24, r14
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:58


struct EERef {

  EERef(const INDEXDATATYPE index)
    : index(index)                 {}
    41a0:	40 96       	adiw	r24, 0x10	; 16
    41a2:	8b 83       	std	Y+3, r24	; 0x03
    41a4:	9c 83       	std	Y+4, r25	; 0x04
_ZN11EEPROMClass5writeEjh.isra.5():
    41a6:	ce 01       	movw	r24, r28
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:234
  }
  uint8_t read(const INDEXDATATYPE idx)              {
    return EERef(idx);
  }
  void write(INDEXDATATYPE idx, uint8_t val)   {
    (EERef(idx)) = val;
    41a8:	03 96       	adiw	r24, 0x03	; 3
    41aa:	0e 94 b6 09 	call	0x136c	; 0x136c <EERef::operator=(unsigned char)>
saveMode():
    41ae:	f7 01       	movw	r30, r14
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:373
    EEPROM.write(0x18 + i, currentValueRight[i]);
    41b0:	e1 56       	subi	r30, 0x61	; 97
    41b2:	f0 4b       	sbci	r31, 0xB0	; 176
    41b4:	60 81       	ld	r22, Z
_ZN5EERefC2Ej():
    41b6:	c7 01       	movw	r24, r14
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:58


struct EERef {

  EERef(const INDEXDATATYPE index)
    : index(index)                 {}
    41b8:	48 96       	adiw	r24, 0x18	; 24
    41ba:	8b 83       	std	Y+3, r24	; 0x03
    41bc:	9c 83       	std	Y+4, r25	; 0x04
_ZN11EEPROMClass5writeEjh.isra.5():
    41be:	ce 01       	movw	r24, r28
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:234
  }
  uint8_t read(const INDEXDATATYPE idx)              {
    return EERef(idx);
  }
  void write(INDEXDATATYPE idx, uint8_t val)   {
    (EERef(idx)) = val;
    41c0:	03 96       	adiw	r24, 0x03	; 3
    41c2:	0e 94 b6 09 	call	0x136c	; 0x136c <EERef::operator=(unsigned char)>
    41c6:	5f ef       	ldi	r21, 0xFF	; 255
    41c8:	e5 1a       	sub	r14, r21
    41ca:	f5 0a       	sbc	r15, r21
saveMode():
    41cc:	68 e0       	ldi	r22, 0x08	; 8
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:371
}


void saveMode() {
  EEPROM.write(0x0F, currentMode);
  for (byte i = 0; i < 8; i++) {
    41ce:	e6 16       	cp	r14, r22
    41d0:	f1 04       	cpc	r15, r1
    41d2:	09 f7       	brne	.-62     	; 0x4196 <nextbyte24+0x7e>
handleUI():
    41d4:	0e 94 01 08 	call	0x1002	; 0x1002 <hd44780::clear() [clone .constprop.25]>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:433
            lcd.print(F("cleared"));
            delay(1000);
            UIChanged = 7;
          } else if (lastPressAt && millis() - lastPressAt > 3000) {
            saveMode();
            lcd.clear();
    41d8:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:434
            lcd.setCursor(3, 0);
    41da:	63 e0       	ldi	r22, 0x03	; 3
    41dc:	86 e6       	ldi	r24, 0x66	; 102
    41de:	9e e5       	ldi	r25, 0x5E	; 94
    41e0:	0e 94 05 08 	call	0x100a	; 0x100a <hd44780::setCursor(unsigned char, unsigned char)>
    41e4:	64 ec       	ldi	r22, 0xC4	; 196
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:435
            lcd.print(F("Mode Saved"));
    41e6:	76 e0       	ldi	r23, 0x06	; 6
    41e8:	09 c9       	rjmp	.-3566   	; 0x33fc <main+0x616>

000041ea <random_r>:
random_r():
    41ea:	8f 92       	push	r8
    41ec:	9f 92       	push	r9
    41ee:	af 92       	push	r10
    41f0:	bf 92       	push	r11
    41f2:	cf 92       	push	r12
    41f4:	df 92       	push	r13
    41f6:	ef 92       	push	r14
    41f8:	ff 92       	push	r15
    41fa:	cf 93       	push	r28
    41fc:	df 93       	push	r29
    41fe:	ec 01       	movw	r28, r24
    4200:	68 81       	ld	r22, Y
    4202:	79 81       	ldd	r23, Y+1	; 0x01
    4204:	8a 81       	ldd	r24, Y+2	; 0x02
    4206:	9b 81       	ldd	r25, Y+3	; 0x03
    4208:	61 15       	cp	r22, r1
    420a:	71 05       	cpc	r23, r1
    420c:	81 05       	cpc	r24, r1
    420e:	91 05       	cpc	r25, r1
    4210:	21 f4       	brne	.+8      	; 0x421a <random_r+0x30>
    4212:	64 e2       	ldi	r22, 0x24	; 36
    4214:	79 ed       	ldi	r23, 0xD9	; 217
    4216:	8b e5       	ldi	r24, 0x5B	; 91
    4218:	97 e0       	ldi	r25, 0x07	; 7
    421a:	2d e1       	ldi	r18, 0x1D	; 29
    421c:	33 ef       	ldi	r19, 0xF3	; 243
    421e:	41 e0       	ldi	r20, 0x01	; 1
    4220:	50 e0       	ldi	r21, 0x00	; 0
    4222:	81 d0       	rcall	.+258    	; 0x4326 <__divmodsi4>
    4224:	49 01       	movw	r8, r18
    4226:	5a 01       	movw	r10, r20
    4228:	9b 01       	movw	r18, r22
    422a:	ac 01       	movw	r20, r24
    422c:	a7 ea       	ldi	r26, 0xA7	; 167
    422e:	b1 e4       	ldi	r27, 0x41	; 65
    4230:	96 d0       	rcall	.+300    	; 0x435e <__muluhisi3>
    4232:	6b 01       	movw	r12, r22
    4234:	7c 01       	movw	r14, r24
    4236:	ac ee       	ldi	r26, 0xEC	; 236
    4238:	b4 ef       	ldi	r27, 0xF4	; 244
    423a:	a5 01       	movw	r20, r10
    423c:	94 01       	movw	r18, r8
    423e:	9b d0       	rcall	.+310    	; 0x4376 <__mulohisi3>
    4240:	c6 0e       	add	r12, r22
    4242:	d7 1e       	adc	r13, r23
    4244:	e8 1e       	adc	r14, r24
    4246:	f9 1e       	adc	r15, r25
    4248:	f7 fe       	sbrs	r15, 7
    424a:	06 c0       	rjmp	.+12     	; 0x4258 <random_r+0x6e>
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	c8 1a       	sub	r12, r24
    4250:	d1 08       	sbc	r13, r1
    4252:	e1 08       	sbc	r14, r1
    4254:	80 e8       	ldi	r24, 0x80	; 128
    4256:	f8 0a       	sbc	r15, r24
    4258:	c8 82       	st	Y, r12
    425a:	d9 82       	std	Y+1, r13	; 0x01
    425c:	ea 82       	std	Y+2, r14	; 0x02
    425e:	fb 82       	std	Y+3, r15	; 0x03
    4260:	c7 01       	movw	r24, r14
    4262:	b6 01       	movw	r22, r12
    4264:	9f 77       	andi	r25, 0x7F	; 127
    4266:	df 91       	pop	r29
    4268:	cf 91       	pop	r28
    426a:	ff 90       	pop	r15
    426c:	ef 90       	pop	r14
    426e:	df 90       	pop	r13
    4270:	cf 90       	pop	r12
    4272:	bf 90       	pop	r11
    4274:	af 90       	pop	r10
    4276:	9f 90       	pop	r9
    4278:	8f 90       	pop	r8
    427a:	08 95       	ret

0000427c <random>:
random():
    427c:	8f 92       	push	r8
    427e:	9f 92       	push	r9
    4280:	af 92       	push	r10
    4282:	bf 92       	push	r11
    4284:	cf 92       	push	r12
    4286:	df 92       	push	r13
    4288:	ef 92       	push	r14
    428a:	ff 92       	push	r15
    428c:	60 91 08 40 	lds	r22, 0x4008	; 0x804008 <next>
    4290:	70 91 09 40 	lds	r23, 0x4009	; 0x804009 <next+0x1>
    4294:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <next+0x2>
    4298:	90 91 0b 40 	lds	r25, 0x400B	; 0x80400b <next+0x3>
    429c:	61 15       	cp	r22, r1
    429e:	71 05       	cpc	r23, r1
    42a0:	81 05       	cpc	r24, r1
    42a2:	91 05       	cpc	r25, r1
    42a4:	21 f4       	brne	.+8      	; 0x42ae <random+0x32>
    42a6:	64 e2       	ldi	r22, 0x24	; 36
    42a8:	79 ed       	ldi	r23, 0xD9	; 217
    42aa:	8b e5       	ldi	r24, 0x5B	; 91
    42ac:	97 e0       	ldi	r25, 0x07	; 7
    42ae:	2d e1       	ldi	r18, 0x1D	; 29
    42b0:	33 ef       	ldi	r19, 0xF3	; 243
    42b2:	41 e0       	ldi	r20, 0x01	; 1
    42b4:	50 e0       	ldi	r21, 0x00	; 0
    42b6:	37 d0       	rcall	.+110    	; 0x4326 <__divmodsi4>
    42b8:	49 01       	movw	r8, r18
    42ba:	5a 01       	movw	r10, r20
    42bc:	9b 01       	movw	r18, r22
    42be:	ac 01       	movw	r20, r24
    42c0:	a7 ea       	ldi	r26, 0xA7	; 167
    42c2:	b1 e4       	ldi	r27, 0x41	; 65
    42c4:	4c d0       	rcall	.+152    	; 0x435e <__muluhisi3>
    42c6:	6b 01       	movw	r12, r22
    42c8:	7c 01       	movw	r14, r24
    42ca:	ac ee       	ldi	r26, 0xEC	; 236
    42cc:	b4 ef       	ldi	r27, 0xF4	; 244
    42ce:	a5 01       	movw	r20, r10
    42d0:	94 01       	movw	r18, r8
    42d2:	51 d0       	rcall	.+162    	; 0x4376 <__mulohisi3>
    42d4:	c6 0e       	add	r12, r22
    42d6:	d7 1e       	adc	r13, r23
    42d8:	e8 1e       	adc	r14, r24
    42da:	f9 1e       	adc	r15, r25
    42dc:	f7 fe       	sbrs	r15, 7
    42de:	06 c0       	rjmp	.+12     	; 0x42ec <random+0x70>
    42e0:	81 e0       	ldi	r24, 0x01	; 1
    42e2:	c8 1a       	sub	r12, r24
    42e4:	d1 08       	sbc	r13, r1
    42e6:	e1 08       	sbc	r14, r1
    42e8:	80 e8       	ldi	r24, 0x80	; 128
    42ea:	f8 0a       	sbc	r15, r24
    42ec:	c0 92 08 40 	sts	0x4008, r12	; 0x804008 <next>
    42f0:	d0 92 09 40 	sts	0x4009, r13	; 0x804009 <next+0x1>
    42f4:	e0 92 0a 40 	sts	0x400A, r14	; 0x80400a <next+0x2>
    42f8:	f0 92 0b 40 	sts	0x400B, r15	; 0x80400b <next+0x3>
    42fc:	c7 01       	movw	r24, r14
    42fe:	b6 01       	movw	r22, r12
    4300:	9f 77       	andi	r25, 0x7F	; 127
    4302:	ff 90       	pop	r15
    4304:	ef 90       	pop	r14
    4306:	df 90       	pop	r13
    4308:	cf 90       	pop	r12
    430a:	bf 90       	pop	r11
    430c:	af 90       	pop	r10
    430e:	9f 90       	pop	r9
    4310:	8f 90       	pop	r8
    4312:	08 95       	ret

00004314 <srandom>:
srandom():
    4314:	60 93 08 40 	sts	0x4008, r22	; 0x804008 <next>
    4318:	70 93 09 40 	sts	0x4009, r23	; 0x804009 <next+0x1>
    431c:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <next+0x2>
    4320:	90 93 0b 40 	sts	0x400B, r25	; 0x80400b <next+0x3>
    4324:	08 95       	ret

00004326 <__divmodsi4>:
__divmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    4326:	05 2e       	mov	r0, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    4328:	97 fb       	bst	r25, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    432a:	16 f4       	brtc	.+4      	; 0x4330 <__divmodsi4+0xa>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    432c:	00 94       	com	r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    432e:	0f d0       	rcall	.+30     	; 0x434e <__negsi2>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    4330:	57 fd       	sbrc	r21, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    4332:	05 d0       	rcall	.+10     	; 0x433e <__divmodsi4_neg2>
    4334:	24 d0       	rcall	.+72     	; 0x437e <__udivmodsi4>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    4336:	07 fc       	sbrc	r0, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    4338:	02 d0       	rcall	.+4      	; 0x433e <__divmodsi4_neg2>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    433a:	46 f4       	brtc	.+16     	; 0x434c <__divmodsi4_exit>
    433c:	08 c0       	rjmp	.+16     	; 0x434e <__negsi2>

0000433e <__divmodsi4_neg2>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    433e:	50 95       	com	r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    4340:	40 95       	com	r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    4342:	30 95       	com	r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    4344:	21 95       	neg	r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    4346:	3f 4f       	sbci	r19, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    4348:	4f 4f       	sbci	r20, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    434a:	5f 4f       	sbci	r21, 0xFF	; 255

0000434c <__divmodsi4_exit>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    434c:	08 95       	ret

0000434e <__negsi2>:
__negsi2():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    434e:	90 95       	com	r25
    4350:	80 95       	com	r24
    4352:	70 95       	com	r23
    4354:	61 95       	neg	r22
    4356:	7f 4f       	sbci	r23, 0xFF	; 255
    4358:	8f 4f       	sbci	r24, 0xFF	; 255
    435a:	9f 4f       	sbci	r25, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    435c:	08 95       	ret

0000435e <__muluhisi3>:
__muluhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    435e:	31 d0       	rcall	.+98     	; 0x43c2 <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    4360:	a5 9f       	mul	r26, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    4362:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    4364:	b4 9f       	mul	r27, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    4366:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    4368:	a4 9f       	mul	r26, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    436a:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    436c:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    436e:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    4370:	08 95       	ret

00004372 <__mulshisi3>:
__mulshisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    4372:	b7 ff       	sbrs	r27, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    4374:	f4 cf       	rjmp	.-24     	; 0x435e <__muluhisi3>

00004376 <__mulohisi3>:
__mulohisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    4376:	f3 df       	rcall	.-26     	; 0x435e <__muluhisi3>
    4378:	82 1b       	sub	r24, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    437a:	93 0b       	sbc	r25, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    437c:	08 95       	ret

0000437e <__udivmodsi4>:
__udivmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    437e:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    4380:	1a 2e       	mov	r1, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    4382:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    4384:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    4386:	fd 01       	movw	r30, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    4388:	0d c0       	rjmp	.+26     	; 0x43a4 <__udivmodsi4_ep>

0000438a <__udivmodsi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    438a:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    438c:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    438e:	ee 1f       	adc	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    4390:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    4392:	a2 17       	cp	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    4394:	b3 07       	cpc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    4396:	e4 07       	cpc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    4398:	f5 07       	cpc	r31, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    439a:	20 f0       	brcs	.+8      	; 0x43a4 <__udivmodsi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    439c:	a2 1b       	sub	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    439e:	b3 0b       	sbc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    43a0:	e4 0b       	sbc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    43a2:	f5 0b       	sbc	r31, r21

000043a4 <__udivmodsi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    43a4:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    43a6:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    43a8:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    43aa:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    43ac:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    43ae:	69 f7       	brne	.-38     	; 0x438a <__udivmodsi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    43b0:	60 95       	com	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    43b2:	70 95       	com	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    43b4:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    43b6:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    43b8:	9b 01       	movw	r18, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    43ba:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    43bc:	bd 01       	movw	r22, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    43be:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    43c0:	08 95       	ret

000043c2 <__umulhisi3>:
__umulhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    43c2:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    43c4:	b0 01       	movw	r22, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    43c6:	b3 9f       	mul	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    43c8:	c0 01       	movw	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    43ca:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    43cc:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    43ce:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    43d0:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    43d2:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    43d4:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    43d6:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    43d8:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    43da:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    43dc:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    43de:	08 95       	ret

000043e0 <__subsf3>:
__subsf3():
    43e0:	50 58       	subi	r21, 0x80	; 128

000043e2 <__addsf3>:
    43e2:	bb 27       	eor	r27, r27
    43e4:	aa 27       	eor	r26, r26
    43e6:	0e d0       	rcall	.+28     	; 0x4404 <__addsf3x>
    43e8:	70 c1       	rjmp	.+736    	; 0x46ca <__fp_round>
__addsf3():
    43ea:	61 d1       	rcall	.+706    	; 0x46ae <__fp_pscA>
    43ec:	30 f0       	brcs	.+12     	; 0x43fa <__addsf3+0x18>
    43ee:	66 d1       	rcall	.+716    	; 0x46bc <__fp_pscB>
    43f0:	20 f0       	brcs	.+8      	; 0x43fa <__addsf3+0x18>
    43f2:	31 f4       	brne	.+12     	; 0x4400 <__addsf3+0x1e>
    43f4:	9f 3f       	cpi	r25, 0xFF	; 255
    43f6:	11 f4       	brne	.+4      	; 0x43fc <__addsf3+0x1a>
    43f8:	1e f4       	brtc	.+6      	; 0x4400 <__addsf3+0x1e>
    43fa:	56 c1       	rjmp	.+684    	; 0x46a8 <__fp_nan>
    43fc:	0e f4       	brtc	.+2      	; 0x4400 <__addsf3+0x1e>
    43fe:	e0 95       	com	r30
    4400:	e7 fb       	bst	r30, 7
    4402:	4c c1       	rjmp	.+664    	; 0x469c <__fp_inf>

00004404 <__addsf3x>:
__addsf3x():
    4404:	e9 2f       	mov	r30, r25
    4406:	72 d1       	rcall	.+740    	; 0x46ec <__fp_split3>
    4408:	80 f3       	brcs	.-32     	; 0x43ea <__addsf3+0x8>
    440a:	ba 17       	cp	r27, r26
    440c:	62 07       	cpc	r22, r18
    440e:	73 07       	cpc	r23, r19
    4410:	84 07       	cpc	r24, r20
    4412:	95 07       	cpc	r25, r21
    4414:	18 f0       	brcs	.+6      	; 0x441c <__addsf3x+0x18>
    4416:	71 f4       	brne	.+28     	; 0x4434 <__addsf3x+0x30>
    4418:	9e f5       	brtc	.+102    	; 0x4480 <__addsf3x+0x7c>
    441a:	8a c1       	rjmp	.+788    	; 0x4730 <__fp_zero>
    441c:	0e f4       	brtc	.+2      	; 0x4420 <__addsf3x+0x1c>
    441e:	e0 95       	com	r30
    4420:	0b 2e       	mov	r0, r27
    4422:	ba 2f       	mov	r27, r26
    4424:	a0 2d       	mov	r26, r0
    4426:	0b 01       	movw	r0, r22
    4428:	b9 01       	movw	r22, r18
    442a:	90 01       	movw	r18, r0
    442c:	0c 01       	movw	r0, r24
    442e:	ca 01       	movw	r24, r20
    4430:	a0 01       	movw	r20, r0
    4432:	11 24       	eor	r1, r1
    4434:	ff 27       	eor	r31, r31
    4436:	59 1b       	sub	r21, r25
    4438:	99 f0       	breq	.+38     	; 0x4460 <__addsf3x+0x5c>
    443a:	59 3f       	cpi	r21, 0xF9	; 249
    443c:	50 f4       	brcc	.+20     	; 0x4452 <__addsf3x+0x4e>
    443e:	50 3e       	cpi	r21, 0xE0	; 224
    4440:	68 f1       	brcs	.+90     	; 0x449c <__addsf3x+0x98>
    4442:	1a 16       	cp	r1, r26
    4444:	f0 40       	sbci	r31, 0x00	; 0
    4446:	a2 2f       	mov	r26, r18
    4448:	23 2f       	mov	r18, r19
    444a:	34 2f       	mov	r19, r20
    444c:	44 27       	eor	r20, r20
    444e:	58 5f       	subi	r21, 0xF8	; 248
    4450:	f3 cf       	rjmp	.-26     	; 0x4438 <__addsf3x+0x34>
    4452:	46 95       	lsr	r20
    4454:	37 95       	ror	r19
    4456:	27 95       	ror	r18
    4458:	a7 95       	ror	r26
    445a:	f0 40       	sbci	r31, 0x00	; 0
    445c:	53 95       	inc	r21
    445e:	c9 f7       	brne	.-14     	; 0x4452 <__addsf3x+0x4e>
    4460:	7e f4       	brtc	.+30     	; 0x4480 <__addsf3x+0x7c>
    4462:	1f 16       	cp	r1, r31
    4464:	ba 0b       	sbc	r27, r26
    4466:	62 0b       	sbc	r22, r18
    4468:	73 0b       	sbc	r23, r19
    446a:	84 0b       	sbc	r24, r20
    446c:	ba f0       	brmi	.+46     	; 0x449c <__addsf3x+0x98>
    446e:	91 50       	subi	r25, 0x01	; 1
    4470:	a1 f0       	breq	.+40     	; 0x449a <__addsf3x+0x96>
    4472:	ff 0f       	add	r31, r31
    4474:	bb 1f       	adc	r27, r27
    4476:	66 1f       	adc	r22, r22
    4478:	77 1f       	adc	r23, r23
    447a:	88 1f       	adc	r24, r24
    447c:	c2 f7       	brpl	.-16     	; 0x446e <__addsf3x+0x6a>
    447e:	0e c0       	rjmp	.+28     	; 0x449c <__addsf3x+0x98>
    4480:	ba 0f       	add	r27, r26
    4482:	62 1f       	adc	r22, r18
    4484:	73 1f       	adc	r23, r19
    4486:	84 1f       	adc	r24, r20
    4488:	48 f4       	brcc	.+18     	; 0x449c <__addsf3x+0x98>
    448a:	87 95       	ror	r24
    448c:	77 95       	ror	r23
    448e:	67 95       	ror	r22
    4490:	b7 95       	ror	r27
    4492:	f7 95       	ror	r31
    4494:	9e 3f       	cpi	r25, 0xFE	; 254
    4496:	08 f0       	brcs	.+2      	; 0x449a <__addsf3x+0x96>
    4498:	b3 cf       	rjmp	.-154    	; 0x4400 <__addsf3+0x1e>
    449a:	93 95       	inc	r25
    449c:	88 0f       	add	r24, r24
    449e:	08 f0       	brcs	.+2      	; 0x44a2 <__addsf3x+0x9e>
    44a0:	99 27       	eor	r25, r25
    44a2:	ee 0f       	add	r30, r30
    44a4:	97 95       	ror	r25
    44a6:	87 95       	ror	r24
    44a8:	08 95       	ret

000044aa <__cmpsf2>:
    44aa:	d4 d0       	rcall	.+424    	; 0x4654 <__fp_cmp>
    44ac:	08 f4       	brcc	.+2      	; 0x44b0 <__cmpsf2+0x6>
    44ae:	81 e0       	ldi	r24, 0x01	; 1
    44b0:	08 95       	ret

000044b2 <__divsf3>:
    44b2:	0c d0       	rcall	.+24     	; 0x44cc <__divsf3x>
    44b4:	0a c1       	rjmp	.+532    	; 0x46ca <__fp_round>
    44b6:	02 d1       	rcall	.+516    	; 0x46bc <__fp_pscB>
    44b8:	40 f0       	brcs	.+16     	; 0x44ca <__divsf3+0x18>
    44ba:	f9 d0       	rcall	.+498    	; 0x46ae <__fp_pscA>
    44bc:	30 f0       	brcs	.+12     	; 0x44ca <__divsf3+0x18>
    44be:	21 f4       	brne	.+8      	; 0x44c8 <__divsf3+0x16>
    44c0:	5f 3f       	cpi	r21, 0xFF	; 255
    44c2:	19 f0       	breq	.+6      	; 0x44ca <__divsf3+0x18>
    44c4:	eb c0       	rjmp	.+470    	; 0x469c <__fp_inf>
    44c6:	51 11       	cpse	r21, r1
    44c8:	34 c1       	rjmp	.+616    	; 0x4732 <__fp_szero>
    44ca:	ee c0       	rjmp	.+476    	; 0x46a8 <__fp_nan>

000044cc <__divsf3x>:
    44cc:	0f d1       	rcall	.+542    	; 0x46ec <__fp_split3>
    44ce:	98 f3       	brcs	.-26     	; 0x44b6 <__divsf3+0x4>

000044d0 <__divsf3_pse>:
__divsf3_pse():
    44d0:	99 23       	and	r25, r25
    44d2:	c9 f3       	breq	.-14     	; 0x44c6 <__divsf3+0x14>
    44d4:	55 23       	and	r21, r21
    44d6:	b1 f3       	breq	.-20     	; 0x44c4 <__divsf3+0x12>
    44d8:	95 1b       	sub	r25, r21
    44da:	55 0b       	sbc	r21, r21
    44dc:	bb 27       	eor	r27, r27
    44de:	aa 27       	eor	r26, r26
    44e0:	62 17       	cp	r22, r18
    44e2:	73 07       	cpc	r23, r19
    44e4:	84 07       	cpc	r24, r20
    44e6:	38 f0       	brcs	.+14     	; 0x44f6 <__divsf3_pse+0x26>
    44e8:	9f 5f       	subi	r25, 0xFF	; 255
    44ea:	5f 4f       	sbci	r21, 0xFF	; 255
    44ec:	22 0f       	add	r18, r18
    44ee:	33 1f       	adc	r19, r19
    44f0:	44 1f       	adc	r20, r20
    44f2:	aa 1f       	adc	r26, r26
    44f4:	a9 f3       	breq	.-22     	; 0x44e0 <__divsf3_pse+0x10>
    44f6:	33 d0       	rcall	.+102    	; 0x455e <__divsf3_pse+0x8e>
    44f8:	0e 2e       	mov	r0, r30
    44fa:	3a f0       	brmi	.+14     	; 0x450a <__divsf3_pse+0x3a>
    44fc:	e0 e8       	ldi	r30, 0x80	; 128
    44fe:	30 d0       	rcall	.+96     	; 0x4560 <__divsf3_pse+0x90>
    4500:	91 50       	subi	r25, 0x01	; 1
    4502:	50 40       	sbci	r21, 0x00	; 0
    4504:	e6 95       	lsr	r30
    4506:	00 1c       	adc	r0, r0
    4508:	ca f7       	brpl	.-14     	; 0x44fc <__divsf3_pse+0x2c>
    450a:	29 d0       	rcall	.+82     	; 0x455e <__divsf3_pse+0x8e>
    450c:	fe 2f       	mov	r31, r30
    450e:	27 d0       	rcall	.+78     	; 0x455e <__divsf3_pse+0x8e>
    4510:	66 0f       	add	r22, r22
    4512:	77 1f       	adc	r23, r23
    4514:	88 1f       	adc	r24, r24
    4516:	bb 1f       	adc	r27, r27
    4518:	26 17       	cp	r18, r22
    451a:	37 07       	cpc	r19, r23
    451c:	48 07       	cpc	r20, r24
    451e:	ab 07       	cpc	r26, r27
    4520:	b0 e8       	ldi	r27, 0x80	; 128
    4522:	09 f0       	breq	.+2      	; 0x4526 <__divsf3_pse+0x56>
    4524:	bb 0b       	sbc	r27, r27
    4526:	80 2d       	mov	r24, r0
    4528:	bf 01       	movw	r22, r30
    452a:	ff 27       	eor	r31, r31
    452c:	93 58       	subi	r25, 0x83	; 131
    452e:	5f 4f       	sbci	r21, 0xFF	; 255
    4530:	2a f0       	brmi	.+10     	; 0x453c <__divsf3_pse+0x6c>
    4532:	9e 3f       	cpi	r25, 0xFE	; 254
    4534:	51 05       	cpc	r21, r1
    4536:	68 f0       	brcs	.+26     	; 0x4552 <__divsf3_pse+0x82>
    4538:	b1 c0       	rjmp	.+354    	; 0x469c <__fp_inf>
    453a:	fb c0       	rjmp	.+502    	; 0x4732 <__fp_szero>
    453c:	5f 3f       	cpi	r21, 0xFF	; 255
    453e:	ec f3       	brlt	.-6      	; 0x453a <__divsf3_pse+0x6a>
    4540:	98 3e       	cpi	r25, 0xE8	; 232
    4542:	dc f3       	brlt	.-10     	; 0x453a <__divsf3_pse+0x6a>
    4544:	86 95       	lsr	r24
    4546:	77 95       	ror	r23
    4548:	67 95       	ror	r22
    454a:	b7 95       	ror	r27
    454c:	f7 95       	ror	r31
    454e:	9f 5f       	subi	r25, 0xFF	; 255
    4550:	c9 f7       	brne	.-14     	; 0x4544 <__divsf3_pse+0x74>
    4552:	88 0f       	add	r24, r24
    4554:	91 1d       	adc	r25, r1
    4556:	96 95       	lsr	r25
    4558:	87 95       	ror	r24
    455a:	97 f9       	bld	r25, 7
    455c:	08 95       	ret
    455e:	e1 e0       	ldi	r30, 0x01	; 1
    4560:	66 0f       	add	r22, r22
    4562:	77 1f       	adc	r23, r23
    4564:	88 1f       	adc	r24, r24
    4566:	bb 1f       	adc	r27, r27
    4568:	62 17       	cp	r22, r18
    456a:	73 07       	cpc	r23, r19
    456c:	84 07       	cpc	r24, r20
    456e:	ba 07       	cpc	r27, r26
    4570:	20 f0       	brcs	.+8      	; 0x457a <__divsf3_pse+0xaa>
    4572:	62 1b       	sub	r22, r18
    4574:	73 0b       	sbc	r23, r19
    4576:	84 0b       	sbc	r24, r20
    4578:	ba 0b       	sbc	r27, r26
    457a:	ee 1f       	adc	r30, r30
    457c:	88 f7       	brcc	.-30     	; 0x4560 <__divsf3_pse+0x90>
    457e:	e0 95       	com	r30
    4580:	08 95       	ret

00004582 <__fixunssfsi>:
__fixunssfsi():
    4582:	bc d0       	rcall	.+376    	; 0x46fc <__fp_splitA>
    4584:	88 f0       	brcs	.+34     	; 0x45a8 <__fixunssfsi+0x26>
    4586:	9f 57       	subi	r25, 0x7F	; 127
    4588:	90 f0       	brcs	.+36     	; 0x45ae <__fixunssfsi+0x2c>
    458a:	b9 2f       	mov	r27, r25
    458c:	99 27       	eor	r25, r25
    458e:	b7 51       	subi	r27, 0x17	; 23
    4590:	a0 f0       	brcs	.+40     	; 0x45ba <__fixunssfsi+0x38>
    4592:	d1 f0       	breq	.+52     	; 0x45c8 <__fixunssfsi+0x46>
    4594:	66 0f       	add	r22, r22
    4596:	77 1f       	adc	r23, r23
    4598:	88 1f       	adc	r24, r24
    459a:	99 1f       	adc	r25, r25
    459c:	1a f0       	brmi	.+6      	; 0x45a4 <__fixunssfsi+0x22>
    459e:	ba 95       	dec	r27
    45a0:	c9 f7       	brne	.-14     	; 0x4594 <__fixunssfsi+0x12>
    45a2:	12 c0       	rjmp	.+36     	; 0x45c8 <__fixunssfsi+0x46>
    45a4:	b1 30       	cpi	r27, 0x01	; 1
    45a6:	81 f0       	breq	.+32     	; 0x45c8 <__fixunssfsi+0x46>
    45a8:	c3 d0       	rcall	.+390    	; 0x4730 <__fp_zero>
    45aa:	b1 e0       	ldi	r27, 0x01	; 1
    45ac:	08 95       	ret
    45ae:	c0 c0       	rjmp	.+384    	; 0x4730 <__fp_zero>
    45b0:	67 2f       	mov	r22, r23
    45b2:	78 2f       	mov	r23, r24
    45b4:	88 27       	eor	r24, r24
    45b6:	b8 5f       	subi	r27, 0xF8	; 248
    45b8:	39 f0       	breq	.+14     	; 0x45c8 <__fixunssfsi+0x46>
    45ba:	b9 3f       	cpi	r27, 0xF9	; 249
    45bc:	cc f3       	brlt	.-14     	; 0x45b0 <__fixunssfsi+0x2e>
    45be:	86 95       	lsr	r24
    45c0:	77 95       	ror	r23
    45c2:	67 95       	ror	r22
    45c4:	b3 95       	inc	r27
    45c6:	d9 f7       	brne	.-10     	; 0x45be <__fixunssfsi+0x3c>
    45c8:	3e f4       	brtc	.+14     	; 0x45d8 <__fixunssfsi+0x56>
    45ca:	90 95       	com	r25
    45cc:	80 95       	com	r24
    45ce:	70 95       	com	r23
    45d0:	61 95       	neg	r22
    45d2:	7f 4f       	sbci	r23, 0xFF	; 255
    45d4:	8f 4f       	sbci	r24, 0xFF	; 255
    45d6:	9f 4f       	sbci	r25, 0xFF	; 255
    45d8:	08 95       	ret

000045da <__floatunsisf>:
__floatunsisf():
    45da:	e8 94       	clt
    45dc:	09 c0       	rjmp	.+18     	; 0x45f0 <__floatsisf+0x12>

000045de <__floatsisf>:
    45de:	97 fb       	bst	r25, 7
    45e0:	3e f4       	brtc	.+14     	; 0x45f0 <__floatsisf+0x12>
    45e2:	90 95       	com	r25
    45e4:	80 95       	com	r24
    45e6:	70 95       	com	r23
    45e8:	61 95       	neg	r22
    45ea:	7f 4f       	sbci	r23, 0xFF	; 255
    45ec:	8f 4f       	sbci	r24, 0xFF	; 255
    45ee:	9f 4f       	sbci	r25, 0xFF	; 255
    45f0:	99 23       	and	r25, r25
    45f2:	a9 f0       	breq	.+42     	; 0x461e <__floatsisf+0x40>
    45f4:	f9 2f       	mov	r31, r25
    45f6:	96 e9       	ldi	r25, 0x96	; 150
    45f8:	bb 27       	eor	r27, r27
    45fa:	93 95       	inc	r25
    45fc:	f6 95       	lsr	r31
    45fe:	87 95       	ror	r24
    4600:	77 95       	ror	r23
    4602:	67 95       	ror	r22
    4604:	b7 95       	ror	r27
    4606:	f1 11       	cpse	r31, r1
    4608:	f8 cf       	rjmp	.-16     	; 0x45fa <__floatsisf+0x1c>
    460a:	fa f4       	brpl	.+62     	; 0x464a <__floatsisf+0x6c>
    460c:	bb 0f       	add	r27, r27
    460e:	11 f4       	brne	.+4      	; 0x4614 <__floatsisf+0x36>
    4610:	60 ff       	sbrs	r22, 0
    4612:	1b c0       	rjmp	.+54     	; 0x464a <__floatsisf+0x6c>
    4614:	6f 5f       	subi	r22, 0xFF	; 255
    4616:	7f 4f       	sbci	r23, 0xFF	; 255
    4618:	8f 4f       	sbci	r24, 0xFF	; 255
    461a:	9f 4f       	sbci	r25, 0xFF	; 255
    461c:	16 c0       	rjmp	.+44     	; 0x464a <__floatsisf+0x6c>
    461e:	88 23       	and	r24, r24
    4620:	11 f0       	breq	.+4      	; 0x4626 <__floatsisf+0x48>
    4622:	96 e9       	ldi	r25, 0x96	; 150
    4624:	11 c0       	rjmp	.+34     	; 0x4648 <__floatsisf+0x6a>
    4626:	77 23       	and	r23, r23
    4628:	21 f0       	breq	.+8      	; 0x4632 <__floatsisf+0x54>
    462a:	9e e8       	ldi	r25, 0x8E	; 142
    462c:	87 2f       	mov	r24, r23
    462e:	76 2f       	mov	r23, r22
    4630:	05 c0       	rjmp	.+10     	; 0x463c <__floatsisf+0x5e>
    4632:	66 23       	and	r22, r22
    4634:	71 f0       	breq	.+28     	; 0x4652 <__floatsisf+0x74>
    4636:	96 e8       	ldi	r25, 0x86	; 134
    4638:	86 2f       	mov	r24, r22
    463a:	70 e0       	ldi	r23, 0x00	; 0
    463c:	60 e0       	ldi	r22, 0x00	; 0
    463e:	2a f0       	brmi	.+10     	; 0x464a <__floatsisf+0x6c>
    4640:	9a 95       	dec	r25
    4642:	66 0f       	add	r22, r22
    4644:	77 1f       	adc	r23, r23
    4646:	88 1f       	adc	r24, r24
    4648:	da f7       	brpl	.-10     	; 0x4640 <__floatsisf+0x62>
    464a:	88 0f       	add	r24, r24
    464c:	96 95       	lsr	r25
    464e:	87 95       	ror	r24
    4650:	97 f9       	bld	r25, 7
    4652:	08 95       	ret

00004654 <__fp_cmp>:
__fp_cmp():
    4654:	99 0f       	add	r25, r25
    4656:	00 08       	sbc	r0, r0
    4658:	55 0f       	add	r21, r21
    465a:	aa 0b       	sbc	r26, r26
    465c:	e0 e8       	ldi	r30, 0x80	; 128
    465e:	fe ef       	ldi	r31, 0xFE	; 254
    4660:	16 16       	cp	r1, r22
    4662:	17 06       	cpc	r1, r23
    4664:	e8 07       	cpc	r30, r24
    4666:	f9 07       	cpc	r31, r25
    4668:	c0 f0       	brcs	.+48     	; 0x469a <__fp_cmp+0x46>
    466a:	12 16       	cp	r1, r18
    466c:	13 06       	cpc	r1, r19
    466e:	e4 07       	cpc	r30, r20
    4670:	f5 07       	cpc	r31, r21
    4672:	98 f0       	brcs	.+38     	; 0x469a <__fp_cmp+0x46>
    4674:	62 1b       	sub	r22, r18
    4676:	73 0b       	sbc	r23, r19
    4678:	84 0b       	sbc	r24, r20
    467a:	95 0b       	sbc	r25, r21
    467c:	39 f4       	brne	.+14     	; 0x468c <__fp_cmp+0x38>
    467e:	0a 26       	eor	r0, r26
    4680:	61 f0       	breq	.+24     	; 0x469a <__fp_cmp+0x46>
    4682:	23 2b       	or	r18, r19
    4684:	24 2b       	or	r18, r20
    4686:	25 2b       	or	r18, r21
    4688:	21 f4       	brne	.+8      	; 0x4692 <__fp_cmp+0x3e>
    468a:	08 95       	ret
    468c:	0a 26       	eor	r0, r26
    468e:	09 f4       	brne	.+2      	; 0x4692 <__fp_cmp+0x3e>
    4690:	a1 40       	sbci	r26, 0x01	; 1
    4692:	a6 95       	lsr	r26
    4694:	8f ef       	ldi	r24, 0xFF	; 255
    4696:	81 1d       	adc	r24, r1
    4698:	81 1d       	adc	r24, r1
    469a:	08 95       	ret

0000469c <__fp_inf>:
__fp_inf():
    469c:	97 f9       	bld	r25, 7
    469e:	9f 67       	ori	r25, 0x7F	; 127
    46a0:	80 e8       	ldi	r24, 0x80	; 128
    46a2:	70 e0       	ldi	r23, 0x00	; 0
    46a4:	60 e0       	ldi	r22, 0x00	; 0
    46a6:	08 95       	ret

000046a8 <__fp_nan>:
__fp_nan():
    46a8:	9f ef       	ldi	r25, 0xFF	; 255
    46aa:	80 ec       	ldi	r24, 0xC0	; 192
    46ac:	08 95       	ret

000046ae <__fp_pscA>:
__fp_pscA():
    46ae:	00 24       	eor	r0, r0
    46b0:	0a 94       	dec	r0
    46b2:	16 16       	cp	r1, r22
    46b4:	17 06       	cpc	r1, r23
    46b6:	18 06       	cpc	r1, r24
    46b8:	09 06       	cpc	r0, r25
    46ba:	08 95       	ret

000046bc <__fp_pscB>:
__fp_pscB():
    46bc:	00 24       	eor	r0, r0
    46be:	0a 94       	dec	r0
    46c0:	12 16       	cp	r1, r18
    46c2:	13 06       	cpc	r1, r19
    46c4:	14 06       	cpc	r1, r20
    46c6:	05 06       	cpc	r0, r21
    46c8:	08 95       	ret

000046ca <__fp_round>:
__fp_round():
    46ca:	09 2e       	mov	r0, r25
    46cc:	03 94       	inc	r0
    46ce:	00 0c       	add	r0, r0
    46d0:	11 f4       	brne	.+4      	; 0x46d6 <__fp_round+0xc>
    46d2:	88 23       	and	r24, r24
    46d4:	52 f0       	brmi	.+20     	; 0x46ea <__fp_round+0x20>
    46d6:	bb 0f       	add	r27, r27
    46d8:	40 f4       	brcc	.+16     	; 0x46ea <__fp_round+0x20>
    46da:	bf 2b       	or	r27, r31
    46dc:	11 f4       	brne	.+4      	; 0x46e2 <__fp_round+0x18>
    46de:	60 ff       	sbrs	r22, 0
    46e0:	04 c0       	rjmp	.+8      	; 0x46ea <__fp_round+0x20>
    46e2:	6f 5f       	subi	r22, 0xFF	; 255
    46e4:	7f 4f       	sbci	r23, 0xFF	; 255
    46e6:	8f 4f       	sbci	r24, 0xFF	; 255
    46e8:	9f 4f       	sbci	r25, 0xFF	; 255
    46ea:	08 95       	ret

000046ec <__fp_split3>:
__fp_split3():
    46ec:	57 fd       	sbrc	r21, 7
    46ee:	90 58       	subi	r25, 0x80	; 128
    46f0:	44 0f       	add	r20, r20
    46f2:	55 1f       	adc	r21, r21
    46f4:	59 f0       	breq	.+22     	; 0x470c <__fp_splitA+0x10>
    46f6:	5f 3f       	cpi	r21, 0xFF	; 255
    46f8:	71 f0       	breq	.+28     	; 0x4716 <__fp_splitA+0x1a>
    46fa:	47 95       	ror	r20

000046fc <__fp_splitA>:
    46fc:	88 0f       	add	r24, r24
    46fe:	97 fb       	bst	r25, 7
    4700:	99 1f       	adc	r25, r25
    4702:	61 f0       	breq	.+24     	; 0x471c <__fp_splitA+0x20>
    4704:	9f 3f       	cpi	r25, 0xFF	; 255
    4706:	79 f0       	breq	.+30     	; 0x4726 <__fp_splitA+0x2a>
    4708:	87 95       	ror	r24
    470a:	08 95       	ret
    470c:	12 16       	cp	r1, r18
    470e:	13 06       	cpc	r1, r19
    4710:	14 06       	cpc	r1, r20
    4712:	55 1f       	adc	r21, r21
    4714:	f2 cf       	rjmp	.-28     	; 0x46fa <__fp_split3+0xe>
    4716:	46 95       	lsr	r20
    4718:	f1 df       	rcall	.-30     	; 0x46fc <__fp_splitA>
    471a:	08 c0       	rjmp	.+16     	; 0x472c <__fp_splitA+0x30>
    471c:	16 16       	cp	r1, r22
    471e:	17 06       	cpc	r1, r23
    4720:	18 06       	cpc	r1, r24
    4722:	99 1f       	adc	r25, r25
    4724:	f1 cf       	rjmp	.-30     	; 0x4708 <__fp_splitA+0xc>
    4726:	86 95       	lsr	r24
    4728:	71 05       	cpc	r23, r1
    472a:	61 05       	cpc	r22, r1
    472c:	08 94       	sec
    472e:	08 95       	ret

00004730 <__fp_zero>:
__fp_zero():
    4730:	e8 94       	clt

00004732 <__fp_szero>:
    4732:	bb 27       	eor	r27, r27
    4734:	66 27       	eor	r22, r22
    4736:	77 27       	eor	r23, r23
    4738:	cb 01       	movw	r24, r22
    473a:	97 f9       	bld	r25, 7
    473c:	08 95       	ret

0000473e <__gesf2>:
__gesf2():
    473e:	8a df       	rcall	.-236    	; 0x4654 <__fp_cmp>
    4740:	08 f4       	brcc	.+2      	; 0x4744 <__gesf2+0x6>
    4742:	8f ef       	ldi	r24, 0xFF	; 255
    4744:	08 95       	ret

00004746 <__mulsf3>:
__mulsf3():
    4746:	0b d0       	rcall	.+22     	; 0x475e <__mulsf3x>
    4748:	c0 cf       	rjmp	.-128    	; 0x46ca <__fp_round>
    474a:	b1 df       	rcall	.-158    	; 0x46ae <__fp_pscA>
    474c:	28 f0       	brcs	.+10     	; 0x4758 <__mulsf3+0x12>
    474e:	b6 df       	rcall	.-148    	; 0x46bc <__fp_pscB>
    4750:	18 f0       	brcs	.+6      	; 0x4758 <__mulsf3+0x12>
    4752:	95 23       	and	r25, r21
    4754:	09 f0       	breq	.+2      	; 0x4758 <__mulsf3+0x12>
    4756:	a2 cf       	rjmp	.-188    	; 0x469c <__fp_inf>
    4758:	a7 cf       	rjmp	.-178    	; 0x46a8 <__fp_nan>
    475a:	11 24       	eor	r1, r1
    475c:	ea cf       	rjmp	.-44     	; 0x4732 <__fp_szero>

0000475e <__mulsf3x>:
__mulsf3x():
    475e:	c6 df       	rcall	.-116    	; 0x46ec <__fp_split3>
    4760:	a0 f3       	brcs	.-24     	; 0x474a <__mulsf3+0x4>

00004762 <__mulsf3_pse>:
    4762:	95 9f       	mul	r25, r21
    4764:	d1 f3       	breq	.-12     	; 0x475a <__mulsf3+0x14>
    4766:	95 0f       	add	r25, r21
    4768:	50 e0       	ldi	r21, 0x00	; 0
    476a:	55 1f       	adc	r21, r21
    476c:	62 9f       	mul	r22, r18
    476e:	f0 01       	movw	r30, r0
    4770:	72 9f       	mul	r23, r18
    4772:	bb 27       	eor	r27, r27
    4774:	f0 0d       	add	r31, r0
    4776:	b1 1d       	adc	r27, r1
    4778:	63 9f       	mul	r22, r19
    477a:	aa 27       	eor	r26, r26
    477c:	f0 0d       	add	r31, r0
    477e:	b1 1d       	adc	r27, r1
    4780:	aa 1f       	adc	r26, r26
    4782:	64 9f       	mul	r22, r20
    4784:	66 27       	eor	r22, r22
    4786:	b0 0d       	add	r27, r0
    4788:	a1 1d       	adc	r26, r1
    478a:	66 1f       	adc	r22, r22
    478c:	82 9f       	mul	r24, r18
    478e:	22 27       	eor	r18, r18
    4790:	b0 0d       	add	r27, r0
    4792:	a1 1d       	adc	r26, r1
    4794:	62 1f       	adc	r22, r18
    4796:	73 9f       	mul	r23, r19
    4798:	b0 0d       	add	r27, r0
    479a:	a1 1d       	adc	r26, r1
    479c:	62 1f       	adc	r22, r18
    479e:	83 9f       	mul	r24, r19
    47a0:	a0 0d       	add	r26, r0
    47a2:	61 1d       	adc	r22, r1
    47a4:	22 1f       	adc	r18, r18
    47a6:	74 9f       	mul	r23, r20
    47a8:	33 27       	eor	r19, r19
    47aa:	a0 0d       	add	r26, r0
    47ac:	61 1d       	adc	r22, r1
    47ae:	23 1f       	adc	r18, r19
    47b0:	84 9f       	mul	r24, r20
    47b2:	60 0d       	add	r22, r0
    47b4:	21 1d       	adc	r18, r1
    47b6:	82 2f       	mov	r24, r18
    47b8:	76 2f       	mov	r23, r22
    47ba:	6a 2f       	mov	r22, r26
    47bc:	11 24       	eor	r1, r1
    47be:	9f 57       	subi	r25, 0x7F	; 127
    47c0:	50 40       	sbci	r21, 0x00	; 0
    47c2:	8a f0       	brmi	.+34     	; 0x47e6 <__mulsf3_pse+0x84>
    47c4:	e1 f0       	breq	.+56     	; 0x47fe <__mulsf3_pse+0x9c>
    47c6:	88 23       	and	r24, r24
    47c8:	4a f0       	brmi	.+18     	; 0x47dc <__mulsf3_pse+0x7a>
    47ca:	ee 0f       	add	r30, r30
    47cc:	ff 1f       	adc	r31, r31
    47ce:	bb 1f       	adc	r27, r27
    47d0:	66 1f       	adc	r22, r22
    47d2:	77 1f       	adc	r23, r23
    47d4:	88 1f       	adc	r24, r24
    47d6:	91 50       	subi	r25, 0x01	; 1
    47d8:	50 40       	sbci	r21, 0x00	; 0
    47da:	a9 f7       	brne	.-22     	; 0x47c6 <__mulsf3_pse+0x64>
    47dc:	9e 3f       	cpi	r25, 0xFE	; 254
    47de:	51 05       	cpc	r21, r1
    47e0:	70 f0       	brcs	.+28     	; 0x47fe <__mulsf3_pse+0x9c>
    47e2:	5c cf       	rjmp	.-328    	; 0x469c <__fp_inf>
    47e4:	a6 cf       	rjmp	.-180    	; 0x4732 <__fp_szero>
    47e6:	5f 3f       	cpi	r21, 0xFF	; 255
    47e8:	ec f3       	brlt	.-6      	; 0x47e4 <__mulsf3_pse+0x82>
    47ea:	98 3e       	cpi	r25, 0xE8	; 232
    47ec:	dc f3       	brlt	.-10     	; 0x47e4 <__mulsf3_pse+0x82>
    47ee:	86 95       	lsr	r24
    47f0:	77 95       	ror	r23
    47f2:	67 95       	ror	r22
    47f4:	b7 95       	ror	r27
    47f6:	f7 95       	ror	r31
    47f8:	e7 95       	ror	r30
    47fa:	9f 5f       	subi	r25, 0xFF	; 255
    47fc:	c1 f7       	brne	.-16     	; 0x47ee <__mulsf3_pse+0x8c>
    47fe:	fe 2b       	or	r31, r30
    4800:	88 0f       	add	r24, r24
    4802:	91 1d       	adc	r25, r1
    4804:	96 95       	lsr	r25
    4806:	87 95       	ror	r24
    4808:	97 f9       	bld	r25, 7
    480a:	08 95       	ret

0000480c <__unordsf2>:
    480c:	23 df       	rcall	.-442    	; 0x4654 <__fp_cmp>
    480e:	88 0b       	sbc	r24, r24
    4810:	99 0b       	sbc	r25, r25
    4812:	08 95       	ret

00004814 <__mulsi3>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    4814:	db 01       	movw	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    4816:	8f 93       	push	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    4818:	9f 93       	push	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    481a:	a1 dd       	rcall	.-1214   	; 0x435e <__muluhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    481c:	bf 91       	pop	r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    481e:	af 91       	pop	r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    4820:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    4822:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    4824:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    4826:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    4828:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    482a:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    482c:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    482e:	11 24       	eor	r1, r1
__mulsi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    4830:	08 95       	ret

00004832 <__udivmodhi4>:
__udivmodhi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    4832:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    4834:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    4836:	51 e1       	ldi	r21, 0x11	; 17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    4838:	07 c0       	rjmp	.+14     	; 0x4848 <__udivmodhi4_ep>

0000483a <__udivmodhi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    483a:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    483c:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    483e:	a6 17       	cp	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    4840:	b7 07       	cpc	r27, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    4842:	10 f0       	brcs	.+4      	; 0x4848 <__udivmodhi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    4844:	a6 1b       	sub	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    4846:	b7 0b       	sbc	r27, r23

00004848 <__udivmodhi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    4848:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    484a:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    484c:	5a 95       	dec	r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    484e:	a9 f7       	brne	.-22     	; 0x483a <__udivmodhi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    4850:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    4852:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    4854:	bc 01       	movw	r22, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    4856:	cd 01       	movw	r24, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    4858:	08 95       	ret

0000485a <__tablejump2__>:
__tablejump2__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    485a:	ee 0f       	add	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    485c:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    485e:	00 24       	eor	r0, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    4860:	00 1c       	adc	r0, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    4862:	0b be       	out	0x3b, r0	; 59
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    4864:	07 90       	elpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    4866:	f6 91       	elpm	r31, Z
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    4868:	e0 2d       	mov	r30, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    486a:	09 94       	ijmp

0000486c <abort>:
abort():
    486c:	81 e0       	ldi	r24, 0x01	; 1
    486e:	90 e0       	ldi	r25, 0x00	; 0
    4870:	f8 94       	cli
    4872:	00 c0       	rjmp	.+0      	; 0x4874 <_exit>

00004874 <_exit>:
exit():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    4874:	f8 94       	cli

00004876 <__stop_program>:
__stop_program():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    4876:	ff cf       	rjmp	.-2      	; 0x4876 <__stop_program>
